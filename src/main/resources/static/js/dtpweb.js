var dtpweb = function (t) {
    "use strict";
    var e = function () {
        return e = Object.assign || function (t) {
            for (var e, n = 1, r = arguments.length; n < r; n++) for (var i in e = arguments[n]) Object.prototype.hasOwnProperty.call(e, i) && (t[i] = e[i]);
            return t
        }, e.apply(this, arguments)
    };

    function n(t, e, n) {
        if (n || 2 === arguments.length) for (var r, i = 0, o = e.length; i < o; i++) !r && i in e || (r || (r = Array.prototype.slice.call(e, 0, i)), r[i] = e[i]);
        return t.concat(r || Array.prototype.slice.call(e))
    }

    "function" == typeof SuppressedError && SuppressedError;

    class r {
        constructor(t, e) {
            this.cols = t || 0, this.rows = e || 0, this.data = new Uint8Array(this.rows * this.cols)
        }

        get reservedBit() {
            return this._reservedBit || (this._reservedBit = new Uint8Array(this.data.length)), this._reservedBit
        }

        set(t, e, n, r) {
            const i = t * this.cols + e;
            this.data[i] = "number" == typeof n ? n : n ? 1 : 0, r && (this.reservedBit[i] = 1)
        }

        get(t, e) {
            return this.data[t * this.cols + e]
        }

        getRowData(t) {
            const e = (t || 0) * this.cols;
            return this.data.slice(e, e + this.cols)
        }

        getColData(t) {
            return this.data.filter(((e, n) => n % this.cols === t))
        }

        xor(t, e, n) {
            this.data[t * this.cols + e] ^= n ? 1 : 0
        }

        fill(t, e, n, r) {
            const i = (e || 0) * this.cols + (n || 0);
            let o = 0;
            o = "number" == typeof r ? r > 0 ? i + r : this.data.length + r : this.data.length, this.data.fill(t, i, o)
        }

        setArray(t, e, n) {
            const r = (e || 0) * this.cols + (n || 0);
            this.data.set(t, r)
        }

        addRow(t, e, n) {
            e >= this.data.length ? console.error(`offset: ${e} 越界`) : (n && n < t.length && (t = t.slice(0, n)), this.data.set(t, e))
        }

        isReserved(t, e) {
            return this._reservedBit ? this._reservedBit[t * this.cols + e] : 0
        }
    }

    class i {
        static isDigit(t) {
            return "number" == typeof t ? t >= 48 && t <= 57 : t >= "0" && t <= "9"
        }

        static isDigits(t, e, n) {
            const r = e || 0, i = n ? r + n : t.length;
            return !(i > t.length) && t.substring(r, i).match(/^[0-9]+$/)
        }

        static isUpper(t) {
            return "number" == typeof t ? t >= 65 && t <= 90 : t >= "A" && t <= "Z"
        }

        static isLower(t) {
            return "number" == typeof t ? t >= 97 && t <= 122 : t >= "a" && t <= "z"
        }

        static ctoi(t) {
            const e = "string" == typeof t ? t.charCodeAt(0) : t;
            return e >= 48 && e <= 57 ? e - 48 : e >= 65 && e <= 90 ? e - 65 + 10 : e >= 97 && e <= 122 ? e - 97 + 10 : -1
        }

        static itoc(t) {
            return t >= 0 && t <= 9 ? `${t}` : String.fromCharCode(t - 10 + 65)
        }

        static repeatChar(t, e) {
            const n = [];
            for (let r = 0; r < e; r++) n.push(t);
            return n.join("")
        }

        static preFillChar(t, e, n) {
            return t.length < e ? Array(e - t.length + 1).join(n) + t : t
        }
    }

    class o {
        static isISO_8859_1(t) {
            if (!t) return !1;
            for (let e = 0; e < t.length; e++) if (t.charCodeAt(e) > 255) return !1;
            return !0
        }

        static getCharCodes(t) {
            t = t || "";
            const e = [];
            for (let n = 0; n < t.length; n++) e.push(t.charCodeAt(n));
            return e
        }

        static getCharCodeArrayString(t) {
            return t.map((t => String.fromCharCode(t))).join("")
        }

        static encodeUtf8(t) {
            const e = [];
            for (let n = 0; n < t.length; n++) {
                let r = t.charCodeAt(n);
                if (r >= 55296 && r <= 56319 && t.length > n + 1) {
                    const e = t.charCodeAt(n + 1);
                    e >= 56320 && e <= 57343 && (r = 1024 * (r - 55296) + e - 56320 + 65536, n += 1)
                }
                r < 128 ? e.push(r) : r < 2048 ? (e.push(r >> 6 | 192), e.push(63 & r | 128)) : r < 55296 || r >= 57344 && r < 65536 ? (e.push(224 | r >> 12), e.push(128 | r >> 6 & 63), e.push(128 | 63 & r)) : r >= 65536 && r <= 1114111 ? (e.push(240 | r >> 18), e.push(128 | r >> 12 & 63), e.push(128 | r >> 6 & 63), e.push(128 | 63 & r)) : e.push(239, 191, 189)
            }
            return new Uint8Array(e)
        }

        static getBytes_Utf8(t) {
            try {
                return (new TextEncoder).encode(t)
            } catch (e) {
                return console.log("DzTextEncoder.encode: TextEncoder is not defined"), this.encodeUtf8(t)
            }
        }

        static getBytes_ISO8859_1(t) {
            return t = unescape(encodeURIComponent(t)), Uint8Array.from(this.getCharCodes(t))
        }

        static getBytes_Unicode(t) {
            return Uint8Array.from(this.getCharCodes(t))
        }

        static getBytes(t, e) {
            return t = t || "", e ? o.getBytes_Utf8(t) : o.getBytes_Unicode(t)
        }

        static hasBase256Chars(t) {
            const e = "string" == typeof t ? t.split("").map((t => t.charCodeAt(0))) : t;
            if ((null == e ? void 0 : e.length) > 0) for (const t of e) if (t >= 128) return !0;
            return !1
        }

        static encodeUnicodeFromUtf8(t) {
            let e = 0, n = 0, r = 0;
            const i = [];
            do {
                if (t[n] <= 127) i[r] = t[n], e = n + 1, r++; else {
                    if (t[n] >= 128 && t[n] <= 191) return;
                    if (t[n] >= 192 && t[n] <= 193) return;
                    if (t[n] >= 194 && t[n] <= 223) i[r] = ((31 & t[n]) << 6) + (63 & t[n + 1]), e = n + 2, r++; else if (t[n] >= 224 && t[n] <= 239) i[r] = ((15 & t[n]) << 12) + ((63 & t[n + 1]) << 6) + (63 & t[n + 2]), e = n + 3, r++; else if (t[n] >= 240) return
                }
                n = e
            } while (n < t.length);
            return i
        }
    }

    const a = [164, 41448, 167, 41452, 168, 41383, 176, 41443, 177, 41408, 183, 41380, 215, 41409, 224, 43172, 225, 43170, 232, 43176, 233, 43174, 234, 43194, 236, 43180, 237, 43178, 242, 43184, 243, 43182, 247, 41410, 249, 43188, 250, 43186, 252, 43193, 257, 43169, 275, 43173, 283, 43175, 299, 43177, 333, 43181, 363, 43185, 462, 43171, 464, 43179, 466, 43183, 468, 43187, 470, 43189, 472, 43190, 474, 43191, 476, 43192, 711, 41382, 713, 41381, 913, 42657, 914, 42658, 915, 42659, 916, 42660, 917, 42661, 918, 42662, 919, 42663, 920, 42664, 921, 42665, 922, 42666, 923, 42667, 924, 42668, 925, 42669, 926, 42670, 927, 42671, 928, 42672, 929, 42673, 931, 42674, 932, 42675, 933, 42676, 934, 42677, 935, 42678, 936, 42679, 937, 42680, 945, 42689, 946, 42690, 947, 42691, 948, 42692, 949, 42693, 950, 42694, 951, 42695, 952, 42696, 953, 42697, 954, 42698, 955, 42699, 956, 42700, 957, 42701, 958, 42702, 959, 42703, 960, 42704, 961, 42705, 963, 42706, 964, 42707, 965, 42708, 966, 42709, 967, 42710, 968, 42711, 969, 42712, 1025, 42919, 1040, 42913, 1041, 42914, 1042, 42915, 1043, 42916, 1044, 42917, 1045, 42918, 1046, 42920, 1047, 42921, 1048, 42922, 1049, 42923, 1050, 42924, 1051, 42925, 1052, 42926, 1053, 42927, 1054, 42928, 1055, 42929, 1056, 42930, 1057, 42931, 1058, 42932, 1059, 42933, 1060, 42934, 1061, 42935, 1062, 42936, 1063, 42937, 1064, 42938, 1065, 42939, 1066, 42940, 1067, 42941, 1068, 42942, 1069, 42943, 1070, 42944, 1071, 42945, 1072, 42961, 1073, 42962, 1074, 42963, 1075, 42964, 1076, 42965, 1077, 42966, 1078, 42968, 1079, 42969, 1080, 42970, 1081, 42971, 1082, 42972, 1083, 42973, 1084, 42974, 1085, 42975, 1086, 42976, 1087, 42977, 1088, 42978, 1089, 42979, 1090, 42980, 1091, 42981, 1092, 42982, 1093, 42983, 1094, 42984, 1095, 42985, 1096, 42986, 1097, 42987, 1098, 42988, 1099, 42989, 1100, 42990, 1101, 42991, 1102, 42992, 1103, 42993, 1105, 42967, 8212, 41386, 8214, 41388, 8216, 41390, 8217, 41391, 8220, 41392, 8221, 41393, 8230, 41389, 8240, 41451, 8242, 41444, 8243, 41445, 8251, 41465, 8451, 41446, 8470, 41453, 8544, 41713, 8545, 41714, 8546, 41715, 8547, 41716, 8548, 41717, 8549, 41718, 8550, 41719, 8551, 41720, 8552, 41721, 8553, 41722, 8554, 41723, 8555, 41724, 8592, 41467, 8593, 41468, 8594, 41466, 8595, 41469, 8712, 41418, 8719, 41415, 8721, 41414, 8730, 41420, 8733, 41432, 8734, 41438, 8736, 41423, 8741, 41422, 8743, 41412, 8744, 41413, 8745, 41417, 8746, 41416, 8747, 41426, 8750, 41427, 8756, 41440, 8757, 41439, 8758, 41411, 8759, 41419, 8765, 41431, 8776, 41430, 8780, 41429, 8800, 41433, 8801, 41428, 8804, 41436, 8805, 41437, 8814, 41434, 8815, 41435, 8857, 41425, 8869, 41421, 8978, 41424, 9312, 41689, 9313, 41690, 9314, 41691, 9315, 41692, 9316, 41693, 9317, 41694, 9318, 41695, 9319, 41696, 9320, 41697, 9321, 41698, 9332, 41669, 9333, 41670, 9334, 41671, 9335, 41672, 9336, 41673, 9337, 41674, 9338, 41675, 9339, 41676, 9340, 41677, 9341, 41678, 9342, 41679, 9343, 41680, 9344, 41681, 9345, 41682, 9346, 41683, 9347, 41684, 9348, 41685, 9349, 41686, 9350, 41687, 9351, 41688, 9352, 41649, 9353, 41650, 9354, 41651, 9355, 41652, 9356, 41653, 9357, 41654, 9358, 41655, 9359, 41656, 9360, 41657, 9361, 41658, 9362, 41659, 9363, 41660, 9364, 41661, 9365, 41662, 9366, 41663, 9367, 41664, 9368, 41665, 9369, 41666, 9370, 41667, 9371, 41668, 9472, 43428, 9473, 43429, 9474, 43430, 9475, 43431, 9476, 43432, 9477, 43433, 9478, 43434, 9479, 43435, 9480, 43436, 9481, 43437, 9482, 43438, 9483, 43439, 9484, 43440, 9485, 43441, 9486, 43442, 9487, 43443, 9488, 43444, 9489, 43445, 9490, 43446, 9491, 43447, 9492, 43448, 9493, 43449, 9494, 43450, 9495, 43451, 9496, 43452, 9497, 43453, 9498, 43454, 9499, 43455, 9500, 43456, 9501, 43457, 9502, 43458, 9503, 43459, 9504, 43460, 9505, 43461, 9506, 43462, 9507, 43463, 9508, 43464, 9509, 43465, 9510, 43466, 9511, 43467, 9512, 43468, 9513, 43469, 9514, 43470, 9515, 43471, 9516, 43472, 9517, 43473, 9518, 43474, 9519, 43475, 9520, 43476, 9521, 43477, 9522, 43478, 9523, 43479, 9524, 43480, 9525, 43481, 9526, 43482, 9527, 43483, 9528, 43484, 9529, 43485, 9530, 43486, 9531, 43487, 9532, 43488, 9533, 43489, 9534, 43490, 9535, 43491, 9536, 43492, 9537, 43493, 9538, 43494, 9539, 43495, 9540, 43496, 9541, 43497, 9542, 43498, 9543, 43499, 9544, 43500, 9545, 43501, 9546, 43502, 9547, 43503, 9632, 41462, 9633, 41461, 9650, 41464, 9651, 41463, 9670, 41460, 9671, 41459, 9675, 41456, 9678, 41458, 9679, 41457, 9733, 41455, 9734, 41454, 9792, 41442, 9794, 41441, 12288, 41377, 12289, 41378, 12290, 41379, 12291, 41384, 12293, 41385, 12296, 41396, 12297, 41397, 12298, 41398, 12299, 41399, 12300, 41400, 12301, 41401, 12302, 41402, 12303, 41403, 12304, 41406, 12305, 41407, 12307, 41470, 12308, 41394, 12309, 41395, 12310, 41404, 12311, 41405, 12353, 42145, 12354, 42146, 12355, 42147, 12356, 42148, 12357, 42149, 12358, 42150, 12359, 42151, 12360, 42152, 12361, 42153, 12362, 42154, 12363, 42155, 12364, 42156, 12365, 42157, 12366, 42158, 12367, 42159, 12368, 42160, 12369, 42161, 12370, 42162, 12371, 42163, 12372, 42164, 12373, 42165, 12374, 42166, 12375, 42167, 12376, 42168, 12377, 42169, 12378, 42170, 12379, 42171, 12380, 42172, 12381, 42173, 12382, 42174, 12383, 42175, 12384, 42176, 12385, 42177, 12386, 42178, 12387, 42179, 12388, 42180, 12389, 42181, 12390, 42182, 12391, 42183, 12392, 42184, 12393, 42185, 12394, 42186, 12395, 42187, 12396, 42188, 12397, 42189, 12398, 42190, 12399, 42191, 12400, 42192, 12401, 42193, 12402, 42194, 12403, 42195, 12404, 42196, 12405, 42197, 12406, 42198, 12407, 42199, 12408, 42200, 12409, 42201, 12410, 42202, 12411, 42203, 12412, 42204, 12413, 42205, 12414, 42206, 12415, 42207, 12416, 42208, 12417, 42209, 12418, 42210, 12419, 42211, 12420, 42212, 12421, 42213, 12422, 42214, 12423, 42215, 12424, 42216, 12425, 42217, 12426, 42218, 12427, 42219, 12428, 42220, 12429, 42221, 12430, 42222, 12431, 42223, 12432, 42224, 12433, 42225, 12434, 42226, 12435, 42227, 12449, 42401, 12450, 42402, 12451, 42403, 12452, 42404, 12453, 42405, 12454, 42406, 12455, 42407, 12456, 42408, 12457, 42409, 12458, 42410, 12459, 42411, 12460, 42412, 12461, 42413, 12462, 42414, 12463, 42415, 12464, 42416, 12465, 42417, 12466, 42418, 12467, 42419, 12468, 42420, 12469, 42421, 12470, 42422, 12471, 42423, 12472, 42424, 12473, 42425, 12474, 42426, 12475, 42427, 12476, 42428, 12477, 42429, 12478, 42430, 12479, 42431, 12480, 42432, 12481, 42433, 12482, 42434, 12483, 42435, 12484, 42436, 12485, 42437, 12486, 42438, 12487, 42439, 12488, 42440, 12489, 42441, 12490, 42442, 12491, 42443, 12492, 42444, 12493, 42445, 12494, 42446, 12495, 42447, 12496, 42448, 12497, 42449, 12498, 42450, 12499, 42451, 12500, 42452, 12501, 42453, 12502, 42454, 12503, 42455, 12504, 42456, 12505, 42457, 12506, 42458, 12507, 42459, 12508, 42460, 12509, 42461, 12510, 42462, 12511, 42463, 12512, 42464, 12513, 42465, 12514, 42466, 12515, 42467, 12516, 42468, 12517, 42469, 12518, 42470, 12519, 42471, 12520, 42472, 12521, 42473, 12522, 42474, 12523, 42475, 12524, 42476, 12525, 42477, 12526, 42478, 12527, 42479, 12528, 42480, 12529, 42481, 12530, 42482, 12531, 42483, 12532, 42484, 12533, 42485, 12534, 42486, 12549, 43205, 12550, 43206, 12551, 43207, 12552, 43208, 12553, 43209, 12554, 43210, 12555, 43211, 12556, 43212, 12557, 43213, 12558, 43214, 12559, 43215, 12560, 43216, 12561, 43217, 12562, 43218, 12563, 43219, 12564, 43220, 12565, 43221, 12566, 43222, 12567, 43223, 12568, 43224, 12569, 43225, 12570, 43226, 12571, 43227, 12572, 43228, 12573, 43229, 12574, 43230, 12575, 43231, 12576, 43232, 12577, 43233, 12578, 43234, 12579, 43235, 12580, 43236, 12581, 43237, 12582, 43238, 12583, 43239, 12584, 43240, 12585, 43241, 12832, 41701, 12833, 41702, 12834, 41703, 12835, 41704, 12836, 41705, 12837, 41706, 12838, 41707, 12839, 41708, 12840, 41709, 12841, 41710, 19968, 53947, 19969, 46753, 19971, 50911, 19975, 52722, 19976, 54729, 19977, 51453, 19978, 51663, 19979, 53186, 19980, 55458, 19981, 45755, 19982, 54251, 19984, 55460, 19985, 46067, 19987, 55208, 19988, 51154, 19989, 55463, 19990, 51904, 19992, 51184, 19993, 45563, 19994, 53941, 19995, 46292, 19996, 46763, 19997, 52159, 19998, 55465, 20002, 46762, 20004, 49597, 20005, 53711, 20007, 51621, 20008, 55469, 20010, 47350, 20011, 53694, 20012, 58332, 20013, 54992, 20016, 47073, 20018, 46254, 20020, 49625, 20022, 55484, 20024, 52712, 20025, 46500, 20026, 52906, 20027, 55031, 20029, 49398, 20030, 48857, 20031, 55471, 20035, 50379, 20037, 48835, 20039, 55473, 20040, 50100, 20041, 53989, 20043, 54958, 20044, 52954, 20045, 54695, 20046, 47861, 20047, 47014, 20048, 49366, 20050, 50873, 20051, 50642, 20052, 51143, 20054, 47572, 20056, 46027, 20057, 53970, 20060, 55487, 20061, 48837, 20062, 50930, 20063, 53938, 20064, 53168, 20065, 53223, 20070, 51945, 20073, 55488, 20080, 49906, 20081, 49874, 20083, 51433, 20094, 51116, 20102, 49611, 20104, 54248, 20105, 54777, 20107, 51906, 20108, 46846, 20109, 55457, 20110, 54234, 20111, 49143, 20113, 54470, 20114, 48037, 20115, 55489, 20116, 52965, 20117, 48814, 20120, 55464, 20122, 53703, 20123, 53417, 20127, 55485, 20128, 55791, 20129, 52726, 20130, 49082, 20132, 48571, 20133, 47781, 20134, 53984, 20135, 45818, 20136, 47840, 20137, 50358, 20139, 53229, 20140, 48809, 20141, 52644, 20142, 49601, 20146, 51159, 20147, 55793, 20149, 55796, 20154, 51403, 20155, 55529, 20159, 53978, 20160, 51890, 20161, 51402, 20162, 55532, 20163, 55530, 20164, 55494, 20165, 48630, 20166, 50893, 20167, 46064, 20169, 55531, 20170, 48625, 20171, 48617, 20173, 51412, 20174, 46291, 20177, 49880, 20179, 45782, 20180, 55248, 20181, 51915, 20182, 52219, 20183, 54732, 20184, 47286, 20185, 53193, 20189, 55770, 20190, 55536, 20191, 51114, 20193, 55534, 20195, 46330, 20196, 49646, 20197, 53972, 20200, 55533, 20202, 53959, 20203, 55535, 20204, 50119, 20208, 53750, 20210, 55001, 20211, 55538, 20213, 55541, 20214, 48382, 20215, 48347, 20219, 51406, 20221, 47069, 20223, 47042, 20225, 50931, 20233, 55544, 20234, 53953, 20237, 52969, 20238, 48319, 20239, 47100, 20240, 47013, 20241, 53469, 20247, 55002, 20248, 54213, 20249, 48111, 20250, 48097, 20251, 55537, 20254, 51617, 20255, 52912, 20256, 46251, 20258, 55539, 20260, 51659, 20261, 55542, 20262, 49879, 20263, 55543, 20266, 52913, 20267, 55545, 20271, 45742, 20272, 47552, 20274, 55715, 20276, 45289, 20278, 49638, 20280, 51692, 20282, 52165, 20284, 52166, 20285, 55716, 20291, 46568, 20294, 46507, 20301, 52923, 20302, 46541, 20303, 55201, 20304, 55284, 20305, 54227, 20307, 52453, 20309, 47822, 20311, 55714, 20312, 55772, 20313, 54240, 20314, 55549, 20315, 47088, 20316, 55287, 20317, 55550, 20318, 55546, 20319, 55713, 20320, 50403, 20323, 54198, 20324, 55540, 20325, 55773, 20327, 55547, 20329, 50661, 20332, 49360, 20335, 53744, 20336, 45275, 20339, 48337, 20340, 55718, 20342, 55717, 20347, 55724, 20348, 55726, 20350, 55723, 20351, 51897, 20355, 55721, 20356, 54966, 20360, 46046, 20361, 55720, 20363, 49405, 20365, 51916, 20367, 55722, 20369, 55719, 20372, 55728, 20375, 46769, 20379, 47529, 20381, 53952, 20384, 53184, 20387, 49858, 20389, 48580, 20390, 54764, 20391, 45792, 20392, 51144, 20393, 49131, 20394, 55725, 20396, 55727, 20398, 52970, 20399, 47854, 20405, 51158, 20415, 45539, 20419, 46297, 20420, 46829, 20421, 55732, 20426, 49057, 20430, 55774, 20431, 51150, 20432, 49406, 20433, 55736, 20439, 52183, 20440, 47101, 20442, 55733, 20444, 55735, 20445, 45475, 20446, 54241, 20447, 55737, 20449, 53445, 20451, 55734, 20454, 55729, 20456, 55730, 20457, 49577, 20458, 55731, 20461, 48371, 20462, 53470, 20463, 47273, 20465, 48867, 20467, 55741, 20472, 55738, 20474, 45235, 20478, 55746, 20492, 55748, 20493, 45494, 20495, 55743, 20498, 46521, 20500, 48883, 20504, 52424, 20505, 47858, 20506, 53968, 20508, 55747, 20511, 48616, 20513, 45995, 20517, 55749, 20518, 48875, 20520, 55750, 20521, 55739, 20522, 50399, 20524, 55742, 20525, 55745, 20526, 55744, 20538, 54702, 20540, 54965, 20542, 51171, 20547, 55752, 20551, 48345, 20552, 55754, 20556, 55740, 20558, 55755, 20559, 50859, 20565, 55753, 20570, 55286, 20572, 52643, 20581, 48545, 20588, 55756, 20598, 50620, 20599, 52661, 20603, 55757, 20606, 55751, 20607, 45989, 20608, 49150, 20613, 47285, 20616, 49404, 20621, 45304, 20643, 46326, 20645, 55758, 20647, 55759, 20648, 46242, 20649, 55760, 20652, 46303, 20658, 45249, 20666, 55761, 20667, 51637, 20687, 53233, 20694, 55762, 20698, 49605, 20710, 55766, 20711, 51630, 20716, 55765, 20717, 55764, 20718, 55767, 20723, 52187, 20725, 48553, 20731, 50855, 20742, 55763, 20743, 55768, 20747, 55769, 20754, 51429, 20769, 49372, 20799, 46841, 20800, 55459, 20801, 54474, 20803, 54442, 20804, 53462, 20805, 46052, 20806, 54743, 20808, 53192, 20809, 47586, 20811, 49099, 20813, 50146, 20817, 46802, 20820, 52675, 20821, 55790, 20822, 55792, 20826, 46515, 20828, 46773, 20834, 48804, 20837, 51435, 20840, 51371, 20843, 45259, 20844, 47531, 20845, 49657, 20846, 55778, 20848, 49340, 20849, 47538, 20851, 47576, 20852, 53451, 20853, 45560, 20854, 50916, 20855, 48863, 20856, 46564, 20857, 55240, 20859, 53752, 20860, 48358, 20861, 51934, 20864, 48317, 20865, 55782, 20866, 55527, 20869, 50394, 20872, 47316, 20873, 51389, 20876, 45793, 20877, 54489, 20882, 50096, 20885, 50145, 20886, 55970, 20887, 51423, 20889, 53428, 20891, 48892, 20892, 50601, 20896, 47578, 20898, 55971, 20900, 54441, 20901, 55972, 20907, 55803, 20908, 46764, 20911, 47083, 20912, 45561, 20913, 55804, 20914, 46053, 20915, 48886, 20917, 49142, 20918, 53937, 20919, 49380, 20923, 46771, 20924, 55806, 20925, 55805, 20928, 48827, 20932, 50912, 20934, 55228, 20935, 55969, 20937, 49593, 20939, 46578, 20940, 49640, 20943, 48373, 20945, 46293, 20955, 49629, 20957, 50429, 20960, 48312, 20961, 47026, 20964, 47087, 20971, 55788, 20973, 50878, 20975, 49069, 20976, 48075, 20979, 46538, 20981, 56265, 20982, 53463, 20984, 52665, 20985, 45244, 20986, 46070, 20987, 48119, 20988, 56266, 20989, 47791, 20991, 54500, 20992, 46518, 20993, 46579, 20994, 55510, 20995, 51408, 20998, 47062, 20999, 51152, 21e3, 55511, 21002, 49071, 21005, 56251, 21006, 55512, 21009, 53452, 21010, 48046, 21014, 60350, 21015, 49616, 21016, 49653, 21017, 54514, 21018, 47317, 21019, 46260, 21021, 46069, 21024, 51646, 21028, 50640, 21032, 50649, 21033, 49403, 21035, 45552, 21037, 55513, 21038, 47566, 21040, 46525, 21043, 55514, 21046, 54982, 21047, 52130, 21048, 51375, 21049, 51634, 21050, 46284, 21051, 49100, 21053, 47604, 21055, 55515, 21056, 55516, 21057, 46823, 21058, 48321, 21059, 52458, 21066, 53239, 21068, 55517, 21069, 51120, 21072, 47568, 21073, 48547, 21076, 52446, 21078, 50890, 21084, 55520, 21086, 55518, 21089, 55519, 21093, 45310, 21095, 48871, 21097, 51875, 21098, 48372, 21103, 47281, 21106, 47342, 21117, 55522, 21119, 48587, 21121, 55524, 21122, 55523, 21128, 50684, 21136, 55525, 21139, 55526, 21147, 49574, 21149, 51376, 21150, 45292, 21151, 47526, 21152, 48339, 21153, 52977, 21154, 56253, 21155, 49619, 21160, 46767, 21161, 55034, 21162, 50604, 21163, 48601, 21164, 56254, 21165, 56255, 21169, 49400, 21170, 48802, 21171, 49357, 21182, 56256, 21183, 51910, 21187, 45738, 21191, 54210, 21193, 50147, 21195, 53675, 21200, 56258, 21202, 49365, 21206, 56259, 21208, 49073, 21215, 50364, 21220, 51162, 21232, 56260, 21241, 55784, 21242, 51671, 21246, 47540, 21247, 52976, 21248, 54472, 21253, 45308, 21254, 46290, 21256, 53465, 21261, 55785, 21263, 57035, 21264, 55787, 21269, 55472, 21270, 48047, 21271, 45489, 21273, 46039, 21274, 55502, 21277, 54481, 21280, 48563, 21281, 49135, 21283, 53179, 21286, 55504, 21290, 47051, 21294, 55505, 21305, 50853, 21306, 51192, 21307, 53949, 21310, 55506, 21311, 50404, 21313, 51886, 21315, 51111, 21317, 55462, 21319, 51709, 21320, 52967, 21321, 48092, 21322, 45291, 21326, 48042, 21327, 53421, 21329, 45488, 21330, 55268, 21331, 55231, 21333, 46501, 21334, 49908, 21335, 50383, 21338, 45737, 21340, 45751, 21342, 45541, 21343, 57266, 21344, 54716, 21345, 49064, 21346, 49836, 21347, 55509, 21348, 49841, 21350, 55508, 21351, 52948, 21353, 56032, 21355, 52928, 21358, 55476, 21359, 50094, 21360, 54177, 21361, 52899, 21363, 48308, 21364, 51380, 21365, 49873, 21367, 48877, 21368, 53430, 21370, 56033, 21375, 51172, 21378, 45991, 21380, 46834, 21381, 52476, 21382, 49402, 21385, 49399, 21387, 53689, 21388, 53729, 21389, 55495, 21397, 45790, 21400, 49381, 21402, 47857, 21405, 55496, 21407, 54445, 21410, 53217, 21411, 55497, 21413, 55498, 21414, 53187, 21416, 46072, 21417, 48839, 21422, 55499, 21430, 56268, 21435, 51365, 21439, 53208, 21441, 51454, 21442, 45774, 21448, 54230, 21449, 45798, 21450, 48304, 21451, 54225, 21452, 52139, 21453, 47028, 21457, 47010, 21460, 51941, 21462, 51361, 21463, 51932, 21464, 45540, 21465, 53488, 21467, 50641, 21471, 56261, 21472, 46590, 21475, 49114, 21476, 47557, 21477, 48868, 21478, 49645, 21480, 57270, 21481, 57269, 21482, 54971, 21483, 48592, 21484, 54745, 21485, 45256, 21486, 46755, 21487, 49097, 21488, 52392, 21489, 57267, 21490, 51895, 21491, 54226, 21493, 55503, 21494, 53942, 21495, 47813, 21496, 52158, 21497, 52414, 21499, 57271, 21500, 46576, 21501, 57268, 21505, 54261, 21507, 46036, 21508, 47351, 21510, 57274, 21512, 47823, 21513, 48298, 21514, 46581, 21516, 52652, 21517, 50171, 21518, 47859, 21519, 49396, 21520, 52674, 21521, 53234, 21522, 57272, 21523, 53189, 21525, 49856, 21526, 57273, 21527, 49904, 21531, 48893, 21533, 49631, 21534, 52684, 21535, 54007, 21536, 47053, 21537, 57281, 21539, 57284, 21542, 47089, 21543, 45257, 21544, 46806, 21545, 47060, 21547, 47788, 21548, 52477, 21549, 49108, 21550, 52145, 21551, 50932, 21553, 54952, 21554, 57285, 21556, 52962, 21557, 46003, 21560, 52988, 21561, 46261, 21563, 52935, 21564, 47856, 21566, 52961, 21568, 53693, 21571, 57280, 21574, 46324, 21576, 46026, 21578, 47334, 21579, 57275, 21584, 50373, 21586, 57276, 21587, 57277, 21588, 57278, 21589, 50619, 21590, 57279, 21591, 57282, 21592, 54449, 21593, 57283, 21595, 51130, 21596, 52952, 21602, 50392, 21604, 57290, 21606, 57295, 21608, 55004, 21617, 57289, 21618, 57306, 21619, 52918, 21621, 47815, 21622, 57294, 21623, 57288, 21624, 50654, 21627, 51691, 21628, 47860, 21629, 50172, 21632, 48855, 21634, 57286, 21636, 57293, 21638, 50648, 21643, 54694, 21644, 47821, 21646, 48844, 21647, 54205, 21648, 47296, 21650, 55012, 21652, 57287, 21653, 47550, 21654, 49063, 21657, 49660, 21658, 57291, 21659, 57292, 21661, 57296, 21667, 57307, 21668, 57317, 21670, 57303, 21671, 57302, 21672, 55241, 21673, 57315, 21674, 57316, 21675, 58859, 21676, 53927, 21677, 57298, 21679, 49065, 21681, 54491, 21683, 49096, 21684, 57300, 21688, 53196, 21691, 57309, 21693, 53706, 21695, 57310, 21696, 45223, 21697, 50871, 21698, 57299, 21700, 47845, 21702, 46815, 21703, 52699, 21704, 47614, 21705, 54485, 21708, 57311, 21709, 53228, 21710, 45221, 21711, 57319, 21712, 57297, 21713, 53702, 21714, 57301, 21715, 57304, 21716, 57305, 21717, 57308, 21719, 48041, 21721, 57312, 21722, 57313, 21724, 57314, 21725, 57318, 21726, 57320, 21727, 54196, 21733, 47335, 21734, 50614, 21735, 57322, 21736, 51674, 21737, 49576, 21738, 50372, 21741, 49118, 21742, 53240, 21746, 54748, 21747, 57326, 21754, 45752, 21756, 47839, 21757, 57324, 21759, 56257, 21761, 53732, 21766, 52212, 21767, 46269, 21769, 45222, 21775, 57329, 21776, 52422, 21777, 57330, 21780, 57325, 21787, 57321, 21792, 57323, 21794, 57327, 21795, 57328, 21796, 48061, 21799, 57331, 21802, 57332, 21804, 48035, 21806, 51931, 21807, 52904, 21808, 57511, 21809, 45994, 21811, 57510, 21815, 57505, 21820, 57342, 21822, 52697, 21823, 57340, 21825, 57338, 21827, 49104, 21828, 55236, 21830, 51660, 21833, 57336, 21834, 45217, 21840, 57341, 21845, 57339, 21846, 57506, 21852, 57512, 21857, 47048, 21860, 50849, 21861, 51638, 21862, 49330, 21863, 57333, 21866, 50622, 21868, 55492, 21869, 57337, 21870, 50422, 21877, 57507, 21878, 57508, 21879, 57509, 21880, 53413, 21883, 57524, 21884, 52452, 21886, 57521, 21888, 49062, 21889, 57519, 21890, 52921, 21891, 57515, 21892, 51654, 21895, 49326, 21896, 57518, 21897, 47853, 21898, 47792, 21899, 57513, 21903, 57334, 21905, 57523, 21908, 57528, 21912, 46253, 21913, 57529, 21916, 53170, 21917, 47816, 21919, 57520, 21927, 53498, 21937, 57516, 21939, 54523, 21941, 57335, 21943, 50663, 21945, 57517, 21947, 54263, 21949, 57526, 21950, 57527, 21956, 57540, 21957, 53473, 21961, 57532, 21964, 57545, 21965, 57546, 21969, 57534, 21970, 57514, 21971, 51620, 21972, 57537, 21974, 57522, 21980, 51912, 21981, 57539, 21983, 57525, 21985, 52939, 21987, 52163, 21988, 57549, 21989, 57542, 21990, 57538, 21992, 57547, 21994, 57530, 21995, 57535, 21996, 57536, 21999, 57541, 22002, 57543, 22003, 57544, 22005, 57548, 22007, 57531, 22013, 52180, 22014, 57557, 22016, 57558, 22017, 57554, 22024, 57552, 22025, 48334, 22028, 57553, 22030, 47298, 22031, 55493, 22040, 53482, 22043, 49903, 22046, 57551, 22047, 57533, 22051, 57556, 22052, 57555, 22055, 57559, 22060, 57564, 22061, 57560, 22065, 55030, 22066, 46e3, 22068, 55276, 22070, 52155, 22073, 57562, 22075, 52987, 22079, 47833, 22092, 57569, 22093, 57565, 22094, 53933, 22100, 57570, 22103, 57563, 22104, 57561, 22105, 57567, 22108, 57568, 22114, 57566, 22116, 57572, 22120, 50935, 22121, 55468, 22122, 54507, 22123, 57574, 22124, 51913, 22129, 57573, 22134, 47297, 22139, 57575, 22140, 57576, 22149, 57577, 22150, 57571, 22158, 47807, 22159, 52455, 22163, 57578, 22179, 53241, 22191, 57579, 22199, 51394, 22204, 48576, 22218, 50386, 22228, 57580, 22231, 57581, 22234, 51188, 22235, 52164, 22237, 57582, 22238, 48088, 22239, 55478, 22240, 54002, 22241, 57583, 22242, 52677, 22244, 46810, 22251, 57585, 22253, 54448, 22256, 49319, 22257, 46289, 22260, 52903, 22261, 57584, 22265, 57586, 22266, 47564, 22269, 47610, 22270, 52668, 22271, 57587, 22275, 50900, 22276, 57588, 22278, 54450, 22280, 51366, 22281, 57590, 22282, 57589, 22300, 57591, 22303, 52673, 22307, 51877, 22312, 54490, 22313, 56279, 22314, 56281, 22316, 56280, 22317, 47591, 22318, 56284, 22319, 56285, 22320, 46552, 22323, 56282, 22329, 56283, 22330, 45985, 22331, 56287, 22334, 48120, 22336, 54967, 22338, 56288, 22343, 48889, 22346, 47035, 22348, 56272, 22349, 52398, 22350, 49074, 22351, 48053, 22352, 55288, 22353, 49107, 22359, 49129, 22362, 48353, 22363, 52403, 22364, 56286, 22365, 45267, 22366, 52971, 22367, 47064, 22368, 55225, 22369, 50882, 22372, 49316, 22374, 52409, 22376, 56295, 22377, 56289, 22378, 50874, 22379, 56291, 22381, 56296, 22383, 50679, 22387, 56298, 22390, 56297, 22391, 49088, 22395, 56294, 22396, 56293, 22402, 46265, 22403, 49324, 22404, 49826, 22405, 56290, 22406, 56292, 22411, 53453, 22412, 56301, 22418, 49373, 22419, 56306, 22427, 46818, 22432, 56307, 22433, 56274, 22434, 47544, 22435, 54443, 22436, 56300, 22438, 49105, 22439, 56304, 22441, 56273, 22443, 46566, 22445, 56299, 22446, 49125, 22450, 56302, 22452, 56305, 22456, 56313, 22466, 47521, 22467, 45219, 22475, 49905, 22478, 46023, 22479, 56303, 22482, 56312, 22484, 50898, 22485, 56308, 22488, 56309, 22489, 56311, 22490, 56310, 22493, 56318, 22495, 54258, 22496, 45754, 22500, 56317, 22509, 56484, 22511, 56315, 22516, 56314, 22520, 56316, 22521, 50656, 22522, 48121, 22525, 56483, 22528, 56485, 22530, 52419, 22534, 46801, 22535, 56768, 22539, 56481, 22541, 56482, 22545, 51125, 22549, 46825, 22553, 56487, 22558, 56486, 22560, 56489, 22561, 45476, 22564, 46540, 22570, 49072, 22576, 53727, 22581, 46786, 22596, 56488, 22604, 52218, 22605, 60403, 22609, 52188, 22612, 52222, 22616, 52417, 22622, 51451, 22629, 56490, 22635, 52462, 22636, 56491, 22654, 56275, 22656, 56495, 22657, 56492, 22659, 48819, 22661, 51963, 22665, 56493, 22674, 51658, 22675, 50361, 22681, 51133, 22682, 56494, 22686, 54518, 22687, 53478, 22696, 50347, 22697, 46805, 22716, 56276, 22721, 45530, 22725, 56277, 22737, 56278, 22741, 47806, 22756, 51392, 22763, 51903, 22764, 51401, 22766, 55219, 22768, 51705, 22771, 49095, 22774, 47864, 22777, 53948, 22786, 58042, 22788, 46246, 22791, 45496, 22797, 47284, 22799, 53188, 22804, 55783, 22805, 53158, 22806, 52706, 22809, 55789, 22810, 46816, 22812, 53945, 22815, 47547, 22820, 58041, 22821, 58039, 22823, 46323, 22825, 52460, 22826, 52395, 22827, 47090, 22829, 55474, 22830, 53739, 22831, 47803, 22833, 51879, 22836, 52663, 22839, 53956, 22840, 49124, 22841, 48336, 22842, 46817, 22844, 57029, 22849, 57030, 22850, 56252, 22852, 53721, 22855, 50918, 22856, 50382, 22857, 47086, 22859, 47068, 22862, 49148, 22863, 55264, 22865, 50933, 22868, 45500, 22869, 57032, 22870, 48561, 22871, 52439, 22872, 57034, 22874, 57033, 22880, 46572, 22882, 51677, 22885, 45250, 22899, 50606, 22900, 50603, 22902, 50380, 22904, 48361, 22905, 52221, 22909, 47811, 22913, 58873, 22914, 51431, 22915, 58874, 22916, 52733, 22918, 55217, 22919, 47294, 22920, 49896, 22922, 51409, 22925, 58875, 22930, 46794, 22931, 48331, 22934, 53757, 22935, 59041, 22937, 50158, 22942, 59044, 22947, 58878, 22948, 59045, 22949, 52695, 22952, 47041, 22953, 58876, 22954, 58877, 22955, 59043, 22958, 50397, 22959, 59048, 22962, 59047, 22969, 50115, 22971, 50910, 22974, 59050, 22982, 50359, 22986, 59042, 22987, 51900, 22992, 48611, 22993, 47555, 22994, 59046, 22995, 53461, 22996, 52911, 22999, 59049, 23e3, 59056, 23002, 53926, 23004, 48554, 23005, 59053, 23011, 59055, 23013, 49361, 23016, 53964, 23020, 48295, 23033, 59057, 23035, 54006, 23039, 55243, 23041, 52734, 23043, 52702, 23044, 49830, 23045, 59051, 23046, 59052, 23047, 48575, 23048, 59054, 23049, 59059, 23052, 59058, 23057, 59062, 23059, 59064, 23064, 50415, 23068, 50376, 23071, 48874, 23072, 51695, 23075, 59063, 23077, 46832, 23081, 50148, 23089, 54249, 23090, 59060, 23092, 59061, 23094, 51362, 23100, 59069, 23104, 59065, 23110, 50885, 23113, 52721, 23114, 59067, 23125, 59068, 23130, 48105, 23138, 59070, 23143, 59066, 23146, 49335, 23156, 54180, 23157, 59071, 23158, 51700, 23159, 59075, 23162, 59076, 23167, 53494, 23186, 50109, 23194, 50116, 23195, 59074, 23210, 59073, 23218, 59079, 23219, 53169, 23221, 60404, 23224, 59082, 23230, 59077, 23233, 48350, 23234, 51625, 23241, 48309, 23244, 53203, 23250, 59080, 23252, 59081, 23254, 59086, 23256, 59088, 23260, 59089, 23264, 59083, 23265, 46549, 23267, 59084, 23270, 59087, 23273, 50395, 23275, 59078, 23281, 59085, 23305, 59090, 23318, 59092, 23319, 59091, 23346, 59093, 23348, 55800, 23351, 59094, 23360, 59095, 23376, 55251, 23377, 59101, 23379, 59102, 23380, 49111, 23381, 54480, 23383, 55254, 23384, 46310, 23385, 52207, 23386, 59098, 23387, 55491, 23388, 55246, 23389, 53410, 23391, 50127, 23394, 59103, 23395, 48318, 23396, 47554, 23397, 59099, 23398, 53671, 23401, 47778, 23402, 49871, 23404, 55467, 23408, 51947, 23409, 58862, 23411, 59100, 23413, 47093, 23418, 51430, 23421, 50421, 23424, 58802, 23425, 50430, 23427, 52220, 23428, 58803, 23429, 54700, 23431, 54254, 23432, 51928, 23433, 45234, 23435, 52174, 23436, 52714, 23439, 47850, 23443, 58805, 23445, 58804, 23447, 55258, 23448, 47577, 23449, 55014, 23450, 46760, 23451, 52720, 23452, 53963, 23453, 45478, 23454, 51893, 23456, 46056, 23457, 51699, 23458, 49101, 23459, 53499, 23460, 51922, 23461, 58806, 23462, 48066, 23466, 53212, 23467, 47532, 23472, 54487, 23475, 47782, 23476, 53735, 23477, 53244, 23478, 48338, 23480, 58807, 23481, 51421, 23485, 49133, 23486, 45558, 23487, 52190, 23490, 48325, 23492, 48324, 23493, 54010, 23494, 50140, 23495, 49116, 23500, 47291, 23504, 50114, 23506, 47790, 23507, 54434, 23517, 51166, 23518, 50351, 23519, 45804, 23521, 47569, 23524, 58811, 23525, 49608, 23528, 54703, 23534, 58812, 23536, 58814, 23544, 46311, 23545, 46804, 23546, 52162, 23547, 53680, 23548, 46524, 23551, 51929, 23553, 47074, 23556, 51684, 23558, 48555, 23561, 52926, 23562, 55280, 23567, 53409, 23569, 51673, 23572, 46843, 23573, 59096, 23574, 48354, 23576, 46014, 23578, 51664, 23580, 59097, 23581, 45986, 23586, 57036, 23588, 54216, 23589, 57037, 23591, 53922, 23596, 57038, 23601, 48845, 23604, 57039, 23608, 51884, 23609, 54012, 23610, 46047, 23611, 58858, 23612, 50401, 23613, 48801, 23614, 52914, 23615, 50418, 23616, 48854, 23617, 50856, 23618, 45795, 23621, 48851, 23624, 51196, 23625, 52459, 23626, 48620, 23627, 52957, 23630, 51898, 23631, 50881, 23632, 58860, 23633, 53436, 23637, 54713, 23641, 58861, 23646, 51956, 23648, 52672, 23649, 49861, 23651, 58863, 23653, 49860, 23654, 58864, 23662, 58872, 23663, 52685, 23665, 51645, 23673, 53977, 23674, 57768, 23679, 54252, 23681, 52202, 23682, 50929, 23688, 57772, 23692, 57767, 23693, 57769, 23696, 57770, 23697, 57775, 23700, 45805, 23702, 57771, 23703, 47322, 23704, 57773, 23705, 57774, 23706, 57776, 23707, 46522, 23708, 57777, 23714, 57779, 23715, 57784, 23721, 53714, 23723, 57782, 23724, 57781, 23725, 49643, 23729, 57783, 23731, 54464, 23733, 57778, 23735, 57786, 23736, 45238, 23741, 57780, 23743, 49145, 23745, 57785, 23748, 57787, 23755, 57790, 23762, 57788, 23769, 54981, 23777, 53183, 23780, 57789, 23781, 57791, 23782, 49869, 23784, 46827, 23786, 54264, 23789, 51149, 23792, 47077, 23803, 48894, 23810, 57792, 23811, 57793, 23814, 57799, 23815, 46055, 23822, 50921, 23828, 46302, 23830, 53698, 23835, 57800, 23838, 57798, 23844, 57797, 23846, 57795, 23847, 57794, 23849, 45504, 23853, 54712, 23854, 57796, 23860, 57803, 23869, 57804, 23870, 57802, 23879, 61434, 23882, 57811, 23883, 57810, 23884, 51126, 23896, 57801, 23899, 57806, 23901, 57808, 23913, 57812, 23915, 57809, 23916, 57805, 23919, 57807, 23924, 57813, 23938, 57814, 23961, 57815, 23965, 57816, 23991, 57818, 24005, 57819, 24013, 52897, 24027, 59357, 24029, 46248, 24030, 55005, 24033, 53682, 24034, 46002, 24037, 47524, 24038, 55283, 24039, 51145, 24040, 48862, 24041, 47534, 24043, 52951, 24046, 45806, 24047, 56271, 24049, 48314, 24050, 53969, 24051, 52168, 24052, 45261, 24055, 53231, 24061, 55779, 24062, 48621, 24065, 45522, 24066, 51920, 24067, 45756, 24069, 52135, 24070, 47019, 24072, 51878, 24076, 53155, 24079, 57592, 24080, 54730, 24081, 57595, 24084, 57594, 24085, 50625, 24086, 52475, 24088, 49585, 24089, 57593, 24090, 55011, 24091, 45743, 24092, 54980, 24093, 46555, 24102, 46328, 24103, 54945, 24109, 53167, 24110, 45295, 24113, 57596, 24119, 57761, 24120, 45987, 24123, 57597, 24124, 57598, 24125, 50097, 24130, 50141, 24132, 57762, 24133, 47097, 24140, 48079, 24148, 57763, 24149, 50363, 24155, 57764, 24158, 57765, 24161, 57766, 24162, 46257, 24178, 47305, 24179, 50877, 24180, 50410, 24182, 45730, 24184, 53458, 24186, 59355, 24187, 48067, 24188, 54231, 24189, 54212, 24191, 47587, 24192, 58063, 24196, 55215, 24198, 51180, 24199, 45523, 24202, 46258, 24203, 58065, 24207, 53490, 24208, 49838, 24209, 58064, 24211, 49122, 24212, 54182, 24213, 46551, 24214, 58066, 24215, 46570, 24217, 50157, 24218, 47357, 24220, 47278, 24222, 50643, 24223, 47055, 24224, 58068, 24229, 58067, 24230, 46792, 24231, 55289, 24237, 52645, 24243, 58072, 24245, 58070, 24246, 51964, 24247, 49077, 24248, 54201, 24249, 58069, 24254, 58071, 24265, 49582, 24266, 49352, 24273, 58075, 24274, 58074, 24275, 49322, 24278, 49614, 24283, 58076, 24296, 58077, 24298, 58078, 24308, 56264, 24310, 53715, 24311, 52642, 24314, 48552, 24318, 57027, 24319, 55461, 24320, 49066, 24321, 56269, 24322, 53996, 24323, 50938, 24324, 50602, 24328, 57028, 24330, 45527, 24331, 57262, 24335, 51901, 24337, 57265, 24339, 47533, 24341, 54013, 24343, 47269, 24344, 47851, 24347, 46042, 24351, 46556, 24352, 54725, 24357, 50134, 24358, 53202, 24359, 48033, 24361, 58867, 24362, 58866, 24365, 58868, 24367, 52708, 24369, 51445, 24377, 46511, 24378, 51135, 24380, 58870, 24384, 60592, 24400, 58854, 24402, 47593, 24403, 46513, 24405, 49852, 24406, 58856, 24407, 58855, 24408, 58857, 24413, 53965, 24417, 57834, 24418, 53454, 24420, 52654, 24422, 53733, 24425, 45770, 24426, 45547, 24428, 45554, 24429, 50669, 24432, 54723, 24433, 54192, 24435, 57820, 24439, 57821, 24441, 53979, 24443, 46009, 24444, 45515, 24448, 52729, 24449, 54775, 24450, 57822, 24452, 48822, 24453, 46333, 24455, 57823, 24456, 47836, 24457, 57824, 24458, 48050, 24459, 49865, 24460, 57825, 24464, 53484, 24466, 52669, 24469, 57826, 24471, 46531, 24472, 50631, 24473, 57827, 24476, 57828, 24481, 54265, 24488, 57829, 24490, 53677, 24493, 57830, 24494, 52898, 24501, 57831, 24503, 46530, 24508, 57832, 24509, 48085, 24515, 53444, 24516, 58080, 24517, 45528, 24518, 53988, 24521, 58081, 24524, 48329, 24525, 51404, 24527, 58083, 24528, 60670, 24529, 60669, 24530, 57263, 24534, 58082, 24535, 54974, 24536, 52732, 24537, 50086, 24541, 58307, 24544, 54994, 24545, 58087, 24548, 58088, 24551, 54215, 24554, 58092, 24555, 49132, 24557, 58093, 24558, 58085, 24561, 46016, 24565, 50414, 24568, 58094, 24571, 53443, 24573, 47862, 24574, 58089, 24575, 47070, 24576, 48051, 24577, 52396, 24578, 52171, 24579, 58084, 24580, 58086, 24581, 58090, 24582, 58091, 24586, 58103, 24589, 58100, 24590, 54517, 24591, 58099, 24594, 50605, 24596, 54778, 24597, 50626, 24598, 45760, 24601, 58095, 24603, 58098, 24604, 49583, 24605, 52156, 24608, 46497, 24609, 58105, 24613, 48305, 24614, 58097, 24615, 53460, 24616, 54457, 24617, 58101, 24618, 47574, 24619, 58102, 24623, 51155, 24629, 58096, 24635, 55260, 24636, 60833, 24639, 58104, 24641, 60837, 24642, 58110, 24643, 51921, 24651, 49589, 24653, 48080, 24656, 49110, 24658, 47843, 24661, 52129, 24665, 60838, 24666, 60835, 24669, 60834, 24674, 48086, 24675, 60839, 24676, 53492, 24679, 60836, 24680, 47838, 24681, 46839, 24682, 58273, 24683, 46770, 24684, 52465, 24685, 47527, 24687, 53154, 24688, 51105, 24691, 49106, 24694, 46833, 24696, 58106, 24697, 58107, 24698, 58109, 24699, 58108, 24700, 50389, 24701, 58274, 24703, 54209, 24707, 58279, 24708, 51140, 24713, 53156, 24716, 58281, 24717, 47799, 24722, 58280, 24724, 48090, 24726, 58275, 24730, 58276, 24731, 58282, 24733, 58278, 24735, 52978, 24736, 54214, 24739, 48060, 24742, 54467, 24744, 50426, 24747, 60840, 24748, 53500, 24749, 58277, 24751, 50165, 24753, 58285, 24754, 45487, 24756, 58290, 24760, 48322, 24763, 58284, 24764, 46527, 24773, 51177, 24774, 58288, 24778, 48810, 24779, 52719, 24785, 48115, 24789, 52456, 24792, 58287, 24794, 58289, 24796, 53159, 24797, 58286, 24799, 52905, 24800, 48093, 24806, 46571, 24807, 48869, 24808, 45778, 24809, 46029, 24811, 45497, 24812, 58283, 24813, 45777, 24814, 46508, 24815, 47583, 24816, 46824, 24819, 53227, 24820, 58295, 24822, 48076, 24825, 51399, 24826, 53450, 24832, 58296, 24833, 46062, 24838, 60841, 24840, 54266, 24841, 54244, 24845, 60842, 24846, 58297, 24847, 53986, 24853, 58293, 24858, 54238, 24863, 47312, 24864, 58291, 24867, 58294, 24868, 47071, 24870, 58292, 24871, 49314, 24875, 58298, 24895, 54456, 24904, 46280, 24906, 58299, 24908, 48069, 24910, 51703, 24913, 51685, 24917, 50365, 24925, 60843, 24930, 49917, 24935, 48091, 24936, 49070, 24944, 52927, 24949, 58300, 24951, 49078, 24971, 45551, 24974, 54519, 24980, 58302, 24989, 60845, 24999, 58303, 25e3, 47785, 25001, 60844, 25004, 58301, 25015, 58304, 25022, 47798, 25026, 46766, 25032, 53432, 25034, 45251, 25035, 60846, 25041, 60847, 25042, 49345, 25044, 58305, 25062, 50611, 25077, 58306, 25087, 56498, 25094, 60848, 25096, 47338, 25098, 52972, 25099, 60071, 25100, 53479, 25101, 51961, 25102, 51414, 25103, 53175, 25104, 46025, 25105, 52946, 25106, 48612, 25109, 58334, 25110, 48114, 25111, 60072, 25112, 54717, 25114, 50909, 25115, 60073, 25119, 60074, 25121, 60076, 25122, 60075, 25124, 60078, 25125, 60077, 25130, 48600, 25132, 60079, 25134, 49854, 25139, 46273, 25140, 46327, 25143, 48039, 25149, 60646, 25150, 60645, 25151, 47039, 25152, 52217, 25153, 45538, 25155, 60647, 25159, 51656, 25160, 60648, 25161, 60649, 25163, 51926, 25164, 57040, 25165, 45765, 25166, 54522, 25169, 50891, 25170, 45255, 25171, 46322, 25172, 51411, 25176, 52688, 25179, 49080, 25187, 49115, 25190, 51108, 25191, 54964, 25193, 49321, 25194, 57041, 25195, 51624, 25196, 53743, 25197, 50596, 25198, 45287, 25199, 46006, 25200, 51397, 25203, 45282, 25206, 47094, 25209, 50682, 25212, 46835, 25214, 54738, 25215, 46032, 25216, 48316, 25220, 45997, 25225, 48881, 25226, 45265, 25233, 53974, 25234, 51939, 25235, 55205, 25237, 52662, 25238, 46774, 25239, 49081, 25240, 54747, 25242, 47271, 25243, 50647, 25247, 57042, 25248, 49113, 25249, 49877, 25250, 51136, 25252, 48036, 25253, 45480, 25256, 50666, 25259, 50683, 25260, 52391, 25265, 45479, 25269, 46550, 25273, 50344, 25275, 57043, 25276, 53690, 25277, 46057, 25279, 50162, 25282, 47095, 25284, 55028, 25285, 46499, 25286, 45808, 25287, 50356, 25288, 50409, 25289, 49325, 25290, 57044, 25292, 45288, 25293, 50628, 25294, 49632, 25296, 47573, 25298, 48860, 25299, 52696, 25300, 45262, 25302, 52687, 25303, 57046, 25304, 48848, 25305, 55230, 25306, 57045, 25307, 54736, 25308, 45277, 25311, 50402, 25314, 49827, 25315, 48368, 25317, 54197, 25318, 49337, 25319, 50593, 25320, 45734, 25321, 54513, 25324, 49320, 25325, 51907, 25326, 57047, 25327, 54780, 25329, 47536, 25331, 51373, 25332, 52137, 25334, 57049, 25335, 49085, 25340, 50868, 25341, 55207, 25342, 51888, 25343, 50371, 25345, 46038, 25346, 47570, 25351, 54968, 25352, 60156, 25353, 45236, 25358, 49126, 25361, 52468, 25366, 52698, 25370, 54975, 25371, 49870, 25373, 52942, 25374, 52386, 25375, 53422, 25376, 50387, 25377, 46514, 25378, 57048, 25379, 54773, 25380, 48311, 25381, 48083, 25384, 45220, 25386, 50610, 25387, 46316, 25391, 54769, 25394, 60157, 25401, 57050, 25402, 52646, 25405, 52716, 25410, 52966, 25411, 57052, 25413, 52657, 25414, 49318, 25417, 55229, 25419, 57051, 25420, 45254, 25421, 47796, 25422, 51667, 25423, 50419, 25424, 48872, 25429, 45750, 25438, 49356, 25439, 52208, 25441, 48369, 25442, 48059, 25443, 46519, 25447, 50677, 25449, 57062, 25453, 57059, 25454, 48861, 25457, 57055, 25462, 46263, 25463, 48605, 25466, 57056, 25467, 50413, 25472, 53190, 25474, 46560, 25479, 46814, 25480, 51930, 25481, 46580, 25482, 57061, 25484, 54726, 25486, 57057, 25487, 52429, 25488, 50942, 25490, 50629, 25494, 53940, 25496, 48882, 25504, 49875, 25506, 52413, 25507, 46008, 25509, 48595, 25511, 49112, 25512, 52678, 25513, 53722, 25514, 46315, 25516, 57060, 25517, 57053, 25518, 57063, 25520, 60158, 25523, 49840, 25524, 57058, 25527, 54976, 25528, 46503, 25530, 45812, 25532, 57064, 25534, 57074, 25540, 57069, 25542, 57073, 25545, 51424, 25549, 55265, 25550, 57071, 25551, 50152, 25552, 52449, 25554, 45797, 25558, 53950, 25566, 57070, 25568, 57067, 25569, 52949, 25571, 46247, 25577, 49067, 25578, 48830, 25581, 48594, 25586, 57065, 25588, 54446, 25590, 57054, 25592, 57066, 25597, 49343, 25599, 57068, 25600, 45811, 25601, 47337, 25602, 49831, 25605, 48577, 25611, 57077, 25612, 57080, 25615, 45739, 25616, 46244, 25619, 46314, 25620, 51622, 25627, 57078, 25628, 52177, 25630, 47331, 25632, 57079, 25633, 57082, 25638, 57081, 25642, 52418, 25644, 45281, 25645, 46318, 25652, 58810, 25658, 53423, 25661, 45803, 25663, 60321, 25665, 57076, 25668, 51683, 25669, 57075, 25670, 45274, 25671, 53921, 25672, 45559, 25674, 52399, 25682, 57072, 25684, 52132, 25688, 54698, 25694, 57083, 25703, 46301, 25705, 50342, 25709, 57085, 25720, 50174, 25721, 50337, 25722, 57249, 25730, 49612, 25732, 57084, 25733, 48879, 25735, 50866, 25745, 46021, 25746, 51446, 25749, 52154, 25750, 57086, 25753, 57252, 25758, 55218, 25764, 46007, 25769, 49603, 25772, 51147, 25773, 45733, 25774, 46313, 25776, 55211, 25781, 50412, 25783, 57250, 25784, 57251, 25786, 57253, 25788, 47795, 25792, 57254, 25794, 49374, 25797, 51651, 25805, 45785, 25806, 51174, 25808, 57255, 25810, 51164, 25815, 57256, 25816, 60322, 25822, 52179, 25826, 57258, 25828, 57257, 25830, 45761, 25856, 50634, 25865, 57259, 25874, 54492, 25880, 51393, 25893, 57260, 25899, 48880, 25902, 57261, 25903, 54951, 25908, 60087, 25909, 60342, 25910, 51925, 25912, 55548, 25913, 47300, 25915, 47525, 25918, 47045, 25919, 54782, 25925, 47562, 25928, 53415, 25929, 62669, 25932, 46544, 25935, 50164, 25937, 48840, 25941, 60343, 25942, 45245, 25945, 48588, 25947, 49586, 25949, 45526, 25950, 45992, 25954, 47314, 25955, 51618, 25958, 46808, 25963, 60344, 25964, 48820, 25968, 51965, 25970, 51139, 25972, 54779, 25975, 47091, 25991, 52932, 25995, 54699, 25996, 45555, 26e3, 60595, 26001, 45279, 26003, 60597, 26007, 46775, 26009, 49615, 26011, 62970, 26012, 53425, 26015, 54757, 26017, 52947, 26020, 48623, 26021, 46050, 26023, 47275, 26025, 54710, 26027, 60861, 26029, 46799, 26031, 52153, 26032, 53442, 26041, 47037, 26044, 60598, 26045, 51881, 26049, 50644, 26051, 60601, 26052, 60600, 26053, 49859, 26054, 60599, 26059, 53501, 26060, 60602, 26062, 60603, 26063, 55269, 26066, 60604, 26070, 60605, 26071, 50924, 26080, 52958, 26082, 48328, 26085, 51413, 26086, 46505, 26087, 48841, 26088, 54972, 26089, 54503, 26092, 53678, 26093, 53489, 26094, 60088, 26095, 60089, 26096, 60090, 26097, 47797, 26102, 51889, 26103, 49141, 26106, 52730, 26112, 60096, 26114, 45242, 26115, 60094, 26118, 49317, 26122, 60091, 26124, 45821, 26126, 50167, 26127, 48104, 26131, 53975, 26132, 52980, 26133, 60095, 26137, 60092, 26141, 60099, 26143, 53447, 26144, 54195, 26149, 46266, 26151, 50113, 26152, 55282, 26157, 54737, 26159, 51911, 26161, 60101, 26164, 60100, 26165, 60103, 26166, 60102, 26172, 55015, 26174, 53204, 26177, 60107, 26179, 48078, 26187, 48634, 26188, 51662, 26191, 60108, 26194, 51641, 26195, 53246, 26196, 60106, 26197, 54478, 26198, 60109, 26199, 60111, 26202, 52717, 26207, 60105, 26209, 60110, 26212, 52974, 26214, 48094, 26216, 46015, 26222, 50901, 26223, 48816, 26224, 52986, 26228, 51175, 26230, 48807, 26231, 60112, 26234, 54983, 26238, 49600, 26242, 54493, 26244, 60113, 26247, 53182, 26252, 60114, 26257, 51950, 26262, 50607, 26263, 45237, 26269, 60116, 26279, 60115, 26280, 62687, 26286, 50362, 26292, 45481, 26297, 58847, 26302, 60117, 26329, 51951, 26331, 60118, 26332, 60119, 26333, 50904, 26342, 60120, 26345, 60121, 26352, 54459, 26354, 51194, 26355, 53943, 26356, 47356, 26359, 60098, 26361, 45788, 26364, 49916, 26366, 54520, 26367, 52454, 26368, 55278, 26376, 54466, 26377, 54224, 26378, 60355, 26379, 50675, 26381, 47102, 26384, 60372, 26388, 52151, 26389, 60382, 26391, 49354, 26395, 52731, 26397, 45999, 26399, 50906, 26406, 60412, 26408, 50366, 26410, 52916, 26411, 50345, 26412, 45502, 26413, 54525, 26415, 51957, 26417, 55020, 26420, 50899, 26421, 46820, 26426, 48122, 26429, 53472, 26432, 51633, 26434, 54483, 26435, 51368, 26438, 47307, 26440, 59582, 26441, 51644, 26444, 59579, 26446, 49390, 26447, 53459, 26448, 45764, 26449, 46309, 26451, 59580, 26454, 54728, 26460, 46789, 26462, 59581, 26463, 51960, 26464, 47324, 26465, 52469, 26469, 49332, 26472, 53742, 26473, 59583, 26474, 59586, 26477, 47804, 26479, 45485, 26480, 48604, 26482, 60093, 26483, 59587, 26485, 59590, 26487, 59595, 26492, 59596, 26494, 52169, 26495, 45285, 26497, 48299, 26500, 47545, 26503, 59585, 26505, 52727, 26507, 59594, 26512, 52982, 26517, 54765, 26519, 49622, 26520, 59588, 26522, 50102, 26524, 47611, 26525, 54950, 26526, 59592, 26530, 51936, 26531, 54502, 26533, 59584, 26535, 59589, 26536, 59591, 26538, 51129, 26539, 47075, 26541, 59593, 26543, 49117, 26544, 59602, 26547, 59607, 26549, 59605, 26550, 48348, 26551, 48335, 26552, 59611, 26561, 59614, 26563, 59610, 26564, 45562, 26575, 45272, 26576, 50355, 26577, 47308, 26578, 50914, 26579, 51390, 26580, 51425, 26584, 59599, 26585, 59604, 26586, 59606, 26588, 47601, 26589, 59608, 26590, 55285, 26592, 50427, 26594, 59612, 26597, 45801, 26601, 59601, 26604, 48365, 26607, 49090, 26608, 59597, 26609, 55033, 26611, 49656, 26612, 45809, 26621, 59615, 26623, 51905, 26624, 59609, 26629, 54692, 26631, 45546, 26632, 54715, 26633, 59598, 26634, 59600, 26635, 46768, 26636, 59603, 26638, 59613, 26639, 49336, 26641, 51959, 26643, 52136, 26646, 50908, 26647, 49397, 26653, 59625, 26657, 53411, 26665, 59634, 26666, 55018, 26674, 59616, 26675, 59617, 26679, 53753, 26680, 47819, 26681, 47353, 26684, 47345, 26685, 54484, 26686, 59631, 26688, 59630, 26689, 59628, 26690, 47600, 26691, 52434, 26692, 59622, 26693, 52902, 26694, 49138, 26696, 45240, 26697, 59633, 26698, 59632, 26700, 55232, 26702, 59620, 26704, 52649, 26705, 51619, 26707, 48056, 26708, 48603, 26709, 59626, 26720, 59618, 26721, 59619, 26722, 59621, 26723, 46517, 26724, 59623, 26725, 51141, 26726, 59627, 26727, 59629, 26728, 48560, 26729, 55214, 26731, 59640, 26740, 59637, 26742, 52656, 26743, 59638, 26753, 49594, 26755, 59624, 26757, 50103, 26758, 45296, 26767, 59636, 26771, 59639, 26775, 47523, 26786, 51666, 26790, 50126, 26791, 52960, 26792, 49382, 26797, 52211, 26799, 52445, 26800, 53429, 26803, 51937, 26805, 59635, 26816, 48364, 26818, 59641, 26825, 50142, 26827, 50917, 26829, 47607, 26834, 45300, 26837, 55256, 26840, 48300, 26842, 50671, 26848, 52420, 26851, 59814, 26862, 51629, 26864, 59810, 26865, 49378, 26869, 49091, 26873, 59646, 26874, 47575, 26876, 59643, 26881, 59812, 26885, 53966, 26891, 59811, 26893, 54962, 26894, 55221, 26896, 59815, 26898, 48567, 26911, 59644, 26912, 59645, 26916, 59809, 26925, 52694, 26928, 53932, 26932, 59826, 26937, 59817, 26941, 46250, 26943, 46267, 26946, 59819, 26964, 53416, 26967, 59813, 26970, 46078, 26973, 59820, 26974, 49379, 26976, 59818, 26979, 59833, 26982, 59832, 26987, 59822, 26990, 59642, 26993, 59816, 26999, 49068, 27e3, 59825, 27001, 59834, 27004, 49829, 27008, 59823, 27010, 47301, 27012, 59821, 27014, 54236, 27015, 59828, 27016, 59829, 27017, 59831, 27021, 59847, 27028, 49350, 27029, 59845, 27032, 59824, 27035, 59835, 27036, 45297, 27047, 59836, 27048, 54693, 27051, 59838, 27053, 59839, 27057, 59841, 27060, 49649, 27063, 51382, 27067, 59837, 27073, 59842, 27082, 59843, 27084, 59827, 27086, 59830, 27088, 48049, 27092, 59840, 27099, 48375, 27103, 59844, 27104, 59846, 27117, 59850, 27122, 59854, 27133, 45787, 27135, 59848, 27146, 47022, 27159, 59851, 27160, 59852, 27167, 54721, 27169, 50339, 27176, 59864, 27178, 47841, 27183, 59849, 27185, 54179, 27189, 59860, 27197, 59863, 27198, 59856, 27204, 59855, 27207, 51137, 27216, 59858, 27224, 59865, 27225, 46024, 27227, 59859, 27233, 53232, 27237, 59853, 27249, 46071, 27257, 59862, 27260, 59866, 27264, 52404, 27268, 53165, 27278, 59861, 27280, 59868, 27281, 59867, 27287, 59870, 27296, 59857, 27305, 59869, 27307, 59871, 27308, 50122, 27424, 51127, 27425, 46286, 27426, 48054, 27427, 53440, 27428, 60579, 27431, 50615, 27442, 54267, 27447, 60580, 27449, 60581, 27450, 50907, 27454, 49134, 27459, 60582, 27462, 60583, 27463, 53418, 27465, 51128, 27468, 47336, 27481, 60584, 27490, 54969, 27491, 54781, 27492, 46283, 27493, 45757, 27494, 52964, 27495, 50919, 27498, 52705, 27513, 46325, 27515, 52160, 27516, 48351, 27521, 59874, 27522, 59875, 27523, 53738, 27524, 59877, 27526, 46329, 27527, 59876, 27529, 53683, 27530, 51938, 27531, 45776, 27533, 59880, 27538, 59878, 27539, 59879, 27542, 54963, 27546, 59881, 27547, 59882, 27553, 59883, 27562, 59884, 27571, 60591, 27572, 50617, 27573, 46798, 27575, 54003, 27583, 46574, 27585, 48089, 27586, 60593, 27589, 53987, 27595, 52963, 27597, 50360, 27599, 50111, 27602, 46782, 27603, 55481, 27604, 45512, 27605, 45519, 27606, 45521, 27607, 50686, 27609, 45520, 27611, 50091, 27617, 54705, 27626, 60324, 27627, 47809, 27631, 52410, 27635, 60325, 27637, 60327, 27641, 60328, 27645, 60326, 27653, 60329, 27654, 60331, 27655, 60330, 27661, 60332, 27663, 51919, 27664, 55477, 27665, 50161, 27667, 50085, 27668, 50936, 27669, 60333, 27670, 50378, 27672, 60334, 27673, 60335, 27674, 60336, 27675, 47061, 27679, 47098, 27681, 60337, 27682, 51170, 27684, 60339, 27686, 47780, 27687, 53749, 27688, 45233, 27689, 60338, 27690, 60340, 27694, 46506, 27695, 49864, 27696, 51176, 27698, 60341, 27700, 52142, 27701, 58335, 27704, 54208, 27709, 55771, 27712, 52641, 27713, 54957, 27714, 51187, 27718, 55776, 27719, 48099, 27721, 47802, 27722, 58338, 27728, 53163, 27732, 58336, 27733, 51655, 27735, 47801, 27739, 53684, 27740, 58337, 27741, 51434, 27742, 47535, 27743, 48557, 27744, 46040, 27745, 52955, 27748, 52416, 27752, 58344, 27753, 58345, 27754, 52724, 27760, 52397, 27762, 48307, 27764, 58346, 27766, 58347, 27769, 53466, 27773, 50939, 27774, 47066, 27777, 51167, 27778, 53962, 27779, 52950, 27781, 58340, 27782, 58348, 27784, 51698, 27785, 46017, 27788, 58343, 27791, 50915, 27792, 58341, 27795, 60851, 27796, 58342, 27801, 51635, 27803, 50662, 27807, 47541, 27809, 50107, 27811, 58339, 27812, 50621, 27813, 49572, 27814, 49881, 27815, 45783, 27817, 58349, 27818, 48038, 27819, 50349, 27821, 58352, 27822, 48858, 27825, 58363, 27826, 58357, 27827, 47827, 27832, 47056, 27833, 54221, 27835, 54990, 27836, 54739, 27837, 47553, 27838, 54708, 27839, 53720, 27844, 53433, 27845, 51190, 27849, 51370, 27850, 45748, 27852, 50138, 27856, 58350, 27859, 58364, 27860, 58351, 27861, 47016, 27862, 58359, 27863, 58356, 27867, 47034, 27870, 50594, 27872, 58358, 27873, 50653, 27874, 45736, 27875, 50940, 27877, 50400, 27880, 55202, 27882, 49377, 27883, 58361, 27886, 58362, 27887, 58365, 27888, 52393, 27889, 58355, 27891, 54206, 27893, 45507, 27894, 60852, 27895, 58353, 27896, 58354, 27898, 58360, 27899, 53434, 27900, 50883, 27901, 54515, 27902, 58366, 27905, 48608, 27908, 58535, 27911, 58534, 27915, 53747, 27916, 58531, 27918, 58537, 27922, 51447, 27927, 53172, 27929, 58536, 27930, 58542, 27931, 49893, 27934, 46772, 27941, 48626, 27943, 58530, 27946, 47849, 27947, 58538, 27950, 58540, 27953, 46845, 27954, 55006, 27955, 58546, 27957, 58541, 27961, 58529, 27963, 48110, 27964, 52701, 27965, 51106, 27966, 50633, 27969, 49655, 27971, 58532, 27973, 51123, 27974, 48556, 27975, 48573, 27976, 58533, 27978, 55239, 27979, 45794, 27981, 58539, 27982, 48323, 27983, 58543, 27985, 48107, 27986, 58544, 27987, 50600, 27988, 58545, 27993, 54755, 27994, 49059, 27996, 58554, 27998, 58551, 28e3, 58555, 28003, 58557, 28006, 50902, 28009, 47814, 28010, 49355, 28014, 47265, 28015, 58548, 28020, 54433, 28023, 47779, 28024, 48638, 28028, 58556, 28034, 52671, 28037, 50425, 28040, 53243, 28041, 51686, 28044, 54207, 28046, 53201, 28049, 58547, 28051, 58552, 28052, 58553, 28053, 52457, 28059, 52430, 28061, 49364, 28062, 58549, 28063, 49584, 28064, 58550, 28065, 52944, 28067, 48065, 28068, 46547, 28070, 51443, 28071, 48551, 28072, 54727, 28073, 51628, 28074, 47266, 28075, 58570, 28078, 58572, 28079, 53700, 28082, 53946, 28085, 47789, 28088, 47828, 28095, 58563, 28096, 46573, 28100, 55245, 28101, 58560, 28102, 53245, 28103, 58559, 28107, 49628, 28108, 52426, 28113, 51943, 28118, 50391, 28120, 52436, 28121, 58568, 28125, 58567, 28126, 58561, 28128, 58564, 28129, 46509, 28132, 54233, 28134, 58566, 28139, 54009, 28140, 46307, 28142, 48052, 28145, 51694, 28147, 46270, 28151, 48108, 28153, 53709, 28155, 52461, 28156, 60853, 28165, 51173, 28170, 54440, 28172, 58571, 28173, 55253, 28174, 58562, 28176, 48549, 28177, 58565, 28180, 54246, 28182, 58569, 28183, 51704, 28186, 58558, 28189, 54245, 28192, 51198, 28193, 46793, 28195, 54524, 28196, 45747, 28197, 58583, 28201, 52930, 28203, 58573, 28205, 52924, 28207, 47323, 28210, 58582, 28212, 49098, 28216, 54222, 28218, 50156, 28227, 50632, 28228, 58584, 28237, 52676, 28238, 58575, 28243, 58580, 28244, 58581, 28246, 47870, 28248, 53222, 28251, 54719, 28255, 58578, 28267, 58576, 28270, 58574, 28286, 52709, 28287, 51882, 28291, 49315, 28293, 48550, 28294, 58579, 28297, 47304, 28303, 58599, 28304, 54452, 28312, 58587, 28316, 49647, 28319, 58601, 28322, 53991, 28325, 58591, 28327, 58592, 28330, 53162, 28335, 52189, 28337, 58586, 28338, 58577, 28340, 58597, 28342, 51420, 28343, 58595, 28346, 50407, 28347, 58594, 28349, 58593, 28353, 46076, 28354, 58600, 28359, 46561, 28363, 55244, 28367, 58598, 28369, 48044, 28371, 55250, 28372, 52431, 28373, 60408, 28375, 58596, 28378, 47606, 28382, 54989, 28383, 58585, 28384, 58588, 28385, 49914, 28386, 58590, 28388, 49867, 28389, 49348, 28390, 49872, 28392, 45557, 28393, 52402, 28404, 46542, 28409, 58607, 28418, 50863, 28422, 50913, 28425, 58613, 28431, 49833, 28435, 49388, 28436, 53725, 28437, 58606, 28448, 50350, 28452, 58605, 28457, 58614, 28458, 58612, 28459, 49918, 28461, 58589, 28463, 58608, 28465, 51966, 28467, 54724, 28470, 58609, 28478, 53754, 28486, 58603, 28487, 58604, 28491, 58610, 28493, 52907, 28504, 50635, 28508, 51121, 28510, 49850, 28514, 58602, 28518, 49610, 28525, 52406, 28526, 46001, 28530, 58619, 28532, 58611, 28536, 58618, 28538, 58621, 28540, 58620, 28548, 46030, 28552, 46010, 28553, 58615, 28556, 58617, 28557, 58616, 28558, 50668, 28572, 49341, 28577, 54504, 28583, 58786, 28595, 45252, 28598, 58788, 28601, 58787, 28608, 48292, 28610, 58789, 28617, 58785, 28625, 58622, 28626, 45556, 28638, 58792, 28640, 58793, 28641, 58790, 28654, 58791, 28655, 58794, 28689, 50905, 28698, 58795, 28699, 58797, 28707, 58796, 28725, 58799, 28729, 58798, 28748, 47584, 28751, 58800, 28766, 58801, 28779, 48112, 28780, 60641, 28781, 50160, 28783, 46534, 28784, 48082, 28789, 49641, 28790, 54510, 28792, 48836, 28796, 55238, 28798, 54486, 28799, 45779, 28800, 60606, 28805, 60097, 28809, 49839, 28810, 46262, 28814, 53719, 28818, 46004, 28820, 51378, 28821, 49083, 28822, 60608, 28825, 54987, 28828, 60607, 28829, 60609, 28843, 60613, 28844, 48870, 28845, 52415, 28846, 50650, 28847, 48828, 28849, 60614, 28851, 45566, 28855, 60612, 28856, 54696, 28857, 46563, 28859, 60610, 28860, 49590, 28861, 46051, 28864, 60611, 28865, 52152, 28866, 49347, 28867, 52478, 28872, 49618, 28874, 60616, 28888, 47846, 28889, 49363, 28891, 55026, 28895, 53708, 28900, 49086, 28902, 47027, 28903, 51669, 28904, 60615, 28905, 48098, 28907, 52428, 28908, 48637, 28909, 51400, 28911, 53161, 28919, 52713, 28921, 50667, 28925, 47081, 28937, 53705, 28938, 47800, 28944, 60617, 28947, 60618, 28949, 48064, 28950, 60619, 28952, 60642, 28953, 45498, 28954, 47065, 28966, 48569, 28975, 60620, 28976, 53734, 28977, 60621, 28982, 51387, 28997, 60625, 29002, 60627, 29004, 48077, 29006, 48357, 29020, 60623, 29022, 51639, 29028, 50106, 29030, 60643, 29031, 54741, 29032, 60624, 29038, 55027, 29042, 60626, 29043, 60622, 29048, 60628, 29050, 60629, 29053, 51647, 29060, 53160, 29066, 53468, 29071, 53676, 29076, 51419, 29080, 60630, 29081, 52981, 29087, 51948, 29088, 60634, 29096, 60633, 29100, 45246, 29107, 60631, 29109, 60632, 29113, 60644, 29123, 51388, 29134, 49607, 29140, 60636, 29141, 53728, 29152, 60635, 29157, 54511, 29159, 60637, 29166, 56262, 29177, 60638, 29190, 45484, 29213, 60639, 29224, 60640, 29226, 55206, 29228, 50624, 29232, 60348, 29233, 45230, 29237, 48884, 29238, 47288, 29239, 53935, 29240, 45270, 29241, 46585, 29243, 55475, 29245, 52140, 29247, 58333, 29255, 50860, 29256, 45286, 29260, 50630, 29261, 60345, 29266, 60346, 29270, 60347, 29273, 53696, 29275, 50595, 29277, 60146, 29279, 50354, 29281, 50357, 29282, 49358, 29286, 60147, 29287, 50369, 29289, 52975, 29294, 60144, 29295, 60148, 29298, 51708, 29301, 51107, 29305, 52440, 29306, 52990, 29310, 60149, 29311, 60150, 29312, 53164, 29313, 49383, 29316, 60151, 29322, 46783, 29323, 60152, 29325, 60153, 29327, 60154, 29330, 60155, 29343, 60145, 29356, 51374, 29357, 57835, 29359, 47032, 29360, 57836, 29364, 57837, 29366, 55220, 29367, 57838, 29368, 57839, 29369, 54220, 29377, 57841, 29378, 49137, 29379, 57840, 29380, 46546, 29384, 45495, 29389, 57843, 29390, 57842, 29392, 47868, 29394, 57844, 29399, 47543, 29401, 48849, 29406, 50428, 29408, 47837, 29409, 48582, 29416, 57845, 29417, 57847, 29420, 46784, 29421, 53185, 29422, 51880, 29423, 57846, 29424, 54776, 29425, 54268, 29426, 57848, 29427, 57852, 29428, 57849, 29431, 57850, 29432, 49386, 29434, 57854, 29435, 58017, 29436, 49351, 29441, 57851, 29443, 57853, 29450, 58021, 29454, 49620, 29459, 58019, 29461, 58024, 29462, 45822, 29463, 58018, 29467, 50125, 29468, 45762, 29469, 58023, 29470, 58022, 29473, 58020, 29474, 58025, 29477, 58027, 29481, 53449, 29482, 55021, 29483, 50088, 29484, 58028, 29486, 53207, 29489, 58030, 29492, 47855, 29495, 59872, 29496, 58029, 29497, 58026, 29502, 48043, 29503, 54451, 29517, 58032, 29520, 58031, 29522, 59873, 29527, 58033, 29536, 58034, 29548, 58035, 29549, 52385, 29551, 58036, 29566, 58037, 29572, 53502, 29575, 49866, 29577, 54257, 29579, 52725, 29582, 59360, 29585, 59361, 29590, 48833, 29595, 49898, 29599, 59364, 29602, 59363, 29609, 52710, 29611, 50101, 29614, 59362, 29615, 48055, 29616, 53206, 29618, 49633, 29619, 59369, 29623, 59368, 29626, 59380, 29627, 45731, 29632, 59370, 29634, 59366, 29640, 59372, 29641, 59371, 29642, 51642, 29645, 54756, 29647, 59365, 29648, 47017, 29649, 59367, 29657, 59374, 29662, 59379, 29664, 55017, 29669, 59373, 29671, 59378, 29673, 59377, 29677, 45280, 29682, 59381, 29699, 51186, 29701, 49349, 29702, 49389, 29705, 49648, 29706, 59376, 29711, 59382, 29712, 52214, 29722, 59554, 29723, 59553, 29730, 55233, 29733, 59386, 29734, 59385, 29736, 59387, 29738, 59383, 29740, 59390, 29742, 59389, 29744, 59388, 29747, 49621, 29748, 51161, 29749, 50685, 29750, 50627, 29756, 51181, 29761, 59555, 29781, 59558, 29783, 59557, 29785, 59559, 29786, 47863, 29787, 59384, 29788, 59556, 29790, 51440, 29791, 51626, 29805, 59561, 29808, 47589, 29814, 53758, 29815, 59560, 29822, 59562, 29824, 59565, 29825, 59566, 29827, 49575, 29831, 59567, 29835, 59568, 29838, 59564, 29840, 59572, 29852, 59563, 29854, 59569, 29863, 59573, 29864, 59570, 29865, 59571, 29882, 59575, 29906, 59574, 29916, 47567, 29918, 61612, 29920, 61613, 29922, 50864, 29923, 45290, 29924, 51391, 29926, 52703, 29934, 52941, 29935, 60081, 29940, 60082, 29942, 50879, 29943, 46281, 29951, 60083, 29956, 54759, 29965, 56825, 29967, 60084, 29969, 60085, 29971, 60086, 29976, 47306, 29977, 57264, 29978, 51701, 29980, 52464, 29983, 51706, 29989, 51707, 29992, 54211, 29993, 52134, 29995, 47270, 29996, 61614, 29997, 45506, 29999, 58808, 3e4, 52463, 30001, 54217, 30002, 48343, 30003, 51690, 30005, 46567, 30007, 50384, 30008, 46569, 30010, 61102, 30011, 48045, 30014, 59358, 30016, 61103, 30021, 45993, 30024, 61106, 30027, 61105, 30028, 48615, 30030, 61104, 30031, 52919, 30036, 50639, 30041, 49652, 30042, 56270, 30043, 61107, 30044, 53491, 30053, 49876, 30054, 50920, 30058, 47020, 30066, 61108, 30068, 46059, 30072, 48123, 30073, 61109, 30079, 59356, 30083, 61110, 30086, 48558, 30091, 61922, 30095, 51944, 30097, 53961, 30098, 61658, 30100, 61659, 30102, 61660, 30103, 49606, 30105, 47341, 30106, 48846, 30109, 61662, 30111, 50609, 30112, 61661, 30113, 53745, 30115, 61664, 30116, 45260, 30117, 48618, 30123, 53983, 30124, 61663, 30126, 46255, 30127, 47080, 30128, 61670, 30129, 61669, 30130, 50851, 30131, 61665, 30132, 61666, 30133, 46275, 30136, 61667, 30137, 54766, 30140, 52443, 30141, 48850, 30142, 48306, 30146, 61672, 30147, 61671, 30148, 61668, 30149, 45729, 30151, 54946, 30152, 54200, 30153, 48823, 30154, 51372, 30157, 61674, 30162, 53751, 30164, 54988, 30165, 47835, 30166, 61673, 30168, 46779, 30171, 52660, 30174, 50854, 30178, 49569, 30179, 61675, 30180, 61678, 30182, 61677, 30183, 61680, 30184, 61676, 30186, 48062, 30187, 61679, 30192, 52405, 30193, 61682, 30196, 46037, 30201, 45524, 30204, 61683, 30207, 61684, 30208, 61686, 30209, 46305, 30211, 61681, 30213, 61687, 30218, 61690, 30220, 61688, 30224, 61685, 30229, 61693, 30231, 61689, 30232, 61692, 30233, 61694, 30235, 61857, 30239, 52929, 30240, 61860, 30242, 61859, 30244, 49654, 30245, 61691, 30246, 51933, 30249, 46321, 30250, 45553, 30251, 52401, 30253, 61862, 30256, 61863, 30259, 61868, 30260, 54734, 30261, 61865, 30264, 51379, 30268, 61858, 30270, 61867, 30271, 61864, 30272, 61861, 30275, 61866, 30284, 45225, 30285, 61869, 30292, 61871, 30294, 61873, 30300, 61872, 30302, 61870, 30307, 53666, 30315, 61874, 30319, 61875, 30328, 47599, 30331, 46535, 30333, 45271, 30334, 45273, 30338, 54509, 30340, 46532, 30342, 48596, 30343, 48074, 30344, 61607, 30347, 47326, 30350, 61608, 30353, 45224, 30355, 61609, 30358, 52718, 30361, 61610, 30372, 61611, 30382, 50852, 30385, 55013, 30386, 61924, 30388, 61925, 30399, 50163, 30402, 54235, 30405, 54993, 30406, 50664, 30408, 54191, 30410, 53990, 30413, 61121, 30414, 45243, 30415, 54709, 30416, 53710, 30417, 48352, 30418, 47824, 30420, 49144, 30422, 47303, 30423, 46529, 30424, 50636, 30427, 51874, 30431, 50123, 30437, 61122, 30446, 50367, 30447, 46754, 30449, 60908, 30450, 50084, 30452, 54961, 30456, 53216, 30457, 60911, 30460, 50638, 30462, 46812, 30465, 51873, 30468, 60909, 30471, 60912, 30472, 60913, 30473, 50108, 30475, 49076, 30477, 60910, 30489, 60916, 30490, 60914, 30495, 54758, 30496, 50143, 30498, 60915, 30502, 60918, 30504, 54691, 30505, 53667, 30509, 60917, 30511, 50128, 30517, 60919, 30518, 49140, 30519, 48876, 30520, 60920, 30522, 52471, 30524, 53723, 30528, 55237, 30529, 54774, 30531, 60924, 30535, 60923, 30544, 60921, 30545, 60922, 30554, 60925, 30555, 48806, 30561, 52143, 30562, 61089, 30563, 46781, 30565, 61090, 30566, 50368, 30568, 60926, 30571, 48606, 30572, 45767, 30585, 46787, 30589, 61093, 30590, 55482, 30591, 61091, 30592, 61094, 30596, 50153, 30597, 46066, 30604, 61095, 30605, 61092, 30606, 53177, 30609, 61096, 30610, 49911, 30623, 61097, 30624, 61098, 30626, 57003, 30629, 50867, 30631, 51142, 30633, 55029, 30634, 46537, 30636, 52146, 30640, 61099, 30643, 52651, 30645, 61100, 30651, 54704, 30653, 61101, 30655, 63172, 30669, 56263, 30679, 46243, 30683, 50092, 30684, 61926, 30690, 51896, 30691, 53971, 30693, 54954, 30695, 61426, 30697, 48856, 30699, 48579, 30700, 61427, 30701, 46796, 30702, 45227, 30707, 51887, 30710, 60854, 30712, 60855, 30717, 52985, 30718, 47023, 30719, 49139, 30720, 60856, 30721, 49899, 30722, 51632, 30729, 60857, 30732, 50934, 30733, 49075, 30737, 60860, 30738, 50680, 30740, 53712, 30742, 55209, 30743, 60858, 30744, 60859, 30746, 53730, 30748, 60863, 30749, 60864, 30751, 60868, 30755, 60872, 30757, 60870, 30758, 60878, 30759, 54760, 30761, 60873, 30764, 60871, 30765, 60862, 30768, 50665, 30772, 50886, 30775, 51689, 30776, 54482, 30777, 60865, 30778, 60866, 30779, 60867, 30780, 60869, 30782, 49401, 30784, 46241, 30789, 47592, 30791, 60880, 30796, 60881, 30798, 60874, 30800, 60879, 30802, 52984, 30805, 52150, 30806, 60876, 30807, 60877, 30813, 53237, 30826, 60882, 30827, 49650, 30828, 54194, 30829, 60875, 30830, 51383, 30839, 48367, 30844, 50672, 30855, 60886, 30857, 46575, 30860, 49845, 30861, 45229, 30862, 52201, 30865, 45486, 30867, 60884, 30871, 52715, 30872, 46562, 30874, 60885, 30875, 60883, 30876, 60887, 30879, 46586, 30881, 60888, 30883, 60889, 30885, 60892, 30887, 45516, 30896, 50678, 30897, 48366, 30898, 60890, 30899, 52412, 30900, 45802, 30905, 60891, 30910, 50411, 30913, 46277, 30917, 45301, 30921, 60895, 30922, 49370, 30923, 46312, 30928, 50637, 30932, 60893, 30933, 49092, 30937, 60894, 30952, 50341, 30956, 60896, 30962, 60897, 30964, 60899, 30967, 49623, 30970, 48071, 30977, 48568, 30981, 60898, 30995, 60900, 31006, 60902, 31012, 60901, 31028, 60903, 31034, 51902, 31035, 60650, 31036, 49393, 31038, 51687, 31040, 60651, 31041, 50926, 31046, 60652, 31048, 50925, 31049, 60653, 31059, 60656, 31062, 55270, 31063, 60659, 31066, 60657, 31067, 60654, 31068, 60655, 31069, 55203, 31070, 51697, 31071, 52206, 31072, 60660, 31074, 60658, 31077, 53225, 31079, 60662, 31080, 50865, 31085, 48320, 31087, 60661, 31095, 46523, 31096, 48118, 31098, 60663, 31104, 55799, 31105, 48635, 31108, 49851, 31109, 60664, 31114, 60665, 31119, 47267, 31130, 60666, 31143, 60667, 31155, 60668, 31161, 54253, 31162, 55470, 31163, 49387, 31165, 51165, 31166, 47820, 31168, 53475, 31169, 52157, 31171, 52666, 31174, 47313, 31177, 45564, 31179, 51183, 31181, 54998, 31185, 49094, 31186, 50155, 31189, 61429, 31192, 50136, 31199, 55266, 31203, 61431, 31204, 46035, 31206, 51160, 31207, 53741, 31209, 54984, 31211, 61432, 31213, 61430, 31215, 48125, 31216, 46022, 31224, 48597, 31227, 53958, 31229, 48096, 31232, 53153, 31234, 61436, 31235, 61435, 31238, 61433, 31243, 46028, 31245, 51668, 31246, 52144, 31252, 61438, 31255, 45278, 31258, 54985, 31262, 61437, 31264, 46061, 31267, 63189, 31283, 52936, 31287, 61602, 31289, 61601, 31291, 46526, 31292, 48346, 31293, 48124, 31295, 47333, 31302, 50370, 31313, 61603, 31319, 52203, 31344, 61606, 31348, 53672, 31350, 48831, 31351, 51182, 31352, 61878, 31353, 61879, 31354, 49109, 31359, 46249, 31360, 61880, 31361, 52667, 31363, 51156, 31364, 54701, 31366, 61881, 31368, 61882, 31373, 51151, 31377, 53924, 31378, 54991, 31381, 61883, 31382, 48593, 31383, 46256, 31384, 48829, 31388, 46300, 31389, 52945, 31391, 49119, 31392, 61885, 31397, 49146, 31398, 61884, 31400, 61887, 31404, 61886, 31405, 61888, 31411, 61889, 31423, 49662, 31435, 49570, 31446, 51962, 31449, 54718, 31454, 48826, 31455, 48825, 31456, 54722, 31459, 49058, 31461, 52655, 31462, 61877, 31469, 48607, 31471, 46795, 31481, 55025, 31482, 62403, 31485, 62404, 31487, 47309, 31491, 62406, 31492, 62407, 31494, 45258, 31496, 62405, 31498, 62409, 31499, 52209, 31503, 62411, 31505, 53414, 31508, 45514, 31509, 62408, 31513, 62415, 31515, 46545, 31518, 62423, 31520, 62418, 31524, 62420, 31525, 62419, 31526, 47099, 31528, 45503, 31530, 62414, 31531, 62410, 31532, 46554, 31534, 62416, 31537, 62417, 31539, 62421, 31544, 62413, 31546, 48355, 31548, 49661, 31550, 62422, 31557, 62426, 31559, 62412, 31561, 46536, 31563, 48622, 31564, 62428, 31567, 47012, 31568, 49136, 31569, 55038, 31570, 52658, 31572, 46320, 31574, 45791, 31576, 62424, 31578, 62425, 31579, 51640, 31581, 62429, 31584, 62430, 31586, 62433, 31598, 62431, 31601, 62435, 31602, 62434, 31605, 62427, 31607, 49130, 31609, 46063, 31611, 62432, 31614, 51113, 31616, 48370, 31621, 62443, 31629, 47551, 31632, 62436, 31636, 45741, 31637, 48126, 31639, 52195, 31644, 62445, 31645, 62441, 31649, 47580, 31650, 62446, 31654, 62437, 31655, 62438, 31656, 62442, 31657, 49889, 31658, 62444, 31659, 62447, 31660, 62440, 31661, 48381, 31665, 53220, 31668, 62448, 31672, 62439, 31681, 62450, 31686, 55213, 31687, 50858, 31692, 62451, 31697, 62449, 31699, 49832, 31705, 47325, 31706, 62453, 31709, 62452, 31713, 46299, 31717, 62454, 31718, 62455, 31722, 62456, 31726, 49338, 31729, 49385, 31735, 50673, 31740, 62459, 31742, 62458, 31751, 46296, 31755, 62462, 31756, 62457, 31759, 62460, 31766, 62461, 31775, 62625, 31782, 62627, 31783, 48073, 31786, 62626, 31800, 62628, 31807, 45758, 31808, 62630, 31809, 62629, 31821, 48302, 31859, 50135, 31860, 55777, 31867, 49376, 31868, 62668, 31869, 55249, 31881, 47067, 31889, 62670, 31890, 49571, 31893, 50889, 31895, 46294, 31896, 54707, 31900, 62672, 31901, 62671, 31902, 62673, 31903, 52186, 31906, 62674, 31908, 54465, 31909, 55008, 31914, 47072, 31918, 49592, 31921, 49595, 31922, 62675, 31923, 48812, 31929, 46306, 31932, 62676, 31933, 62677, 31934, 48811, 31937, 62678, 31941, 62683, 31943, 62679, 31944, 62682, 31946, 47869, 31948, 62680, 31949, 62681, 31957, 47330, 31958, 52423, 31959, 62684, 31961, 45786, 31964, 50131, 31967, 54499, 31968, 49079, 31976, 62685, 31983, 50612, 31992, 62697, 31995, 53173, 32010, 52937, 32032, 52184, 32034, 52215, 32039, 48628, 32043, 55247, 32047, 49371, 32110, 53493, 32119, 62698, 32166, 62699, 32174, 62700, 32315, 63459, 32321, 47025, 32327, 62701, 32386, 55275, 32411, 62702, 32415, 59129, 32416, 48832, 32417, 59130, 32418, 47852, 32419, 59131, 32420, 53195, 32421, 59132, 32422, 54460, 32423, 48310, 32424, 59133, 32425, 59134, 32426, 48333, 32427, 51410, 32428, 52915, 32429, 59297, 32431, 46271, 32432, 59298, 32433, 51636, 32434, 47321, 32435, 50377, 32437, 55261, 32438, 49882, 32439, 47063, 32440, 54973, 32441, 52934, 32442, 47044, 32445, 50598, 32446, 59299, 32447, 53215, 32448, 59300, 32449, 59301, 32450, 59302, 32451, 49591, 32452, 55273, 32453, 51696, 32454, 53176, 32455, 54959, 32456, 54997, 32457, 59303, 32458, 45293, 32459, 59304, 32460, 59305, 32461, 51676, 32462, 53999, 32463, 48813, 32464, 59306, 32465, 45299, 32466, 51422, 32467, 48609, 32468, 59307, 32469, 51398, 32471, 59308, 32472, 48102, 32473, 47352, 32474, 53668, 32475, 59309, 32476, 49895, 32477, 48888, 32478, 48586, 32479, 52659, 32480, 59310, 32481, 59311, 32482, 48878, 32483, 53477, 32485, 52199, 32486, 52432, 32487, 48332, 32488, 59312, 32489, 48296, 32490, 53495, 32491, 59313, 32493, 53496, 32494, 59314, 32495, 59315, 32496, 46274, 32497, 59316, 32498, 59317, 32499, 51710, 32500, 52908, 32501, 50144, 32502, 59319, 32503, 45505, 32504, 46065, 32506, 59320, 32507, 59321, 32508, 55259, 32509, 54720, 32510, 59322, 32511, 49868, 32512, 55226, 32513, 59323, 32514, 59324, 32515, 59325, 32516, 48362, 32517, 50149, 32518, 49346, 32519, 59326, 32520, 59327, 32521, 48297, 32523, 59328, 32524, 59329, 32525, 59318, 32526, 46800, 32527, 59330, 32529, 59331, 32530, 59332, 32531, 48058, 32532, 46558, 32533, 49862, 32534, 45536, 32535, 59333, 32536, 54453, 32537, 59334, 32538, 47295, 32539, 59336, 32540, 59335, 32541, 47084, 32543, 59337, 32544, 45816, 32545, 59338, 32546, 59339, 32547, 59340, 32548, 59341, 32549, 59342, 32550, 59343, 32551, 59344, 32552, 54183, 32553, 52213, 32554, 59345, 32555, 59346, 32556, 59347, 32557, 59348, 32558, 51657, 32559, 59349, 32560, 59350, 32561, 59351, 32562, 59352, 32563, 59353, 32564, 48585, 32565, 59354, 32566, 62398, 32568, 47319, 32570, 51377, 32578, 62399, 32580, 62400, 32581, 62401, 32592, 47582, 32593, 52728, 32596, 55528, 32597, 47793, 32599, 49886, 32600, 61111, 32602, 47011, 32607, 61113, 32609, 61112, 32610, 45269, 32616, 61115, 32617, 54742, 32618, 55279, 32622, 54979, 32625, 61117, 32626, 51952, 32628, 61116, 32633, 61118, 32638, 61120, 32641, 61119, 32650, 53746, 32652, 51132, 32654, 50112, 32660, 47329, 32666, 49639, 32669, 62662, 32670, 53471, 32671, 62663, 32673, 53211, 32676, 51386, 32679, 62664, 32687, 62665, 32688, 62666, 32690, 62667, 32696, 55802, 32697, 47358, 32700, 58865, 32701, 54256, 32703, 62688, 32705, 52940, 32709, 46049, 32714, 61876, 32716, 53998, 32718, 62689, 32724, 53224, 32725, 62690, 32728, 51148, 32735, 46548, 32736, 46308, 32737, 62692, 32741, 62691, 32742, 62693, 32745, 62694, 32750, 62695, 32752, 47794, 32753, 45247, 32755, 62696, 32763, 47021, 32764, 53997, 32768, 53931, 32769, 49359, 32771, 49084, 32772, 60323, 32773, 54751, 32774, 60104, 32779, 61939, 32780, 46840, 32781, 52131, 32784, 50381, 32786, 61927, 32788, 61928, 32789, 47355, 32790, 61929, 32791, 47812, 32792, 54469, 32793, 45266, 32796, 61930, 32800, 61931, 32802, 61932, 32805, 61933, 32806, 61934, 32807, 61935, 32808, 61937, 32809, 61936, 32810, 50645, 32817, 61938, 32819, 46842, 32821, 61940, 32822, 53934, 32823, 57031, 32824, 52170, 32827, 46044, 32829, 46498, 32831, 47522, 32834, 50420, 32835, 61941, 32838, 61942, 32842, 49604, 32843, 49659, 32844, 54960, 32845, 61943, 32850, 61944, 32852, 49578, 32856, 50872, 32858, 48859, 32873, 61945, 32874, 46287, 32881, 61946, 32895, 60850, 32896, 60849, 32899, 52192, 32900, 53982, 32902, 52161, 32903, 54744, 32905, 51426, 32907, 49375, 32908, 48289, 32915, 60353, 32918, 53412, 32920, 55010, 32922, 46791, 32923, 47320, 32924, 60352, 32925, 47310, 32927, 60351, 32928, 45990, 32929, 47561, 32930, 54955, 32932, 47092, 32933, 47050, 32937, 48359, 32938, 47038, 32939, 60358, 32941, 60359, 32942, 45241, 32943, 49103, 32945, 60357, 32946, 54269, 32948, 60360, 32951, 60361, 32954, 47054, 32956, 60354, 32957, 60356, 32958, 51702, 32959, 54999, 32960, 54733, 32961, 53426, 32962, 60367, 32963, 52920, 32964, 60368, 32966, 46504, 32972, 45491, 32973, 60370, 32974, 52389, 32982, 50646, 32983, 60371, 32985, 60369, 32986, 50655, 32987, 60366, 32988, 51876, 32989, 60373, 32990, 45307, 32993, 47866, 32996, 55479, 32997, 61923, 32999, 60362, 33e3, 60363, 33001, 60364, 33002, 60365, 33003, 60374, 33004, 59072, 33005, 60377, 33007, 49128, 33008, 53960, 33009, 60375, 33010, 60380, 33011, 47340, 33012, 60376, 33014, 48570, 33016, 53464, 33018, 45239, 33020, 60381, 33021, 50396, 33026, 54956, 33030, 46304, 33033, 49910, 33034, 48313, 33037, 60378, 33038, 60379, 33039, 54496, 33040, 50922, 33041, 50388, 33042, 60383, 33043, 50599, 33044, 55797, 33046, 45745, 33048, 60388, 33050, 48581, 33054, 60386, 33068, 60387, 33071, 47276, 33073, 52689, 33074, 60389, 33078, 60385, 33080, 49587, 33086, 50850, 33094, 52467, 33096, 60390, 33098, 49328, 33099, 53944, 33100, 60391, 33104, 47279, 33105, 47277, 33107, 60392, 33108, 51131, 33109, 52723, 33113, 60394, 33114, 60395, 33120, 60397, 33125, 53448, 33127, 60402, 33129, 60398, 33133, 60401, 33134, 51449, 33136, 53756, 33137, 60396, 33140, 60393, 33145, 47289, 33146, 53209, 33147, 50405, 33148, 60399, 33149, 60400, 33150, 52442, 33151, 52680, 33152, 45298, 33154, 60406, 33160, 60405, 33162, 45746, 33167, 47328, 33169, 60407, 33176, 45548, 33179, 52421, 33180, 50340, 33181, 53157, 33187, 60409, 33190, 60578, 33192, 50674, 33194, 60410, 33203, 51653, 33210, 58079, 33211, 60414, 33216, 52686, 33217, 60577, 33218, 45531, 33219, 54199, 33222, 53980, 33226, 60413, 33228, 60411, 33251, 46012, 33255, 60080, 33258, 55252, 33260, 62635, 33261, 46068, 33267, 54977, 33268, 54978, 33275, 54761, 33276, 48842, 33278, 62631, 33280, 53928, 33281, 62632, 33282, 62633, 33284, 62634, 33285, 48843, 33286, 54239, 33292, 51680, 33293, 51681, 33296, 62402, 33298, 51942, 33300, 52466, 33307, 58038, 33308, 52148, 33310, 52968, 33311, 55003, 33313, 62637, 33314, 62638, 33315, 62639, 33320, 62642, 33322, 47805, 33323, 62643, 33324, 45283, 33325, 62640, 33327, 62641, 33328, 48546, 33329, 45781, 33331, 62646, 33332, 62647, 33333, 46822, 33334, 45744, 33335, 53199, 33336, 62644, 33337, 46252, 33339, 62645, 33342, 62648, 33348, 62649, 33351, 52647, 33353, 62650, 33355, 62651, 33359, 62652, 33368, 52178, 33370, 62653, 33375, 62654, 33384, 62655, 33390, 62686, 33391, 49596, 33392, 48360, 33394, 51627, 33395, 53726, 33396, 58869, 33401, 56499, 33402, 53973, 33405, 56500, 33406, 45228, 33407, 56501, 33410, 48602, 33412, 56505, 33416, 55490, 33418, 56503, 33419, 54259, 33421, 51670, 33422, 56506, 33423, 56502, 33425, 56507, 33426, 50082, 33431, 56508, 33432, 56517, 33433, 56509, 33436, 52959, 33437, 54949, 33439, 56527, 33441, 56525, 33444, 56530, 33445, 48614, 33446, 49835, 33448, 56504, 33449, 56523, 33450, 56526, 33451, 56510, 33452, 47058, 33453, 45253, 33454, 56519, 33455, 53438, 33456, 56513, 33457, 48040, 33459, 47036, 33460, 56524, 33463, 56518, 33464, 56511, 33465, 51163, 33469, 53695, 33470, 56512, 33473, 56522, 33476, 56528, 33479, 52909, 33480, 56514, 33482, 56515, 33483, 56520, 33484, 56521, 33485, 45780, 33486, 56529, 33487, 52181, 33489, 54455, 33490, 56539, 33491, 56543, 33492, 52390, 33493, 56550, 33495, 50151, 33496, 56540, 33499, 49089, 33500, 56537, 33502, 45306, 33503, 47542, 33504, 56549, 33505, 56531, 33507, 56516, 33508, 56534, 33509, 51444, 33510, 49120, 33515, 51643, 33519, 45501, 33521, 54178, 33524, 56538, 33527, 56533, 33529, 50875, 33531, 56542, 33537, 55234, 33538, 50095, 33539, 47030, 33540, 51153, 33541, 50089, 33542, 56546, 33543, 56536, 33544, 56555, 33545, 56532, 33548, 56541, 33550, 48805, 33551, 56535, 33553, 56544, 33556, 56547, 33557, 56548, 33559, 56568, 33562, 56545, 33563, 56738, 33564, 56551, 33575, 48363, 33576, 46276, 33579, 50083, 33580, 45799, 33581, 56570, 33583, 56562, 33585, 56559, 33587, 56572, 33588, 56558, 33589, 54e3, 33590, 45800, 33592, 51415, 33593, 51427, 33594, 56571, 33596, 56557, 33600, 56567, 33603, 56565, 33606, 48803, 33607, 56564, 33609, 45789, 33615, 56563, 33616, 48374, 33617, 56552, 33618, 48068, 33620, 49395, 33626, 48340, 33627, 56553, 33628, 56554, 33630, 56561, 33631, 56566, 33632, 56569, 33633, 46516, 33635, 51417, 33636, 48103, 33637, 56574, 33638, 56573, 33639, 54187, 33640, 56737, 33641, 56739, 33642, 56741, 33643, 54001, 33644, 56740, 33645, 56742, 33646, 56743, 33647, 53929, 33655, 47817, 33656, 56745, 33659, 56758, 33660, 56753, 33661, 56756, 33669, 56752, 33670, 50894, 33673, 49394, 33678, 51631, 33682, 56556, 33683, 56750, 33688, 56759, 33691, 56560, 33692, 56751, 33694, 56760, 33696, 56748, 33704, 56761, 33705, 56755, 33706, 56749, 33707, 50346, 33712, 56744, 33713, 49331, 33714, 49579, 33715, 56746, 33716, 56747, 33718, 56754, 33719, 48113, 33720, 56757, 33721, 54184, 33722, 56762, 33724, 56763, 33725, 50087, 33728, 56786, 33729, 56764, 33733, 56785, 33735, 47549, 33738, 48853, 33740, 48890, 33743, 47818, 33748, 56778, 33750, 56773, 33752, 56767, 33756, 45771, 33757, 56771, 33759, 56779, 33760, 45732, 33761, 56789, 33765, 56766, 33769, 50896, 33770, 56784, 33776, 56788, 33777, 49634, 33778, 47046, 33784, 56782, 33785, 56783, 33789, 56772, 33793, 56765, 33795, 56781, 33796, 52433, 33798, 56777, 33803, 56770, 33804, 50120, 33805, 50876, 33806, 52910, 33807, 56780, 33809, 56776, 33816, 56769, 33820, 56774, 33821, 49884, 33828, 54185, 33829, 54186, 33830, 56787, 33831, 53236, 33832, 51448, 33841, 56806, 33848, 56775, 33852, 56800, 33853, 49892, 33862, 56801, 33873, 56791, 33879, 55032, 33881, 56793, 33882, 56792, 33883, 47344, 33884, 56790, 33889, 50895, 33891, 46765, 33897, 56802, 33899, 47865, 33900, 54497, 33901, 56807, 33905, 46288, 33907, 56794, 33909, 49147, 33910, 56803, 33912, 56799, 33914, 56797, 33922, 46553, 33927, 56795, 33928, 56796, 33929, 56798, 33931, 48559, 33932, 56804, 33934, 56805, 33943, 56821, 33945, 50121, 33948, 52194, 33953, 56818, 33967, 55521, 33970, 50897, 33972, 56820, 33976, 54772, 33977, 56819, 33978, 56816, 33981, 56812, 33983, 56815, 33985, 56808, 33988, 53486, 33993, 51416, 33994, 56814, 33997, 56809, 34e3, 56810, 34001, 52210, 34003, 56813, 34006, 45517, 34013, 49334, 34015, 48315, 34016, 56817, 34019, 56823, 34021, 56822, 34022, 56811, 34028, 50670, 34032, 56827, 34044, 56996, 34047, 56995, 34060, 56824, 34065, 50159, 34067, 49915, 34071, 54753, 34074, 52917, 34079, 56829, 34081, 45772, 34091, 50408, 34092, 51935, 34103, 51134, 34104, 56826, 34105, 56828, 34106, 56830, 34107, 56994, 34108, 45226, 34109, 45518, 34115, 57004, 34120, 56998, 34121, 48566, 34122, 51439, 34134, 56993, 34137, 56997, 34142, 57001, 34148, 57e3, 34152, 56999, 34162, 57005, 34164, 54476, 34169, 57011, 34170, 57002, 34171, 57006, 34174, 49369, 34180, 45473, 34181, 57014, 34183, 57009, 34191, 57010, 34203, 53670, 34204, 57013, 34212, 57007, 34216, 57008, 34218, 53437, 34222, 57012, 34223, 51949, 34224, 57017, 34231, 57016, 34233, 57015, 34241, 57019, 34249, 48613, 34255, 45784, 34256, 50154, 34259, 57018, 34261, 50618, 34268, 57020, 34276, 52441, 34281, 47018, 34299, 54501, 34303, 57021, 34309, 57023, 34321, 50338, 34326, 57025, 34343, 57022, 34345, 57024, 34360, 54714, 34364, 57026, 34381, 62126, 34382, 48034, 34383, 49842, 34384, 50608, 34385, 49863, 34388, 62127, 34394, 53481, 34398, 54237, 34402, 60349, 34411, 46054, 34412, 62128, 34414, 62129, 34417, 51885, 34425, 47847, 34426, 62131, 34427, 62133, 34428, 62132, 34429, 52196, 34430, 53178, 34431, 62130, 34432, 51892, 34433, 53967, 34434, 49900, 34442, 52931, 34443, 62136, 34444, 45302, 34445, 62135, 34451, 62142, 34453, 45775, 34460, 53697, 34461, 62138, 34467, 62140, 34468, 54505, 34471, 62139, 34472, 62134, 34473, 62143, 34474, 62141, 34476, 62137, 34479, 62151, 34480, 62148, 34481, 62150, 34484, 62154, 34485, 62146, 34486, 62144, 34490, 62149, 34496, 55035, 34500, 62145, 34502, 51193, 34503, 51679, 34505, 62152, 34506, 47558, 34507, 46512, 34510, 62147, 34511, 62153, 34512, 62160, 34513, 62166, 34516, 48087, 34520, 62165, 34521, 52700, 34523, 55019, 34526, 62162, 34527, 62164, 34532, 47346, 34537, 62155, 34541, 62158, 34542, 49913, 34544, 54749, 34545, 62156, 34546, 62157, 34547, 62159, 34548, 62163, 34552, 62169, 34553, 54204, 34558, 46826, 34560, 51953, 34562, 47076, 34563, 62167, 34567, 62168, 34568, 62170, 34569, 62173, 34570, 62171, 34573, 62172, 34578, 53713, 34579, 62161, 34581, 52681, 34583, 52943, 34584, 54953, 34586, 62179, 34588, 50139, 34590, 62176, 34593, 49327, 34594, 62188, 34595, 62174, 34597, 62177, 34601, 62184, 34606, 62178, 34609, 62183, 34612, 62182, 34615, 62185, 34619, 62175, 34622, 62180, 34623, 62186, 34631, 54188, 34632, 62181, 34633, 45813, 34636, 62194, 34638, 53419, 34643, 62197, 34647, 48072, 34649, 62201, 34656, 62192, 34659, 62198, 34660, 62200, 34661, 62202, 34670, 62195, 34672, 62193, 34676, 47867, 34678, 46587, 34683, 62191, 34684, 62199, 34685, 62189, 34686, 62190, 34690, 62187, 34691, 62374, 34693, 62371, 34696, 62370, 34699, 62196, 34701, 51418, 34707, 62203, 34711, 62373, 34719, 50168, 34728, 62205, 34731, 62375, 34732, 62377, 34733, 62372, 34735, 62204, 34739, 62379, 34741, 62378, 34746, 49885, 34749, 62382, 34752, 62384, 34758, 62369, 34762, 62385, 34763, 62380, 34769, 62383, 34770, 62206, 34771, 62381, 34779, 62386, 34784, 62388, 34789, 62376, 34794, 62387, 34798, 62389, 34809, 53431, 34814, 62392, 34819, 55801, 34826, 62393, 34835, 62391, 34837, 51428, 34838, 62390, 34843, 62394, 34849, 62395, 34850, 46272, 34866, 61123, 34873, 62396, 34876, 62397, 34880, 53674, 34884, 62636, 34885, 53446, 34892, 53456, 34893, 53724, 34900, 53198, 34903, 48598, 34905, 53699, 34913, 47842, 34914, 57833, 34915, 53954, 34916, 61890, 34917, 45753, 34920, 45549, 34921, 61891, 34923, 51648, 34924, 46020, 34926, 55794, 34928, 52133, 34930, 61892, 34935, 54996, 34941, 61893, 34942, 62656, 34943, 61894, 34945, 54444, 34946, 61895, 34948, 45248, 34949, 62657, 34952, 62658, 34955, 46332, 34957, 50651, 34962, 52411, 34966, 53476, 34972, 52704, 34978, 61896, 34980, 55795, 34987, 45499, 34989, 53166, 34993, 47268, 34999, 61898, 35004, 61899, 35009, 45763, 35010, 49617, 35013, 55216, 35014, 61897, 35017, 61900, 35022, 61902, 35026, 55798, 35028, 53985, 35029, 54435, 35032, 62659, 35033, 51385, 35039, 62660, 35042, 61901, 35043, 61903, 35044, 49123, 35045, 61904, 35048, 61908, 35056, 61910, 35057, 61905, 35059, 51665, 35060, 50657, 35064, 49891, 35065, 47612, 35068, 61907, 35070, 61909, 35074, 47571, 35082, 61915, 35088, 47830, 35090, 45309, 35091, 61913, 35097, 61912, 35098, 61906, 35099, 61914, 35105, 61911, 35109, 51436, 35114, 52682, 35115, 61917, 35120, 58813, 35124, 61916, 35126, 61918, 35137, 61919, 35140, 53221, 35166, 62661, 35167, 48627, 35174, 61920, 35195, 61921, 35199, 52983, 35201, 53930, 35203, 61947, 35206, 47282, 35265, 48379, 35266, 47579, 35268, 47590, 35269, 50137, 35270, 51923, 35271, 60136, 35272, 49344, 35273, 48885, 35274, 60137, 35275, 60138, 35276, 60139, 35278, 60140, 35279, 60141, 35280, 60142, 35281, 60143, 35282, 48583, 35286, 62971, 35290, 62973, 35292, 62974, 35294, 62972, 35299, 48610, 35301, 63137, 35302, 46245, 35307, 63138, 35311, 63139, 35315, 60594, 35328, 53716, 35335, 55786, 35390, 63140, 35400, 61114, 35449, 54706, 35465, 54270, 35466, 52444, 35475, 51908, 35591, 58816, 35622, 63141, 35686, 48815, 35692, 50857, 35744, 55973, 35745, 48326, 35746, 46761, 35747, 47292, 35748, 51407, 35749, 48293, 35750, 55974, 35751, 55975, 35752, 52438, 35753, 51395, 35754, 55976, 35755, 50941, 35757, 53685, 35758, 53993, 35759, 53686, 35760, 48327, 35762, 48562, 35763, 48100, 35764, 55977, 35765, 55978, 35766, 53704, 35767, 55979, 35768, 53485, 35769, 46831, 35770, 49883, 35772, 52175, 35773, 47085, 35774, 51688, 35775, 47043, 35776, 48887, 35777, 54948, 35778, 55980, 35779, 55981, 35780, 50880, 35781, 55271, 35782, 51894, 35784, 54697, 35785, 52191, 35786, 54767, 35787, 55982, 35788, 55007, 35789, 46282, 35790, 55984, 35791, 55983, 35793, 53995, 35794, 55985, 35795, 55986, 35796, 55987, 35797, 51924, 35798, 55988, 35799, 51883, 35800, 55989, 35801, 55990, 35802, 46031, 35803, 55023, 35804, 55991, 35805, 48048, 35806, 46510, 35807, 55992, 35808, 55993, 35809, 47598, 35810, 53679, 35811, 53992, 35812, 55994, 35813, 47299, 35814, 53226, 35815, 45807, 35816, 55995, 35817, 55996, 35819, 48619, 35820, 52956, 35821, 54255, 35822, 55997, 35823, 52979, 35824, 55998, 35825, 54229, 35826, 48101, 35827, 55999, 35828, 52149, 35829, 52176, 35830, 56e3, 35831, 51179, 35832, 55022, 35833, 56001, 35834, 50613, 35835, 46785, 35836, 56002, 35837, 47052, 35838, 49102, 35839, 56003, 35840, 56004, 35841, 52141, 35842, 56005, 35843, 46583, 35844, 56006, 35845, 49602, 35846, 55227, 35847, 56007, 35848, 52408, 35850, 53994, 35851, 50353, 35852, 56008, 35853, 46589, 35854, 48081, 35855, 56009, 35856, 53427, 35857, 56010, 35858, 56011, 35859, 52925, 35860, 56012, 35861, 56013, 35862, 56014, 35863, 45815, 35864, 56017, 35865, 56015, 35866, 53736, 35867, 56016, 35868, 50133, 35869, 56018, 35871, 56019, 35872, 56020, 35873, 56021, 35874, 53435, 35875, 53925, 35876, 45305, 35877, 56022, 35878, 51115, 35879, 56023, 35880, 48631, 35881, 50081, 35882, 56024, 35883, 56025, 35884, 50173, 35885, 52407, 35886, 56026, 35887, 56027, 35888, 49342, 35889, 50903, 35890, 56028, 35891, 56029, 35892, 51124, 35893, 56030, 35894, 56031, 35895, 47560, 35905, 48109, 35910, 46777, 35911, 62712, 35913, 62713, 35916, 52707, 35925, 62905, 35930, 60384, 35937, 53235, 35938, 48063, 35946, 47808, 35947, 54437, 35955, 57817, 35960, 62964, 35961, 45482, 35962, 45810, 35970, 62965, 35973, 62967, 35977, 47825, 35978, 62966, 35980, 50098, 35988, 62969, 35992, 62968, 36125, 45492, 36126, 54762, 36127, 47290, 36129, 47537, 36130, 45766, 36131, 54512, 36132, 53197, 36133, 45276, 36134, 54731, 36135, 48117, 36136, 54986, 36137, 47031, 36138, 52400, 36139, 50870, 36140, 45537, 36141, 47546, 36142, 55036, 36143, 47585, 36144, 47009, 36145, 48378, 36146, 60122, 36147, 60123, 36148, 52473, 36149, 47603, 36150, 60124, 36151, 46331, 36152, 50099, 36153, 47057, 36154, 47832, 36155, 60125, 36156, 54516, 36157, 60126, 36158, 48342, 36159, 48095, 36160, 60127, 36161, 49630, 36162, 49848, 36163, 54495, 36164, 55242, 36165, 60128, 36166, 60129, 36167, 60132, 36168, 60130, 36169, 60131, 36170, 51678, 36171, 47283, 36172, 46788, 36173, 60133, 36174, 51946, 36175, 51661, 36176, 46285, 36179, 58073, 36180, 50658, 36181, 60134, 36182, 49333, 36184, 55224, 36185, 60135, 36186, 55212, 36187, 51452, 36188, 55507, 36189, 55501, 36190, 54494, 36192, 54521, 36193, 51652, 36194, 54190, 36195, 47315, 36196, 46048, 36198, 51682, 36199, 62710, 36203, 47829, 36205, 62711, 36208, 55263, 36211, 62705, 36212, 47280, 36213, 54740, 36214, 47311, 36215, 50928, 36225, 46019, 36228, 62706, 36229, 45996, 36234, 54461, 36235, 51191, 36241, 62708, 36244, 62707, 36255, 52427, 36259, 51364, 36273, 62709, 36275, 55267, 36276, 50623, 36277, 62912, 36280, 62907, 36282, 62915, 36284, 62914, 36286, 54970, 36287, 62913, 36291, 54462, 36292, 62916, 36294, 62924, 36299, 45263, 36300, 46584, 36302, 62921, 36303, 62922, 36305, 50652, 36310, 62917, 36311, 62918, 36314, 62919, 36315, 62923, 36317, 48864, 36318, 62920, 36319, 47354, 36323, 62928, 36324, 62931, 36328, 49127, 36330, 47602, 36331, 62908, 36332, 62925, 36335, 49847, 36339, 52472, 36341, 48377, 36343, 62926, 36344, 62927, 36345, 62929, 36346, 46821, 36347, 62930, 36349, 62933, 36357, 62909, 36361, 62932, 36362, 54203, 36364, 46060, 36367, 52388, 36372, 62934, 36381, 62935, 36382, 48865, 36383, 62936, 36386, 52447, 36387, 62939, 36393, 45768, 36394, 55257, 36396, 62937, 36398, 62938, 36399, 62940, 36401, 62946, 36405, 62944, 36409, 62943, 36410, 62941, 36413, 62945, 36416, 62942, 36417, 62948, 36418, 62949, 36420, 52451, 36423, 58815, 36424, 46520, 36425, 62947, 36426, 62952, 36427, 52387, 36433, 62950, 36434, 62951, 36441, 62910, 36454, 45508, 36457, 62911, 36460, 46533, 36461, 45796, 36463, 62956, 36464, 62953, 36466, 46807, 36468, 62957, 36470, 62954, 36476, 62955, 36479, 46298, 36481, 54506, 36485, 62958, 36487, 46073, 36495, 62959, 36496, 62961, 36500, 62960, 36508, 62962, 36510, 62963, 36523, 51693, 36524, 47530, 36527, 51195, 36530, 46819, 36538, 52425, 36558, 60070, 36710, 46005, 36711, 54526, 36712, 47596, 36713, 53497, 36715, 59885, 36716, 55210, 36717, 59886, 36718, 49878, 36719, 51437, 36720, 47844, 36721, 59887, 36722, 59888, 36723, 59889, 36724, 55009, 36725, 59890, 36726, 59891, 36727, 59893, 36728, 59892, 36729, 59894, 36730, 59895, 36731, 51169, 36732, 59896, 36733, 54488, 36734, 59897, 36735, 48590, 36737, 59898, 36738, 59899, 36739, 48591, 36740, 59900, 36741, 47272, 36742, 49598, 36743, 59901, 36744, 45490, 36745, 48084, 36746, 47605, 36747, 59902, 36749, 60065, 36750, 60066, 36751, 60067, 36752, 47096, 36753, 48301, 36755, 51940, 36756, 57550, 36757, 54447, 36758, 53181, 36759, 54711, 36760, 60068, 36761, 54750, 36762, 60069, 36763, 53441, 36764, 47548, 36766, 46279, 36767, 45529, 36771, 49329, 36776, 45542, 36777, 45543, 36779, 45544, 36784, 46013, 36785, 51432, 36790, 58817, 36793, 45535, 36797, 49609, 36798, 46319, 36801, 51112, 36802, 54232, 36804, 50937, 36805, 53688, 36807, 47613, 36808, 49909, 36814, 54189, 36816, 54475, 36817, 48636, 36819, 58818, 36820, 47029, 36821, 58819, 36824, 48057, 36825, 54754, 36827, 48632, 36828, 54454, 36829, 52901, 36830, 49580, 36831, 46041, 36834, 52470, 36836, 58822, 36837, 58820, 36838, 58824, 36840, 58826, 36841, 58823, 36842, 46543, 36843, 50888, 36845, 46588, 36846, 58821, 36848, 51958, 36851, 58825, 36855, 50132, 36856, 45509, 36857, 48291, 36861, 55223, 36864, 52683, 36865, 52173, 36866, 51914, 36867, 52435, 36868, 58828, 36869, 58827, 36870, 50406, 36873, 53665, 36874, 53687, 36875, 58829, 36877, 58832, 36879, 52664, 36880, 55024, 36881, 58831, 36882, 46557, 36884, 52670, 36886, 58833, 36887, 46778, 36890, 52648, 36891, 47588, 36893, 51909, 36894, 46033, 36895, 52185, 36896, 54508, 36897, 58834, 36898, 47082, 36902, 58830, 36909, 58837, 36910, 46334, 36911, 58838, 36917, 58835, 36918, 58836, 36920, 53981, 36923, 49887, 36924, 45510, 36926, 54242, 36929, 46813, 36930, 52204, 36932, 58839, 36935, 54262, 36941, 45545, 36943, 46836, 36944, 58842, 36945, 58840, 36946, 58841, 36947, 46528, 36951, 53957, 36952, 58844, 36955, 58846, 36962, 58845, 36963, 51122, 36965, 53923, 36968, 58843, 36973, 54498, 36974, 54746, 36980, 58848, 36981, 55281, 36989, 58849, 36991, 45532, 36992, 53755, 36994, 58850, 36995, 58852, 37e3, 58851, 37003, 58853, 37009, 53976, 37011, 46539, 37013, 59359, 37015, 56053, 37017, 56056, 37019, 56054, 37021, 56055, 37025, 56058, 37026, 53455, 37027, 50375, 37030, 45294, 37034, 53424, 37036, 56057, 37038, 54218, 37039, 47786, 37040, 56226, 37041, 51185, 37043, 56060, 37044, 56059, 37045, 51675, 37046, 56061, 37048, 56225, 37049, 55262, 37050, 56062, 37051, 49626, 37054, 56229, 37057, 54260, 37060, 56231, 37061, 56228, 37063, 56232, 37066, 48572, 37070, 49353, 37071, 56227, 37072, 56230, 37073, 54947, 37075, 56233, 37079, 56237, 37083, 56238, 37084, 56236, 37085, 47810, 37089, 49060, 37090, 56235, 37094, 56234, 37095, 54471, 37096, 45759, 37099, 56239, 37101, 47609, 37103, 56240, 37108, 46011, 37112, 46502, 37117, 46780, 37118, 56241, 37122, 46837, 37124, 56242, 37145, 45513, 37150, 56244, 37154, 56243, 37155, 56245, 37167, 56247, 37169, 56246, 37177, 56248, 37187, 56249, 37190, 56250, 37193, 54223, 37194, 62714, 37195, 51189, 37196, 55235, 37197, 50660, 37198, 62716, 37199, 62717, 37200, 62715, 37202, 48838, 37207, 53487, 37210, 47059, 37213, 54477, 37214, 52394, 37217, 62882, 37218, 62881, 37219, 47784, 37220, 62718, 37221, 52182, 37225, 62884, 37226, 49362, 37228, 46058, 37230, 52650, 37231, 62885, 37232, 62883, 37233, 48564, 37234, 62888, 37236, 62889, 37237, 48589, 37238, 50104, 37239, 49121, 37240, 52193, 37241, 62890, 37245, 62886, 37246, 62887, 37247, 50416, 37253, 62892, 37255, 46268, 37257, 55277, 37259, 46295, 37260, 62891, 37261, 62894, 37264, 62893, 37265, 62895, 37266, 53457, 37274, 50129, 37275, 51369, 37282, 62896, 37283, 62897, 37290, 62898, 37293, 62899, 37294, 62900, 37295, 62901, 37300, 62903, 37301, 62902, 37306, 62904, 37319, 45769, 37321, 54228, 37322, 51917, 37324, 49391, 37325, 55e3, 37326, 53936, 37327, 49599, 37329, 48624, 37340, 47274, 37492, 48376, 37518, 63174, 37550, 63175, 37576, 63176, 37694, 63177, 37738, 63178, 37775, 63180, 37834, 63179, 37846, 63465, 37950, 63181, 37995, 63182, 38021, 61124, 38022, 61125, 38023, 61126, 38024, 54763, 38025, 46756, 38026, 61128, 38027, 61127, 38028, 61129, 38029, 61130, 38030, 51109, 38031, 61131, 38032, 61132, 38034, 47024, 38035, 46582, 38036, 61133, 38037, 61135, 38039, 61134, 38041, 47302, 38042, 61136, 38043, 61137, 38044, 61138, 38045, 46811, 38046, 45998, 38047, 54995, 38048, 50374, 38049, 45493, 38050, 47318, 38051, 61139, 38052, 61140, 38053, 54463, 38054, 51157, 38055, 48891, 38056, 52953, 38057, 47539, 38058, 61142, 38059, 61141, 38060, 61144, 38061, 61143, 38062, 50597, 38063, 61145, 38064, 61146, 38065, 51118, 38066, 61147, 38067, 51119, 38068, 61148, 38069, 45735, 38070, 61149, 38071, 61150, 38072, 61151, 38073, 61152, 38074, 61153, 38075, 55274, 38076, 61154, 38077, 61155, 38078, 48344, 38079, 61156, 38080, 54219, 38081, 52474, 38082, 45740, 38083, 49637, 38084, 61157, 38085, 51110, 38086, 50093, 38088, 61158, 38089, 61159, 38090, 61160, 38091, 61161, 38092, 61162, 38093, 61163, 38094, 61164, 38096, 61165, 38097, 61166, 38098, 61167, 38101, 61168, 38102, 61169, 38103, 61170, 38104, 61172, 38105, 61171, 38107, 61173, 38108, 52653, 38109, 49857, 38110, 61174, 38111, 61175, 38112, 61176, 38113, 54689, 38114, 61177, 38115, 53171, 38116, 61178, 38117, 61179, 38119, 61180, 38120, 61181, 38121, 61345, 38122, 61182, 38123, 61346, 38124, 47349, 38125, 50170, 38126, 61347, 38127, 61348, 38128, 48578, 38129, 53951, 38130, 45817, 38131, 61349, 38132, 61350, 38133, 61351, 38134, 54008, 38135, 61352, 38136, 55037, 38137, 61353, 38138, 50892, 38140, 61354, 38141, 61355, 38142, 49588, 38143, 61356, 38144, 53242, 38145, 52216, 38146, 61358, 38147, 61357, 38148, 46074, 38149, 47608, 38150, 61359, 38151, 61360, 38152, 53474, 38153, 61361, 38154, 61362, 38155, 47078, 38156, 53439, 38157, 61363, 38158, 61364, 38159, 61365, 38160, 51441, 38161, 52448, 38162, 61366, 38163, 61367, 38164, 61368, 38165, 61369, 38166, 61370, 38167, 54752, 38168, 61371, 38169, 46317, 38170, 50090, 38171, 61372, 38173, 61373, 38174, 61374, 38175, 61375, 38177, 52989, 38178, 61376, 38179, 49888, 38180, 46264, 38181, 55222, 38182, 48629, 38184, 53191, 38185, 61379, 38186, 61377, 38187, 61378, 38188, 61380, 38189, 46759, 38190, 48380, 38191, 48866, 38192, 50124, 38193, 61381, 38194, 61382, 38196, 61383, 38197, 61391, 38198, 61384, 38199, 61385, 38200, 61386, 38201, 51138, 38202, 61425, 38203, 46797, 38204, 61387, 38206, 61388, 38207, 61389, 38208, 46790, 38209, 50110, 38210, 61390, 38212, 61392, 38213, 61393, 38214, 61394, 38215, 54770, 38217, 61395, 38218, 50423, 38220, 61396, 38221, 50424, 38222, 61397, 38223, 61398, 38224, 47332, 38225, 45303, 38226, 61399, 38227, 61400, 38228, 61401, 38230, 61402, 38231, 61403, 38232, 61404, 38233, 61405, 38235, 61406, 38236, 48821, 38237, 61409, 38238, 61407, 38239, 61408, 38241, 61410, 38242, 61411, 38243, 49613, 38244, 61412, 38245, 61413, 38246, 61414, 38247, 61415, 38248, 61416, 38249, 61417, 38250, 61418, 38251, 61419, 38252, 61420, 38253, 49368, 38255, 61421, 38256, 49581, 38257, 61422, 38258, 61423, 38259, 61424, 38262, 53218, 38271, 45988, 38376, 50117, 38377, 58309, 38378, 51649, 38379, 58310, 38381, 45525, 38382, 52938, 38383, 46259, 38384, 51442, 38385, 58311, 38386, 53200, 38387, 58312, 38388, 48356, 38389, 58313, 38390, 58314, 38391, 50118, 38392, 54690, 38393, 50390, 38394, 47595, 38395, 52933, 38396, 58315, 38397, 50166, 38398, 58316, 38400, 47015, 38401, 47347, 38402, 47826, 38403, 58317, 38404, 58318, 38405, 54468, 38406, 58319, 38408, 58320, 38409, 53707, 38410, 58321, 38411, 58322, 38412, 58323, 38413, 58324, 38414, 53718, 38415, 58325, 38416, 45819, 38417, 49339, 38418, 58326, 38420, 49323, 38421, 58327, 38422, 58328, 38423, 58329, 38425, 58330, 38426, 58331, 38428, 47287, 38429, 56034, 38431, 46803, 38433, 56036, 38434, 56035, 38442, 56038, 38446, 51438, 38449, 56037, 38450, 47040, 38451, 53748, 38452, 54005, 38453, 54771, 38454, 48599, 38459, 55272, 38460, 56040, 38461, 56039, 38463, 45218, 38464, 52691, 38466, 56041, 38468, 47293, 38469, 48330, 38470, 49853, 38471, 49828, 38472, 46018, 38473, 56042, 38475, 49834, 38476, 50352, 38477, 48565, 38480, 53214, 38484, 56043, 38485, 51650, 38491, 45533, 38495, 56044, 38497, 46776, 38498, 54458, 38500, 46077, 38503, 56045, 38504, 54473, 38505, 53205, 38506, 50659, 38508, 56046, 38514, 56047, 38516, 56048, 38517, 49642, 38518, 52437, 38519, 53213, 38533, 54247, 38534, 49825, 38536, 56049, 38539, 52197, 38541, 56050, 38543, 52198, 38544, 54014, 38548, 47348, 38551, 56051, 38552, 45231, 38553, 53174, 38556, 54735, 38567, 52205, 38576, 56052, 38579, 58308, 38582, 49573, 38585, 63167, 38588, 63168, 38589, 63169, 38590, 50385, 38592, 51384, 38593, 53731, 38596, 53467, 38597, 53701, 38598, 48303, 38599, 47565, 38601, 61428, 38604, 46278, 38605, 54202, 38606, 63170, 38607, 46075, 38610, 63171, 38613, 46577, 38624, 63173, 38632, 54250, 38633, 63143, 38634, 53673, 38639, 63145, 38643, 63144, 38646, 49635, 38647, 49367, 38649, 45474, 38654, 52973, 38656, 53480, 38657, 63147, 38660, 53238, 38662, 63146, 38663, 54768, 38664, 63148, 38665, 50105, 38669, 48116, 38670, 63150, 38671, 63149, 38675, 50398, 38678, 49624, 38684, 52138, 38686, 53180, 38698, 63151, 38701, 63152, 38704, 63153, 38706, 49846, 38712, 45268, 38713, 50681, 38718, 63154, 38738, 51168, 38739, 63142, 38742, 48824, 38745, 48818, 38747, 46565, 38750, 47047, 38752, 49087, 38753, 50130, 38754, 50150, 38757, 55500, 38761, 47343, 38771, 48633, 38772, 53669, 38774, 45264, 38780, 63408, 38789, 63409, 38795, 53420, 38797, 45232, 38801, 63410, 38802, 63411, 38804, 63412, 38808, 51146, 38816, 48847, 38819, 63415, 38827, 63414, 38829, 45534, 38831, 63413, 38834, 63416, 38836, 63417, 38886, 52900, 38887, 51405, 38889, 47787, 38890, 59576, 38891, 59577, 38892, 59578, 38893, 48834, 38899, 54004, 38901, 54479, 38902, 51672, 39029, 53939, 39030, 46757, 39031, 51178, 39032, 61948, 39033, 53230, 39034, 52147, 39035, 53483, 39036, 59375, 39037, 52711, 39038, 47563, 39039, 46809, 39040, 61949, 39041, 45284, 39042, 52172, 39043, 61950, 39044, 54436, 39045, 49837, 39046, 49644, 39047, 50884, 39048, 48817, 39049, 62113, 39050, 48341, 39052, 62114, 39053, 62115, 39055, 62116, 39056, 53955, 39057, 50869, 39059, 52679, 39060, 62117, 39062, 54193, 39063, 49093, 39064, 52450, 39066, 62118, 39067, 62119, 39068, 53717, 39069, 46830, 39070, 62120, 39071, 62121, 39072, 46559, 39073, 62122, 39074, 62123, 39076, 45820, 39077, 62124, 39078, 62125, 39079, 51367, 39118, 47079, 39121, 60585, 39122, 60586, 39123, 60587, 39125, 60588, 39128, 50862, 39129, 60589, 39130, 60590, 39134, 47049, 39135, 51891, 39143, 58040, 39144, 63439, 39181, 63440, 39184, 45773, 39214, 63441, 39252, 63443, 39253, 63442, 39267, 58043, 39269, 48290, 39271, 58044, 39272, 58045, 39273, 58046, 39274, 58047, 39275, 58048, 39276, 58049, 39277, 47033, 39278, 54011, 39279, 48548, 39280, 51918, 39281, 45477, 39282, 52167, 39284, 58050, 39285, 46844, 39286, 51396, 39287, 58051, 39290, 48584, 39292, 45565, 39293, 58052, 39295, 46838, 39296, 58053, 39297, 50393, 39300, 58054, 39301, 53210, 39302, 47581, 39303, 58055, 39304, 49313, 39306, 58056, 39307, 45814, 39309, 58057, 39311, 49651, 39312, 58058, 39313, 58059, 39314, 49912, 39315, 58060, 39316, 58061, 39317, 58062, 39318, 51927, 39319, 55480, 39320, 55781, 39321, 53219, 39333, 61605, 39336, 56496, 39532, 49901, 39533, 54438, 39534, 52692, 39535, 53681, 39536, 46043, 39537, 51197, 39539, 45749, 39540, 49855, 39541, 59104, 39542, 51899, 39543, 59105, 39544, 59106, 39545, 48852, 39546, 59107, 39547, 55204, 39548, 52693, 39549, 59109, 39550, 48349, 39551, 59108, 39552, 59110, 39553, 59111, 39554, 49902, 39556, 48574, 39557, 59112, 39558, 49894, 39559, 47783, 39560, 59113, 39562, 59114, 39563, 46034, 39564, 53737, 39567, 49061, 39568, 59115, 39569, 50927, 39570, 59116, 39571, 59117, 39574, 59118, 39575, 50861, 39576, 59119, 39578, 51623, 39579, 59120, 39580, 59121, 39581, 59122, 39582, 58809, 39583, 59123, 39584, 59124, 39585, 49890, 39586, 59125, 39587, 59126, 39588, 55016, 39589, 59127, 39591, 59128, 39592, 47559, 39600, 63419, 39601, 63418, 39606, 63422, 39607, 63420, 39608, 47777, 39610, 63423, 39612, 63424, 39616, 63426, 39617, 63425, 39618, 63428, 39621, 63427, 39627, 63429, 39628, 63430, 39633, 63431, 39635, 52200, 39640, 47327, 39647, 63444, 39649, 63445, 39654, 63446, 39659, 63448, 39661, 63450, 39663, 63447, 39673, 63451, 39675, 63449, 39683, 55255, 39688, 63452, 39695, 63453, 39699, 63454, 39711, 63455, 39715, 63456, 39727, 56267, 39730, 55466, 39739, 58871, 39740, 47597, 39745, 49149, 39746, 48106, 39747, 63433, 39748, 50887, 39749, 63432, 39751, 63434, 39752, 63436, 39753, 63435, 39757, 63437, 39759, 52922, 39761, 63438, 39764, 50343, 40060, 54243, 40063, 63183, 40065, 49843, 40066, 63184, 40069, 63185, 40070, 63186, 40071, 63187, 40072, 63188, 40075, 63190, 40077, 45483, 40078, 63191, 40080, 63192, 40081, 63193, 40082, 63194, 40084, 63195, 40085, 63196, 40090, 63197, 40091, 63198, 40092, 53194, 40094, 63199, 40095, 63200, 40096, 63201, 40097, 63202, 40098, 63203, 40099, 63204, 40100, 49392, 40101, 63205, 40102, 63206, 40103, 63207, 40104, 63208, 40105, 63209, 40107, 63210, 40109, 63211, 40110, 63212, 40112, 63213, 40113, 63214, 40114, 63215, 40115, 63216, 40116, 63217, 40117, 63218, 40118, 63219, 40119, 63220, 40120, 48808, 40122, 63221, 40123, 63222, 40124, 63223, 40125, 63224, 40131, 51450, 40132, 63225, 40133, 63226, 40134, 63227, 40135, 63228, 40138, 63229, 40139, 63230, 40140, 63393, 40141, 63394, 40142, 63395, 40143, 63396, 40144, 63397, 40147, 63398, 40148, 63399, 40149, 63400, 40150, 45550, 40151, 63401, 40152, 63402, 40153, 63403, 40156, 63404, 40157, 63405, 40158, 49627, 40159, 63406, 40162, 63407, 40479, 50417, 40480, 61615, 40481, 48294, 40482, 61616, 40483, 50169, 40485, 50616, 40486, 53691, 40488, 61617, 40489, 61618, 40490, 61619, 40491, 61620, 40492, 61621, 40493, 53692, 40495, 53740, 40497, 61623, 40498, 61622, 40499, 54439, 40501, 52690, 40502, 61624, 40503, 61626, 40504, 61625, 40505, 61627, 40506, 61628, 40509, 47339, 40510, 61629, 40511, 47848, 40513, 61630, 40514, 61631, 40515, 48873, 40516, 61632, 40517, 46828, 40518, 61633, 40519, 61634, 40520, 61635, 40521, 61636, 40522, 51381, 40523, 61637, 40524, 61638, 40526, 61639, 40527, 50676, 40529, 61640, 40533, 61641, 40535, 61642, 40536, 63421, 40538, 61643, 40539, 61644, 40540, 61645, 40542, 61646, 40547, 61647, 40548, 47831, 40550, 61648, 40551, 61649, 40552, 61650, 40553, 61651, 40554, 61652, 40555, 61653, 40556, 61654, 40557, 61656, 40560, 54181, 40561, 61655, 40563, 61657, 40574, 62906, 40575, 49849, 40578, 63460, 40583, 63461, 40584, 63462, 40587, 63463, 40594, 63464, 40595, 49844, 40605, 63466, 40607, 63467, 40614, 49907, 40628, 62704, 40632, 62703, 40635, 49897, 40637, 63457, 40638, 63458, 40644, 48070, 40649, 55780, 40653, 51954, 40654, 49384, 40655, 61604, 40657, 47834, 40660, 51117, 40664, 50348, 40667, 63468, 40668, 63469, 40669, 63470, 40671, 63472, 40672, 63471, 40674, 63473, 40677, 63476, 40679, 63475, 40681, 63474, 40682, 63477, 40687, 63478, 40697, 60905, 40699, 60906, 40700, 60907, 40702, 63164, 40715, 63165, 40717, 63166, 40718, 46758, 40720, 55486, 40723, 47556, 40727, 55483, 40729, 56497, 40736, 51955, 40738, 63479, 40748, 63480, 40751, 63481, 40759, 63483, 40761, 63482, 40763, 45511, 40765, 63484, 40766, 63485, 40772, 63486, 40784, 50923, 40785, 60596, 40831, 46045, 40832, 63155, 40835, 63156, 40836, 49636, 40837, 63157, 40838, 63158, 40839, 63159, 40840, 63160, 40841, 63161, 40842, 63162, 40843, 51363, 40844, 63163, 40857, 49658, 40858, 47528, 40859, 60904, 40863, 47594, 40864, 55775, 65281, 41889, 65282, 41890, 65283, 41891, 65284, 41447, 65285, 41893, 65286, 41894, 65287, 41895, 65288, 41896, 65289, 41897, 65290, 41898, 65291, 41899, 65292, 41900, 65293, 41901, 65294, 41902, 65295, 41903, 65296, 41904, 65297, 41905, 65298, 41906, 65299, 41907, 65300, 41908, 65301, 41909, 65302, 41910, 65303, 41911, 65304, 41912, 65305, 41913, 65306, 41914, 65307, 41915, 65308, 41916, 65309, 41917, 65310, 41918, 65311, 41919, 65312, 41920, 65313, 41921, 65314, 41922, 65315, 41923, 65316, 41924, 65317, 41925, 65318, 41926, 65319, 41927, 65320, 41928, 65321, 41929, 65322, 41930, 65323, 41931, 65324, 41932, 65325, 41933, 65326, 41934, 65327, 41935, 65328, 41936, 65329, 41937, 65330, 41938, 65331, 41939, 65332, 41940, 65333, 41941, 65334, 41942, 65335, 41943, 65336, 41944, 65337, 41945, 65338, 41946, 65339, 41947, 65340, 41948, 65341, 41949, 65342, 41950, 65343, 41951, 65344, 41952, 65345, 41953, 65346, 41954, 65347, 41955, 65348, 41956, 65349, 41957, 65350, 41958, 65351, 41959, 65352, 41960, 65353, 41961, 65354, 41962, 65355, 41963, 65356, 41964, 65357, 41965, 65358, 41966, 65359, 41967, 65360, 41968, 65361, 41969, 65362, 41970, 65363, 41971, 65364, 41972, 65365, 41973, 65366, 41974, 65367, 41975, 65368, 41976, 65369, 41977, 65370, 41978, 65371, 41979, 65372, 41980, 65373, 41981, 65374, 41387, 65504, 41449, 65505, 41450, 65507, 41982, 65509, 41892];

    class s {
        static formatDate(t, e) {
            let n = t || "HH:mm:ss.SSS";
            const r = {
                "y+": (e = e || new Date).getFullYear(),
                "M+": e.getMonth() + 1,
                "d+": e.getDate(),
                "h+": e.getHours(),
                "H+": e.getHours(),
                "m+": e.getMinutes(),
                "s+": e.getSeconds(),
                "q+": Math.floor((e.getMonth() + 3) / 3),
                "S+": e.getMilliseconds()
            };
            let i;
            for (const t in r) if (i = new RegExp(`(${t})`).exec(n)) {
                const e = `${r[t]}`, o = `00${e}`, a = i[1].length > o.length ? 0 : o.length - i[1].length;
                n = n.replace(i[1], 1 === i[1].length ? e : o.substring(a))
            }
            return n
        }

        static log(t, ...e) {
            const n = s.formatDate();
            console.log(`[${n}]: ${t}`), void 0 !== e && console.log(...e)
        }
    }

    class c {
        static decode(t) {
            try {
                let e = "";
                return e = "function" == typeof c.decodeAction ? c.decodeAction(t) : new TextDecoder("gbk").decode(t), e
            } catch (t) {
                return console.warn(t), ""
            }
        }

        static initEncodeTable() {
            if (!this._table) {
                s.log("---- start to initEncodeTable:");
                const t = [[161, 169, 161, 254], [176, 247, 161, 254], [129, 160, 64, 254], [170, 254, 64, 160], [168, 169, 64, 160], [170, 175, 161, 254], [248, 254, 161, 254], [161, 167, 64, 160]],
                    e = new Uint16Array(23940);
                let n = 0;
                for (const [r, i, o, a] of t) for (let t = o; t <= a; t++) if (127 !== t) for (let o = r; o <= i; o++) e[n++] = t << 8 | o;
                this._table = new Uint16Array(65536), this._table.fill(65535);
                let r = c.decode(e);
                if (!r) return this._table = new Uint16Array(0), this._table;
                for (let t = 0; t < r.length; t++) this._table[r.charCodeAt(t)] = e[t];
                s.log("---- end to initEncodeTable:")
            }
            return this._table
        }

        static encode(t, e) {
            t = t || "";
            const n = this.initEncodeTable(), r = new Uint16Array(t.length);
            for (let i = 0; i < t.length; i++) {
                const o = t.charCodeAt(i);
                if (o < 128) {
                    r[i] = o;
                    continue
                }
                const a = n.length > 0 ? n[o] : this.loopGbkCode(o);
                if (65535 !== a) r[i] = a; else if (8364 === o) r[i] = 128; else {
                    const t = e ? e(i) : 63;
                    if (-1 === t) return r.subarray(0, i);
                    r[i] = t
                }
            }
            return r
        }

        static loopGbkCode(t) {
            if (t <= 255) return t;
            {
                let e = 0, n = 0;
                do {
                    a[2 * e] == t && (n = a[2 * e + 1]), e++
                } while (e < 7445 && 0 == n);
                return n > 0 ? n : (console.warn("Invalid character in input data (E30)"), 65535)
            }
        }

        static encodeToUint8Array(t, e) {
            t = t || "";
            const n = this.initEncodeTable(), r = new Uint8Array(2 * t.length);
            let i = 0;
            for (let o = 0; o < t.length; o++) {
                const a = t.charCodeAt(o);
                if (a < 128) {
                    r[i++] = a;
                    continue
                }
                const s = n.length > 0 ? n[a] : this.loopGbkCode(a);
                if (65535 !== s) r[i++] = s, r[i++] = s >> 8; else if (8364 === a) r[i++] = 128; else {
                    const t = e ? e(o) : 63;
                    if (-1 === t) return r.subarray(0, i);
                    t > 255 ? (r[i++] = t, r[i++] = t >> 8) : r[i++] = t
                }
            }
            return r.subarray(0, i)
        }

        static uint8ArrayToUint16Array(t, e) {
            const n = [];
            for (let r = 0, i = 0, o = 0; r < t.length; r++) t[r] < 128 ? n.push(t[r]) : (i = 255 & t[r++], o = r < t.length ? 255 & t[r] : 0, e ? n.push(i << 8 | o) : n.push(o << 8 | i));
            return Uint16Array.from(n)
        }
    }

    class l {
    }

    var h, u, d, p;
    l.shift_set = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 95, 96, 123, 124, 125, 126], l.gm_recommend_cw = [9, 30, 59, 114, 170, 237, 315, 405, 506, 618, 741, 875, 1021], l.gm_max_cw = [11, 40, 79, 146, 218, 305, 405, 521, 650, 794, 953, 1125, 1313], l.gm_data_codewords = [0, 15, 13, 11, 9, 45, 40, 35, 30, 25, 89, 79, 69, 59, 49, 146, 130, 114, 98, 81, 218, 194, 170, 146, 121, 305, 271, 237, 203, 169, 405, 360, 315, 270, 225, 521, 463, 405, 347, 289, 650, 578, 506, 434, 361, 794, 706, 618, 530, 441, 953, 847, 741, 635, 529, 1125, 1e3, 875, 750, 625, 1313, 1167, 1021, 875, 729], l.gm_n1 = [18, 50, 98, 81, 121, 113, 113, 116, 121, 126, 118, 125, 122], l.gm_b1 = [1, 1, 1, 2, 2, 2, 2, 3, 2, 7, 5, 10, 6], l.gm_b2 = [0, 0, 0, 0, 0, 1, 2, 2, 4, 0, 4, 0, 6], l.gm_ebeb = [0, 0, 0, 0, 3, 1, 0, 0, 5, 1, 0, 0, 7, 1, 0, 0, 9, 1, 0, 0, 5, 1, 0, 0, 10, 1, 0, 0, 15, 1, 0, 0, 20, 1, 0, 0, 25, 1, 0, 0, 9, 1, 0, 0, 19, 1, 0, 0, 29, 1, 0, 0, 39, 1, 0, 0, 49, 1, 0, 0, 8, 2, 0, 0, 16, 2, 0, 0, 24, 2, 0, 0, 32, 2, 0, 0, 41, 1, 40, 1, 12, 2, 0, 0, 24, 2, 0, 0, 36, 2, 0, 0, 48, 2, 0, 0, 61, 1, 60, 1, 11, 3, 0, 0, 23, 1, 22, 2, 34, 2, 33, 1, 45, 3, 0, 0, 57, 1, 56, 2, 12, 1, 11, 3, 23, 2, 22, 2, 34, 3, 33, 1, 45, 4, 0, 0, 57, 1, 56, 3, 12, 2, 11, 3, 23, 5, 0, 0, 35, 3, 34, 2, 47, 1, 46, 4, 58, 4, 57, 1, 12, 6, 0, 0, 24, 6, 0, 0, 36, 6, 0, 0, 48, 6, 0, 0, 61, 1, 60, 5, 13, 4, 12, 3, 26, 1, 25, 6, 38, 5, 37, 2, 51, 2, 50, 5, 63, 7, 0, 0, 12, 6, 11, 3, 24, 4, 23, 5, 36, 2, 35, 7, 47, 9, 0, 0, 59, 7, 58, 2, 13, 5, 12, 5, 25, 10, 0, 0, 38, 5, 37, 5, 50, 10, 0, 0, 63, 5, 62, 5, 13, 1, 12, 11, 25, 3, 24, 9, 37, 5, 36, 7, 49, 7, 48, 5, 61, 9, 60, 3], l.gm_macro_matrix = [728, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 727, 624, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 651, 726, 623, 528, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 553, 652, 725, 622, 527, 440, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 463, 554, 653, 724, 621, 526, 439, 360, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 381, 464, 555, 654, 723, 620, 525, 438, 359, 288, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 307, 382, 465, 556, 655, 722, 619, 524, 437, 358, 287, 224, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 241, 308, 383, 466, 557, 656, 721, 618, 523, 436, 357, 286, 223, 168, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 183, 242, 309, 384, 467, 558, 657, 720, 617, 522, 435, 356, 285, 222, 167, 120, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 133, 184, 243, 310, 385, 468, 559, 658, 719, 616, 521, 434, 355, 284, 221, 166, 119, 80, 49, 50, 51, 52, 53, 54, 55, 56, 91, 134, 185, 244, 311, 386, 469, 560, 659, 718, 615, 520, 433, 354, 283, 220, 165, 118, 79, 48, 25, 26, 27, 28, 29, 30, 57, 92, 135, 186, 245, 312, 387, 470, 561, 660, 717, 614, 519, 432, 353, 282, 219, 164, 117, 78, 47, 24, 9, 10, 11, 12, 31, 58, 93, 136, 187, 246, 313, 388, 471, 562, 661, 716, 613, 518, 431, 352, 281, 218, 163, 116, 77, 46, 23, 8, 1, 2, 13, 32, 59, 94, 137, 188, 247, 314, 389, 472, 563, 662, 715, 612, 517, 430, 351, 280, 217, 162, 115, 76, 45, 22, 7, 0, 3, 14, 33, 60, 95, 138, 189, 248, 315, 390, 473, 564, 663, 714, 611, 516, 429, 350, 279, 216, 161, 114, 75, 44, 21, 6, 5, 4, 15, 34, 61, 96, 139, 190, 249, 316, 391, 474, 565, 664, 713, 610, 515, 428, 349, 278, 215, 160, 113, 74, 43, 20, 19, 18, 17, 16, 35, 62, 97, 140, 191, 250, 317, 392, 475, 566, 665, 712, 609, 514, 427, 348, 277, 214, 159, 112, 73, 42, 41, 40, 39, 38, 37, 36, 63, 98, 141, 192, 251, 318, 393, 476, 567, 666, 711, 608, 513, 426, 347, 276, 213, 158, 111, 72, 71, 70, 69, 68, 67, 66, 65, 64, 99, 142, 193, 252, 319, 394, 477, 568, 667, 710, 607, 512, 425, 346, 275, 212, 157, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 143, 194, 253, 320, 395, 478, 569, 668, 709, 606, 511, 424, 345, 274, 211, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 195, 254, 321, 396, 479, 570, 669, 708, 605, 510, 423, 344, 273, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 198, 197, 196, 255, 322, 397, 480, 571, 670, 707, 604, 509, 422, 343, 272, 271, 270, 269, 268, 267, 266, 265, 264, 263, 262, 261, 260, 259, 258, 257, 256, 323, 398, 481, 572, 671, 706, 603, 508, 421, 342, 341, 340, 339, 338, 337, 336, 335, 334, 333, 332, 331, 330, 329, 328, 327, 326, 325, 324, 399, 482, 573, 672, 705, 602, 507, 420, 419, 418, 417, 416, 415, 414, 413, 412, 411, 410, 409, 408, 407, 406, 405, 404, 403, 402, 401, 400, 483, 574, 673, 704, 601, 506, 505, 504, 503, 502, 501, 500, 499, 498, 497, 496, 495, 494, 493, 492, 491, 490, 489, 488, 487, 486, 485, 484, 575, 674, 703, 600, 599, 598, 597, 596, 595, 594, 593, 592, 591, 590, 589, 588, 587, 586, 585, 584, 583, 582, 581, 580, 579, 578, 577, 576, 675, 702, 701, 700, 699, 698, 697, 696, 695, 694, 693, 692, 691, 690, 689, 688, 687, 686, 685, 684, 683, 682, 681, 680, 679, 678, 677, 676], function (t) {
        t[t.DATA_MODE = 0] = "DATA_MODE", t[t.UNICODE_MODE = 1] = "UNICODE_MODE", t[t.GS1_MODE = 2] = "GS1_MODE", t[t.KANJI_MODE = 3] = "KANJI_MODE", t[t.SJIS_MODE = 4] = "SJIS_MODE"
    }(h || (h = {})), function (t) {
        t[t.BARCODE_NO_ASCII = 1] = "BARCODE_NO_ASCII", t[t.BARCODE_BIND = 2] = "BARCODE_BIND", t[t.BARCODE_BOX = 4] = "BARCODE_BOX", t[t.BARCODE_STDOUT = 8] = "BARCODE_STDOUT", t[t.READER_INIT = 16] = "READER_INIT", t[t.SMALL_TEXT = 32] = "SMALL_TEXT", t[t.BOLD_TEXT = 64] = "BOLD_TEXT", t[t.CMYK_COLOUR = 128] = "CMYK_COLOUR", t[t.BARCODE_DOTTY_MODE = 256] = "BARCODE_DOTTY_MODE"
    }(u || (u = {}));

    class g {
        constructor(t) {
            let e, n;
            for (this.logmod = 0, this.rlen = 0, this.logt = [], this.alog = [], this.rspoly = [], n = 1, e = 0; n <= t; n <<= 1) e++;
            n >>= 1, e--, this.logmod = (1 << e) - 1, this.logt = Array(this.logmod + 1), this.alog = Array(this.logmod), this.logt.fill(0), this.alog.fill(0);
            for (let e = 1, r = 0; r < this.logmod; r++) this.alog[r] = e, this.logt[e] = r, e <<= 1, e & n && (e ^= t)
        }

        rs_init_code(t, e) {
            this.rspoly = Array(t + 1), this.rspoly.fill(0), this.rlen = t, this.rspoly[0] = 1;
            for (let n = 1; n <= t; n++) {
                this.rspoly[n] = 1;
                for (let t = n - 1; t > 0; t--) this.rspoly[t] && (this.rspoly[t] = this.alog[(this.logt[this.rspoly[t]] + e) % this.logmod]), this.rspoly[t] ^= this.rspoly[t - 1];
                this.rspoly[0] = this.alog[(this.logt[this.rspoly[0]] + e) % this.logmod], e++
            }
        }

        rs_encode(t, e, n) {
            let r, i, o;
            for (r = 0; r < this.rlen; r++) n[r] = 0;
            for (r = 0; r < t; r++) {
                for (o = n[this.rlen - 1] ^ e[r], i = this.rlen - 1; i > 0; i--) o && this.rspoly[i] ? n[i] = n[i - 1] ^ this.alog[(this.logt[o] + this.logt[this.rspoly[i]]) % this.logmod] : n[i] = n[i - 1];
                o && this.rspoly[0] ? n[0] = this.alog[(this.logt[o] + this.logt[this.rspoly[0]]) % this.logmod] : n[0] = 0
            }
        }

        rs_encode_long(t, e, n) {
            let r, i, o;
            for (r = 0; r < this.rlen; r++) n[r] = 0;
            for (r = 0; r < t; r++) {
                for (o = n[this.rlen - 1] ^ e[r], i = this.rlen - 1; i > 0; i--) o && this.rspoly[i] ? n[i] = n[i - 1] ^ this.alog[(this.logt[o] + this.logt[this.rspoly[i]]) % this.logmod] : n[i] = n[i - 1];
                o && this.rspoly[0] ? n[0] = this.alog[(this.logt[o] + this.logt[this.rspoly[0]]) % this.logmod] : n[0] = 0
            }
        }

        rs_free() {
            this.logt && this.logt.splice(0), this.alog && this.alog.splice(0), this.rspoly && this.rspoly.splice(0)
        }
    }

    !function (t) {
        t[t.None = 0] = "None", t[t.GM_CHINESE = 72] = "GM_CHINESE", t[t.GM_NUMBER = 78] = "GM_NUMBER", t[t.GM_LOWER = 76] = "GM_LOWER", t[t.GM_UPPER = 85] = "GM_UPPER", t[t.GM_MIXED = 77] = "GM_MIXED", t[t.GM_BYTE = 66] = "GM_BYTE"
    }(d || (d = {})), function (t) {
        t[t.GM_H = 0] = "GM_H", t[t.GM_N = 1] = "GM_N", t[t.GM_L = 2] = "GM_L", t[t.GM_U = 3] = "GM_U", t[t.GM_M = 4] = "GM_M", t[t.GM_B = 5] = "GM_B"
    }(p || (p = {}));

    class f {
        get Binary() {
            return this.binary.slice(0, this.pos)
        }

        constructor() {
            this.pos = 0, this.binary = new Uint8Array(9300)
        }

        bin_append_posn(t, e, n) {
            const r = n || this.pos, i = 1 << e - 1;
            for (let n = 0; n < e; n++) this.binary[r + n] = t & i >> n ? 1 : 0;
            return n ? n + e : this.pos = this.pos + e
        }

        gm_add_byte_count(t, e) {
            return this.bin_append_posn(e - 1, 9, t)
        }

        gm_add_shift_char(t) {
            let e = 0;
            if (t < 32) e = t; else for (let n = 32; n < 64; n++) if (l.shift_set[n] == t) {
                e = n;
                break
            }
            return console.log(`---- gm_add_shift_char: SHIFT [${e}]`), this.bin_append_posn(e, 6)
        }

        set(t, e) {
            this.binary[t] = e
        }

        toString() {
            return `${this.Binary.join("")}`
        }
    }

    class _ {
        static getInstance() {
            return this._instance || (this._instance = new _)
        }

        static register(t) {
            t && t.register(this.getInstance())
        }

        static number_lat(t, e, n) {
            let r, o, a = 0, s = 0, c = 0;
            r = n;
            do {
                switch (o = 0, i.isDigit(t[r]) && (a++, o = 1), t[r]) {
                    case 32:
                    case 43:
                    case 45:
                    case 46:
                    case 44:
                        s++, o = 1
                }
                r + 1 < e && 19 == t[r] && 16 == t[r + 1] && (s++, o = 1, r++), 0 == o ? c += 80 : 3 == a && (0 == s && (c += 10), 1 == s && (c += 20), s > 1 && (c += 80), a = 0, s = 0), r++
            } while (r < e && r <= n + 8);
            return 0 == a && (c += 80), a > 1 && (0 == s && (c += 10), 1 == s && (c += 20), s > 1 && (c += 80)), c
        }

        static gm_in_numeral(t, e, n, r) {
            if (n < r.p_numeral_end) return !0;
            let o = 0, a = 0, s = 0, c = 0;
            for (o = n; o < e && o < n + 4 && a < 3; o++) if (i.isDigit(t[o])) a++; else if (this.gm_numeral_nondigits.indexOf(String.fromCharCode(t[o])) >= 0) {
                if (s) break;
                s = 1, c = o
            } else {
                if (!(o < e - 1 && 13 == t[o] && 10 == t[o + 1])) break;
                if (s) break;
                o++, s = 2, c = o
            }
            return 0 == a ? (r.p_numeral_end = 0, !1) : (s && c == o - 1 && (s = 0), r.p_numeral_end = n + a + s, r.p_numeral_cost = 3 == a ? 2 == s ? 24 : 1 == s ? 30 : 20 : 2 == a ? 2 == s ? 30 : 1 == s ? 40 : 30 : 2 == s ? 40 : 60, !0)
        }

        static init_modes(t) {
            const e = new Uint8Array(t.length),
                n = [d.GM_CHINESE, d.GM_NUMBER, d.GM_LOWER, d.GM_UPPER, d.GM_MIXED, d.GM_BYTE],
                r = [24, 36, 24, 24, 24, 78],
                o = [[0, 90, 78, 78, 78, 132], [60, 0, 60, 60, 60, 114], [30, 42, 0, 30, 42, 96], [30, 42, 30, 0, 42, 96], [60, 72, 60, 60, 0, 114], [24, 36, 24, 24, 24, 0]],
                a = [78, 60, 30, 30, 60, 24], s = {p_numeral_end: 0, p_numeral_cost: 0}, c = t.length;
            let l, h, u, g, f, _, y, b = 0, m = !1, P = 0, A = 0;
            const v = new Uint32Array(6), R = new Uint32Array(6), w = new Uint8Array(6 * t.length);
            v.set(r);
            for (let e = 0, P = 0; e < c; e++, P += 6) {
                if (R.fill(0), h = u = g = f = _ = y = 0, m = !1, l = t[e] > 255, l || (m = 32 == t[e], m || (h = i.isDigit(t[e]), h ? e + 1 < c && (_ = i.isDigit(t[e + 1])) : (u = i.isLower(t[e]), u || (g = i.isUpper(t[e]), g || (f = t[e] < 127, f && e + 1 < c && (y = 13 == t[e] && 10 == t[e + 1])))))), R[p.GM_H] = v[p.GM_H] + (_ || y ? 39 : 78), w[P + p.GM_H] = d.GM_CHINESE, (512 == b || l && 511 == b) && (R[p.GM_B] = r[p.GM_B], l && 511 == b && (R[p.GM_B] += 48, l = 0), b = 0), R[p.GM_B] += v[p.GM_B] + (l ? 96 : 48), w[P + p.GM_B] = d.GM_BYTE, b += l ? 2 : 1, this.gm_in_numeral(t, c, e, s) && (R[p.GM_N] = v[p.GM_N] + s.p_numeral_cost, w[P + p.GM_N] = d.GM_NUMBER), f ? (R[p.GM_L] = v[p.GM_L] + 78, w[P + p.GM_L] = d.GM_LOWER, R[p.GM_U] = v[p.GM_U] + 78, w[P + p.GM_U] = d.GM_UPPER, R[p.GM_M] = v[p.GM_M] + 96, w[P + p.GM_M] = d.GM_MIXED) : ((u || m) && (R[p.GM_L] = v[p.GM_L] + 30, w[P + p.GM_L] = d.GM_LOWER), (g || m) && (R[p.GM_U] = v[p.GM_U] + 30, w[P + p.GM_U] = d.GM_UPPER), (h || u || g || m) && (R[p.GM_M] = v[p.GM_M] + 36, w[P + p.GM_M] = d.GM_MIXED)), e == c - 1) for (let t = 0; t < 6; t++) w[P + t] && (R[t] += a[t]);
                for (let t = 0; t < 6; t++) for (let e = 0; e < 6; e++) if (t != e && w[P + e]) {
                    const r = R[e] + o[e][t];
                    (!w[P + t] || r < R[t]) && (R[t] = r, w[P + t] = n[e])
                }
                v.set(R)
            }
            P = v[0], A = n[0];
            for (let t = 1; t < 6; t++) v[t] < P && (P = v[t], A = n[t]);
            for (let t = c - 1, r = 6 * t; t >= 0; t--, r -= 6) A = w[r + n.indexOf(A)], e[t] = A;
            return e
        }

        static gm_encode(t, e, n, r) {
            const o = new Uint8Array(3);
            let a = 0, s = 0, c = 0, l = 0;
            const h = new f;
            let u = 0, p = d.None, g = d.None, _ = 0;
            n && h.bin_append_posn(10, 4), r && (h.bin_append_posn(12, 4), r <= 1023 ? h.bin_append_posn(r, 11) : r <= 32767 ? (h.bin_append_posn(2, 2), h.bin_append_posn(r, 15)) : (h.bin_append_posn(3, 2), h.bin_append_posn(r, 20)));
            let y, b, m = d.None, P = 0, A = 0, v = 0, R = 0;
            const w = this.init_modes(t);
            do {
                if (m = w[u], m != p) switch (p) {
                    case d.None:
                        switch (m) {
                            case d.GM_CHINESE:
                                h.bin_append_posn(1, 4);
                                break;
                            case d.GM_NUMBER:
                                h.bin_append_posn(2, 4);
                                break;
                            case d.GM_LOWER:
                                h.bin_append_posn(3, 4);
                                break;
                            case d.GM_UPPER:
                                h.bin_append_posn(4, 4);
                                break;
                            case d.GM_MIXED:
                                h.bin_append_posn(5, 4);
                                break;
                            case d.GM_BYTE:
                                h.bin_append_posn(6, 4)
                        }
                        break;
                    case d.GM_CHINESE:
                        switch (m) {
                            case d.GM_NUMBER:
                                h.bin_append_posn(8161, 13);
                                break;
                            case d.GM_LOWER:
                                h.bin_append_posn(8162, 13);
                                break;
                            case d.GM_UPPER:
                                h.bin_append_posn(8163, 13);
                                break;
                            case d.GM_MIXED:
                                h.bin_append_posn(8164, 13);
                                break;
                            case d.GM_BYTE:
                                h.bin_append_posn(8165, 13)
                        }
                        break;
                    case d.GM_NUMBER:
                        switch (P) {
                            case 1:
                                h.set(_, 1), h.set(_ + 1, 0);
                                break;
                            case 2:
                                h.set(_, 0), h.set(_ + 1, 1);
                                break;
                            case 3:
                                h.set(_, 0), h.set(_ + 1, 0)
                        }
                        switch (m) {
                            case d.GM_CHINESE:
                                h.bin_append_posn(1019, 10);
                                break;
                            case d.GM_LOWER:
                                h.bin_append_posn(1020, 10);
                                break;
                            case d.GM_UPPER:
                                h.bin_append_posn(1021, 10);
                                break;
                            case d.GM_MIXED:
                                h.bin_append_posn(1022, 10);
                                break;
                            case d.GM_BYTE:
                                h.bin_append_posn(1023, 10)
                        }
                        break;
                    case d.GM_LOWER:
                    case d.GM_UPPER:
                        switch (m) {
                            case d.GM_CHINESE:
                                h.bin_append_posn(28, 5);
                                break;
                            case d.GM_NUMBER:
                                h.bin_append_posn(29, 5);
                                break;
                            case d.GM_LOWER:
                            case d.GM_UPPER:
                                h.bin_append_posn(30, 5);
                                break;
                            case d.GM_MIXED:
                                h.bin_append_posn(124, 7);
                                break;
                            case d.GM_BYTE:
                                h.bin_append_posn(126, 7)
                        }
                        break;
                    case d.GM_MIXED:
                        switch (m) {
                            case d.GM_CHINESE:
                                h.bin_append_posn(1009, 10);
                                break;
                            case d.GM_NUMBER:
                                h.bin_append_posn(1010, 10);
                                break;
                            case d.GM_LOWER:
                                h.bin_append_posn(1011, 10);
                                break;
                            case d.GM_UPPER:
                                h.bin_append_posn(1012, 10);
                                break;
                            case d.GM_BYTE:
                                h.bin_append_posn(1015, 10)
                        }
                        break;
                    case d.GM_BYTE:
                        switch (h.gm_add_byte_count(s, c), c = 0, m) {
                            case d.GM_CHINESE:
                                h.bin_append_posn(1, 4);
                                break;
                            case d.GM_NUMBER:
                                h.bin_append_posn(2, 4);
                                break;
                            case d.GM_LOWER:
                                h.bin_append_posn(3, 4);
                                break;
                            case d.GM_UPPER:
                                h.bin_append_posn(4, 4);
                                break;
                            case d.GM_MIXED:
                                h.bin_append_posn(5, 4)
                        }
                }
                switch (g = p, p = m, p) {
                    case d.GM_CHINESE:
                        v = 0, t[u] > 255 && (y = (65280 & t[u]) >> 8, b = 255 & t[u], y >= 161 && y <= 169 ? A = 96 * (y - 161) + (b - 160) : y >= 176 && y <= 247 && (A = 96 * (y - 176 + 9) + (b - 160)), v = 1), v || u != e - 1 && 13 == t[u] && 10 == t[u + 1] && (A = 7776, u++, v = 1), v || u != e - 1 && i.isDigit(t[u]) && i.isDigit(t[u + 1]) && (A = 8033 + 10 * (t[u] - 48) + (t[u + 1] - 48), u++, v = 1), v || (A = 7777 + t[u]), h.bin_append_posn(A, 13), u++;
                        break;
                    case d.GM_NUMBER:
                        g != p && (_ = h.pos, h.bin_append_posn(0, 2)), P = 0, R = -1, o.fill(48);
                        do {
                            if (i.isDigit(t[u])) o[P] = t[u], P++; else if (this.gm_numeral_nondigits.indexOf(String.fromCharCode(t[u])) >= 0) {
                                if (-1 != R) break;
                                a = t[u], R = P
                            } else {
                                if (!(u < e - 1 && 13 == t[u] && 10 == t[u + 1])) break;
                                if (-1 != R) break;
                                a = t[u], u++, R = P
                            }
                            u++
                        } while (P < 3 && u < e && w[u] == d.GM_NUMBER);
                        if (-1 != R) {
                            switch (a) {
                                case 32:
                                    A = 0;
                                    break;
                                case 43:
                                    A = 3;
                                    break;
                                case 45:
                                    A = 6;
                                    break;
                                case 46:
                                    A = 9;
                                    break;
                                case 44:
                                    A = 12;
                                    break;
                                case 13:
                                    A = 15
                            }
                            A += R, A += 1e3, h.bin_append_posn(A, 10)
                        }
                        A = 100 * (o[0] - 48) + 10 * (o[1] - 48) + (o[2] - 48), h.bin_append_posn(A, 10);
                        break;
                    case d.GM_BYTE:
                        g != p && (s = h.pos, h.bin_append_posn(0, 9)), A = t[u], (512 == c || A > 255 && 511 == c) && (A > 255 && 511 == c && (h.bin_append_posn(A >> 8, 8), A &= 255, c++), h.gm_add_byte_count(s, c), h.bin_append_posn(7, 4), s = h.pos, h.bin_append_posn(0, 9), c = 0), h.bin_append_posn(A, A > 255 ? 16 : 8), u++, c++, A > 255 && c++;
                        break;
                    case d.GM_MIXED:
                        l = 1, (i.isDigit(t[u]) || i.isUpper(t[u]) || i.isLower(t[u]) || 32 == t[u]) && (l = 0), 0 == l ? (A = this.EUROPIUM_CHARS.indexOf(String.fromCharCode(t[u])), h.bin_append_posn(A, 6)) : (h.bin_append_posn(1014, 10), h.gm_add_shift_char(t[u])), u++;
                        break;
                    case d.GM_UPPER:
                        l = 1, (i.isUpper(t[u]) || 32 == t[u]) && (l = 0), 0 == l ? (A = this.UPPER_CHARS.indexOf(String.fromCharCode(t[u])), h.bin_append_posn(A, 5)) : (h.bin_append_posn(125, 7), h.gm_add_shift_char(t[u])), u++;
                        break;
                    case d.GM_LOWER:
                        l = 1, (i.isLower(t[u]) || 32 == t[u]) && (l = 0), 0 == l ? (A = this.LOWER_CHARS.indexOf(String.fromCharCode(t[u])), h.bin_append_posn(A, 5)) : (h.bin_append_posn(125, 7), h.gm_add_shift_char(t[u])), u++
                }
                if (h.pos > 9191) return void console.warn("ZINT_ERROR_TOO_LONG")
            } while (u < e);
            if (p == d.GM_NUMBER) switch (P) {
                case 1:
                    h.set(_, 1), h.set(_ + 1, 0);
                    break;
                case 2:
                    h.set(_, 0), h.set(_ + 1, 1);
                    break;
                case 3:
                    h.set(_, 0), h.set(_ + 1, 0)
            }
            switch (p == d.GM_BYTE && h.gm_add_byte_count(s, c), p) {
                case d.GM_CHINESE:
                    h.bin_append_posn(8160, 13);
                    break;
                case d.GM_NUMBER:
                    h.bin_append_posn(1018, 10);
                    break;
                case d.GM_LOWER:
                case d.GM_UPPER:
                    h.bin_append_posn(27, 5);
                    break;
                case d.GM_MIXED:
                    h.bin_append_posn(1008, 10);
                    break;
                case d.GM_BYTE:
                    h.bin_append_posn(0, 4)
            }
            if (!(h.pos > 9191)) return P = 7 - h.pos % 7, P % 7 && h.bin_append_posn(0, P), h;
            console.warn("ZINT_ERROR_TOO_LONG")
        }

        static gm_add_ecc(t, e, n, r) {
            const i = new Uint8Array(1460);
            let o, a, s;
            const c = new Uint8Array(1320), h = new Uint8Array(130), u = new Uint8Array(115), d = new Uint8Array(70),
                p = l.gm_data_codewords[5 * (n - 1) + (r - 1)];
            for (let n = 0; n < e; n++) for (let e = 0; e < 7; e++) 49 != t[7 * n + e] && 1 !== t[7 * n + e] || (c[n] += 64 >> e);
            c[e] = 0;
            for (let t = Math.floor(e + 1); t < p; t++) c[t] = 1 & t ? 126 : 0;
            const f = l.gm_n1[n - 1], _ = l.gm_b1[n - 1], y = f - 1, b = l.gm_b2[n - 1],
                m = l.gm_ebeb[20 * (n - 1) + 4 * (r - 1)], P = l.gm_ebeb[20 * (n - 1) + 4 * (r - 1) + 1],
                A = l.gm_ebeb[20 * (n - 1) + 4 * (r - 1) + 2];
            let v = 0;
            for (let t = 0; t < _ + b; t++) {
                o = t < _ ? f : y, s = t < P ? m : A, a = o - s;
                for (let t = 0; t < a; t++) u[t] = c[v], v++;
                const e = new g(137);
                e.rs_init_code(s, 1), e.rs_encode(a, u, d), e.rs_free(), h.set(u), h.set(d.slice(0, s).reverse(), a);
                for (let e = 0; e < y; e++) i[(_ + b) * e + t] = h[e];
                o == f && (i[(_ + b) * (f - 1) + t] = h[f - 1])
            }
            return i
        }

        static place_macromodule(t, e, n, r, i) {
            const o = 6 * e + 1, a = 6 * n + 1;
            64 & i && t.set(a, o + 2, !0), 32 & i && t.set(a, o + 3, !0), 16 & i && t.set(a + 1, o, !0), 8 & i && t.set(a + 1, o + 1, !0), 4 & i && t.set(a + 1, o + 2, !0), 2 & i && t.set(a + 1, o + 3, !0), 1 & i && t.set(a + 2, o, !0), 64 & r && t.set(a + 2, o + 1, !0), 32 & r && t.set(a + 2, o + 2, !0), 16 & r && t.set(a + 2, o + 3, !0), 8 & r && t.set(a + 3, o, !0), 4 & r && t.set(a + 3, o + 1, !0), 2 & r && t.set(a + 3, o + 2, !0), 1 & r && t.set(a + 3, o + 3, !0)
        }

        static place_data_in_grid(t, e, n) {
            let r = 0;
            const i = Math.floor(13 - (n - 1) / 2);
            for (let o = 0; o < n; o++) for (let a = 0; a < n; a++) r = l.gm_macro_matrix[27 * (o + i) + (a + i)], this.place_macromodule(e, a, o, t[2 * r], t[2 * r + 1])
        }

        static place_layer_id(t, e, n, r) {
            const i = new Uint8Array(e + 1), o = new Uint8Array(n * n);
            for (let t = 0; t <= e; t++) i[t] = 1 == r ? 3 - t % 4 : (t + 5 - r) % 4;
            for (let t = 0; t < n; t++) for (let e = 0; e < n; e++) o[t * n + e] = 0;
            let a = Math.floor(n / 2), s = Math.floor(n / 2);
            for (let t = 0; t <= e; t++) {
                for (let e = a; e <= s; e++) o[a * n + e] = i[t], o[e * n + a] = i[t], o[(n - a - 1) * n + e] = i[t], o[e * n + (n - a - 1)] = i[t];
                a--, s++
            }
            for (let e = 0, r = 0; e < n; e++) for (let i = 0; i < n; i++) r = o[e * n + i], 2 & r && t.set(6 * e + 1, 6 * i + 1, !0), 1 & r && t.set(6 * e + 1, 6 * i + 2, !0)
        }

        static create(t) {
            let e = 0, n = 0;
            const i = t.text;
            if (!i) return;
            let a;
            if ((t.inputMode || h.DATA_MODE) == h.DATA_MODE) {
                const t = o.getBytes(i, !0);
                a = Uint16Array.from(t)
            } else {
                const t = c.encodeToUint8Array(i);
                a = t ? c.uint8ArrayToUint16Array(t, !0) : new Uint16Array(0)
            }
            t.output_options && t.output_options & u.READER_INIT && (e = 1);
            const s = this.gm_encode(a, a.length, e, t.eci);
            if (!s) return;
            if (!s || s.pos <= 0) return;
            const d = Math.floor(s.pos / 7);
            let p = 13;
            for (let t = 12; t > 0; t--) l.gm_recommend_cw[t - 1] >= d && (p = t);
            let g = 13;
            for (let t = 12; t > 0; t--) l.gm_max_cw[t - 1] >= d && (g = t);
            t.layers && t.layers >= 1 && t.layers <= 13 && (n = 1, p = t.layers >= g ? t.layers : g);
            let f = 3;
            1 == p ? f = 5 : 2 != p && 3 != p || (f = 4);
            let y = 1;
            if (1 == p ? y = 4 : 2 == p && (y = 2), t.eccLevel && t.eccLevel >= 1 && t.eccLevel <= 5 && (f = t.eccLevel >= y ? t.eccLevel : y), d > l.gm_data_codewords[5 * (p - 1) + (f - 1)]) {
                if (n && f > y) do {
                    f--
                } while (d > l.gm_data_codewords[5 * (p - 1) + (f - 1)] && f > y);
                for (; d > l.gm_data_codewords[5 * (p - 1) + (f - 1)] && p < 13;) p++;
                for (; d > l.gm_data_codewords[5 * (p - 1) + (f - 1)] && f > 1;) f--
            }
            _.layers = p, _.eccLevel = f;
            let b = 1313;
            switch (f) {
                case 2:
                    b = 1167;
                    break;
                case 3:
                    b = 1021;
                    break;
                case 4:
                    b = 875;
                    break;
                case 5:
                    b = 729
            }
            if (d > b) return void console.warn("Input data too long (E32)");
            const m = this.gm_add_ecc(s.Binary, d, p, f), P = 6 + 12 * p, A = 1 + 2 * p, v = new r(P, P);
            this.place_data_in_grid(m, v, A), this.place_layer_id(v, p, A, f);
            for (let t = 0, e = 0; t < A; t++) {
                e = 1 - (1 & t);
                for (let n = 0; n < A; n++) if (1 == e) {
                    for (let e = 0; e < 5; e++) v.set(6 * n, 6 * t + e, !0), v.set(6 * n + 5, 6 * t + e, !0), v.set(6 * n + e, 6 * t, !0), v.set(6 * n + e, 6 * t + 5, !0);
                    v.set(6 * n + 5, 6 * t + 5, !0), e = 0
                } else e = 1
            }
            return v
        }

        get barcodeType() {
            return "GridMatrix"
        }

        encode(t) {
            return _.create(t)
        }
    }

    _.EUROPIUM_CHARS = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz ", _.UPPER_CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ ", _.LOWER_CHARS = "abcdefghijklmnopqrstuvwxyz ", _.layers = 0, _.eccLevel = 0, _.gm_numeral_nondigits = " +-.,";
    /**
     * @file utils.ts
     * @author DothanTech (hudianxing@dothantech.com)
     * @brief PC JavaScript 版本 相关接口类型及方法定义。
     * @version 2.1
     * @date 2022-05-16
     *
     * @copyright Copyright (c) 2022
     *
     */
    var y, b, m, P, A, v, R, w = {
            METHOD_POST: "POST",
            METHOD_GET: "GET",
            IP: "192.168.0.102",
            PORT1: 15216,
            PORT2: 35216,
            TIME_OUT: 2e3,
            OUTER_TIME_OUT: 5e3,
            TIMEOUT_PRINT: 6e4,
            LABEL_WIDTH: 40,
            LABEL_HEIGHT: 30,
            FONT_NAME: "黑体",
            FONT_HEIGHT: 3.5,
            LINE_WIDTH: .35,
            DASH_LEN: [.5, .5],
            CORNER_RADIUS: 1.5,
            RADIUS: 5,
            RECT_WIDTH: 20,
            THRESHOLD: 192,
            PRINT_ACTION: 4096
        }, I = "lpapi", L = "local", E = "Version", O = "SetSupportedPrinters", M = "GetDefaultPrinter",
        T = "SetDefaultPrinter", D = "DiscoveryPrinters", C = "GetPrinters", j = "OpenPrinter", x = "ClosePrinter",
        N = "IsPrinterOpened", S = "IsPrinterOnline", B = "GetPrinterName", W = "ShowProperty", U = "PrintImageD",
        k = "PrintRawData", G = "PrintPackage", H = "Print", q = "GetParam", F = "SetParam", K = "GetPrinterDPI",
        J = "SetItemOrientation", Y = "SetItemHorizontalAlignment", z = "SetItemVerticalAlignment", $ = "StartJob",
        X = "AbortJob", V = "CommitJob", Q = "GetJobID", Z = "GetJobInfo", tt = "GetPageInfo", et = "GetPageImage",
        nt = "StartPage", rt = "EndPage", it = "ReturnDrawResult", ot = "DrawText", at = "Draw1DBarcode",
        st = "Draw2DQRCode", ct = "Draw2DPdf417", lt = "Draw2DDataMatrix", ht = "DrawRectangle",
        ut = "DrawRoundRectangle", dt = "DrawEllipse", pt = "DrawLine", gt = "DrawDashLine", ft = "DrawImage",
        _t = "DrawImageD", yt = "ServerInfo", bt = "GetFontNames",
        mt = "application/x-www-form-urlencoded;charset=utf-8", Pt = "application/json;charset:utf-8",
        At = "application/octet-stream;encoding=base64", vt = "application/octet-stream;encoding=hex16",
        Rt = "application/octet-stream", wt = "application/octet-stream;encoding=lz77",
        It = "application/octet-stream;encoding=binary";
    t.LPA_ParamID = void 0, (y = t.LPA_ParamID || (t.LPA_ParamID = {}))[y.GapType = 1] = "GapType", y[y.PrintDarkness = 2] = "PrintDarkness", y[y.PrintSpeed = 3] = "PrintSpeed", y[y.PrinterDPIx = 4] = "PrinterDPIx", y[y.PrinterDPIy = 5] = "PrinterDPIy", y[y.ImageAlignment = 36] = "ImageAlignment", t.LPA_GapType = void 0, (b = t.LPA_GapType || (t.LPA_GapType = {}))[b.Unset = 255] = "Unset", b[b.None = 0] = "None", b[b.Hole = 1] = "Hole", b[b.Gap = 2] = "Gap", b[b.Black = 3] = "Black", b[b.Trans = 4] = "Trans", t.LPA_PrintSpeed = void 0, (m = t.LPA_PrintSpeed || (t.LPA_PrintSpeed = {}))[m.Unset = 255] = "Unset", m[m.Min = 0] = "Min", m[m.Low = 1] = "Low", m[m.Normal = 2] = "Normal", m[m.High = 3] = "High", m[m.Max = 4] = "Max", t.LPA_PrintDarkness = void 0, (P = t.LPA_PrintDarkness || (t.LPA_PrintDarkness = {}))[P.Unset = 255] = "Unset", P[P.Min = 0] = "Min", P[P.Low = 3] = "Low", P[P.Normal = 5] = "Normal", P[P.High = 9] = "High", P[P.Max = 14] = "Max", t.LPA_ItemAlignment = void 0, (A = t.LPA_ItemAlignment || (t.LPA_ItemAlignment = {}))[A.Start = 0] = "Start", A[A.Center = 1] = "Center", A[A.End = 2] = "End", A[A.Stretch = 3] = "Stretch", A[A.Expand = 4] = "Expand", t.LPA_FontStyle = void 0, (v = t.LPA_FontStyle || (t.LPA_FontStyle = {}))[v.Regular = 0] = "Regular", v[v.Bold = 1] = "Bold", v[v.Italic = 2] = "Italic", v[v.BoldItalic = 3] = "BoldItalic", v[v.Underline = 4] = "Underline", v[v.Strikeout = 8] = "Strikeout", t.LPA_AutoReturnMode = void 0, (R = t.LPA_AutoReturnMode || (t.LPA_AutoReturnMode = {}))[R.None = 0] = "None", R[R.Char = 1] = "Char", R[R.Word = 2] = "Word";
    var Lt, Et, Ot, Mt, Tt, Dt, Ct, jt, xt, Nt, St = Object.freeze({
            LPA_1DBT_UPC_A: 20,
            LPA_1DBT_UPC_E: 21,
            LPA_1DBT_EAN13: 22,
            LPA_1DBT_EAN8: 23,
            LPA_1DBT_CODE39: 24,
            LPA_1DBT_ITF25: 25,
            LPA_1DBT_CODABAR: 26,
            LPA_1DBT_CODE93: 27,
            LPA_1DBT_CODE128: 28,
            LPA_1DBT_ISBN: 29,
            LPA_1DBT_ECODE39: 30,
            LPA_1DBT_AUTO: 60
        }), Bt = Object.freeze({Preview: "#!#Preview#!#", Transparent: "#!#Transparent#!#", Print: "dtpweb"}),
        Wt = Object.freeze({PrintData: 1, PrevBase64: 2, PrevUrl: 4, TransBase64: 130, Print: 4096});
    t.LPA_Result = void 0, (Lt = t.LPA_Result || (t.LPA_Result = {}))[Lt.WAIT_FOR_ASYNC = -1] = "WAIT_FOR_ASYNC", Lt[Lt.OK = 0] = "OK", Lt[Lt.PARAM_ERROR = 1] = "PARAM_ERROR", Lt[Lt.SYSTEM_ERROR = 2] = "SYSTEM_ERROR", Lt[Lt.NO_SUPPORTED_PRINTER = 3] = "NO_SUPPORTED_PRINTER", Lt[Lt.UNSUPPORTED_PRINTER = 4] = "UNSUPPORTED_PRINTER", Lt[Lt.NO_PRINT_DATA = 5] = "NO_PRINT_DATA", Lt[Lt.NO_PAGE_DIMENSION = 6] = "NO_PAGE_DIMENSION", Lt[Lt.INVALID_FILE = 7] = "INVALID_FILE", Lt[Lt.ERROR_START_JOB = 8] = "ERROR_START_JOB", Lt[Lt.UNSUPPORTED_FUNCTION = 9] = "UNSUPPORTED_FUNCTION", Lt[Lt.INVALID_FONT_NAME = 10] = "INVALID_FONT_NAME", Lt[Lt.NETWORK_FAILED = 90] = "NETWORK_FAILED", Lt[Lt.NETWORK_TIMEOUT = 91] = "NETWORK_TIMEOUT", Lt[Lt.NETWORK_ERROR = 92] = "NETWORK_ERROR", Lt[Lt.NETWORK_ABORT = 93] = "NETWORK_ABORT", Lt[Lt.NETWORK_UNSUPPORTED = 94] = "NETWORK_UNSUPPORTED", Lt[Lt.NETWORK_EXCEPTION = 95] = "NETWORK_EXCEPTION", function (t) {
        t[t.ShowReadNone = 0] = "ShowReadNone", t[t.ShowReadDown = 1] = "ShowReadDown", t[t.ShowReadUp = 2] = "ShowReadUp", t[t.ShowStartStop = 4] = "ShowStartStop", t[t.EanCheckCode = 8] = "EanCheckCode"
    }(Et || (Et = {})), function (t) {
        t[t.Unicode = 0] = "Unicode", t[t.Ansi = 1] = "Ansi", t[t.UTF8 = 2] = "UTF8"
    }(Ot || (Ot = {})), function (t) {
        t[t.ModeNum = 0] = "ModeNum", t[t.ModeAn = 1] = "ModeAn", t[t.Mode8Bit = 2] = "Mode8Bit", t[t.ModeKanji = 3] = "ModeKanji", t[t.ModeStructure = 4] = "ModeStructure", t[t.ModeEci = 5] = "ModeEci", t[t.ModeFnc1First = 6] = "ModeFnc1First", t[t.ModeFnc1Second = 7] = "ModeFnc1Second"
    }(Mt || (Mt = {})), function (t) {
        t[t.EccLevel_L = 0] = "EccLevel_L", t[t.EccLevel_M = 1] = "EccLevel_M", t[t.EccLevel_Q = 2] = "EccLevel_Q", t[t.EccLevel_H = 3] = "EccLevel_H"
    }(Tt || (Tt = {})), function (t) {
        t[t.Unicode = 0] = "Unicode", t[t.Ansi = 1] = "Ansi", t[t.UTF8 = 2] = "UTF8"
    }(Dt || (Dt = {})), function (t) {
        t[t.ModeAuto = 0] = "ModeAuto", t[t.ModeNumeric = 1] = "ModeNumeric", t[t.ModeText = 2] = "ModeText", t[t.ModeBinary = 3] = "ModeBinary"
    }(Ct || (Ct = {})), function (t) {
        t[t.EccLevel_Auto = 0] = "EccLevel_Auto", t[t.EccLevel_1 = 1] = "EccLevel_1", t[t.EccLevel_2 = 2] = "EccLevel_2", t[t.EccLevel_3 = 3] = "EccLevel_3", t[t.EccLevel_4 = 4] = "EccLevel_4", t[t.EccLevel_5 = 5] = "EccLevel_5", t[t.EccLevel_6 = 6] = "EccLevel_6", t[t.EccLevel_7 = 7] = "EccLevel_7", t[t.EccLevel_8 = 8] = "EccLevel_8"
    }(jt || (jt = {})), function (t) {
        t[t.LPASIF_RAWDATA = 0] = "LPASIF_RAWDATA", t[t.LPASIF_BPP_1 = 1] = "LPASIF_BPP_1", t[t.LPASIF_BPP_1N = 2] = "LPASIF_BPP_1N", t[t.LPASIF_32_RGBA = 32] = "LPASIF_32_RGBA", t[t.LPASIF_32_BGRA = 33] = "LPASIF_32_BGRA", t[t.LPASIF_32_RGB = 34] = "LPASIF_32_RGB", t[t.LPASIF_32_BGR = 35] = "LPASIF_32_BGR", t[t.LPASIF_PACKAGE = 90] = "LPASIF_PACKAGE", t[t.LPASIF_IMAGEDATA = 93] = "LPASIF_IMAGEDATA"
    }(xt || (xt = {})), function (t) {
        t[t.UrlEncoded = 0] = "UrlEncoded", t[t.Json = 1] = "Json", t[t.Blob = 2] = "Blob", t[t.Base64 = 3] = "Base64", t[t.Hex16 = 4] = "Hex16", t[t.Lz77 = 5] = "Lz77", t[t.Binary = 6] = "Binary"
    }(Nt || (Nt = {}));
    var Ut, kt = Object.freeze({
        Text: "text",
        Barcode: "barcode",
        QRCode: "qrcode",
        Pdf417: "pdf417",
        DataMatrix: "dataMatrix",
        GridMatrix: "gridMatrix",
        Image: "image",
        Table: "table",
        Rect: "rect",
        Rectangle: "rectangle",
        RoundRect: "roundRectangle",
        Ellipse: "ellipse",
        Line: "line",
        DashLine: "dashLine"
    });
    !function (t) {
        t.Page = "Page", t.Text = "Text", t.String = "String", t.Barcode = "Barcode", t.Qrcode = "Qrcode", t.Date = "Date", t.Time = "Time", t.Image = "Image", t.Photo = "Photo", t.Logo = "Logo", t.Rectangle = "Rectangle", t.Rect = "Rect", t.Ellipse = "Ellipse", t.Circle = "Circle", t.Line = "Line", t.Table = "Table", t.ArcText = "ArcText"
    }(Ut || (Ut = {}));
    var Gt = {
        scaleUnit: 0, getJobAction: function (t, e) {
            var n = t || "";
            return "number" == typeof e ? e : n.startsWith("#!#Prev") ? 2 : n.startsWith("#!#Trans") ? 130 : 4096
        }, assignValue: function (t, e) {
            var n = t || {};
            for (var r in e) Object.prototype.hasOwnProperty.call(e, r) && (this.isPlainObject(n[r]) && this.isPlainObject(e[r]) ? this.assignValue(n[r], e[r]) : this.isPlainObject(e[r]) ? n[r] = this.assignValue({}, e[r]) : Array.isArray(e[r]) ? n[r] = e[r].slice() : n[r] = e[r]);
            return n
        }, merge: function (t) {
            for (var e = [], n = 1; n < arguments.length; n++) e[n - 1] = arguments[n];
            var r = t || {};
            if (!e) return r;
            for (var i = 0; i < e.length; i++) r = this.assignValue(r, e[i]);
            return r
        }, isObject: function (t) {
            return null !== t && "object" == typeof t
        }, isPlainObject: function (t) {
            if ("[object Object]" !== toString.call(t)) return !1;
            var e = Object.getPrototypeOf(t);
            return null === e || e === Object.prototype
        }, isArrayBuffer: function (t) {
            return "[object ArrayBuffer]" === toString.call(t)
        }, isArray: function (t) {
            return Array.isArray ? Array.isArray(t) : "[object Array]" === Object.prototype.toString.call(t)
        }, isHttpsRequest: function (t) {
            return /https:?/.test(t)
        }, isNumberString: function (t) {
            return !!t && (!!(t = t.trim()).match(/^[-+]?[0-9]*\.?[0-9]+$/) || !!t.match(/^(0x)?[0-9a-f]+$/i))
        }, isBooleanString: function (t) {
            return !!t && !!(t = t.trim()).match(/^(yes)|(no)|(true)|(false)$/i)
        }, getNumber: function (t, e) {
            return "number" == typeof t ? t : (t = (t || "").trim(), this.isNumberString(t) ? Number(t) : e || 0)
        }, getBoolean: function (t, e) {
            return !!(t = (t || "").trim()).match(/^(yes)|(true)$/i) || !t.match(/^(no)|(false)$/i) && (e || !1)
        }, parseArray: function (t, e) {
            void 0 === e && (e = 1);
            var n = [];
            if (Gt.isArray(t)) return t;
            if ("string" == typeof t) return t.split(",");
            if ("number" == typeof t) for (var r = 0; r < e; r++) n.push(t);
            return n
        }, parseMargin: function (t) {
            var e, n, r, i, o = [];
            if (t.margin && (1 === (o = Gt.parseArray(t.margin, 4)).length ? o = [o[0], o[0], o[0], o[0]] : 2 === o.length ? o = [o[0], o[1], o[0], o[1]] : 3 === o.length && o.push(o[1])), t.marginH) {
                var a = Gt.parseArray(t.marginH, 2);
                o[1] = null !== (e = a[0]) && void 0 !== e ? e : 0, o[3] = null !== (n = a[1]) && void 0 !== n ? n : a[0]
            }
            if (t.marginV) {
                a = Gt.parseArray(t.marginV, 2);
                o[0] = null !== (r = a[0]) && void 0 !== r ? r : 0, o[2] = null !== (i = a[1]) && void 0 !== i ? i : a[0]
            }
            return "number" == typeof t.marginTop && t.marginTop >= 0 && (o[0] = t.marginTop), "number" == typeof t.marginRight && t.marginRight >= 0 && (o[1] = t.marginRight), "number" == typeof t.marginBottom && t.marginBottom >= 0 && (o[2] = t.marginBottom), "number" == typeof t.marginLeft && t.marginLeft >= 0 && (o[3] = t.marginLeft), o
        }, getParamString: function (t) {
            t = t || {};
            var e = [];
            for (var n in t) {
                var r = t[n];
                null != r && ("object" != typeof r && "function" != typeof r && e.push("".concat(n, "=").concat(encodeURIComponent(r))))
            }
            return e.length > 0 ? e.join("&") : ""
        }, getRequestData: function (t, e) {
            if (null == e ? e = [] : "object" != typeof e && (e = [e]), e.length && "object" == typeof e[0]) return e[0];
            var n = {};
            if ("string" == typeof t && (t = [t]), t.length < 1 || !t[0]) return n;
            for (var r = 0; r < t.length; r++) n[t[r]] = e[r];
            return n
        }, toHexByteString: function (t, e) {
            return (e || "") + "00".concat(t.toString(16)).slice(-2)
        }, loadImage: function (t, e) {
            try {
                if (t) {
                    var n = new Image;
                    n.crossOrigin = "anonymous", n.src = t, n.onload = function () {
                        e && e(n)
                    }, n.onerror = function (t) {
                        console.warn(t), e && e(null)
                    }
                } else console.warn("DzImage.CreateImage: src不能为空!"), e && e(null)
            } catch (t) {
                console.warn(t, "#### 【loadImage.catch】 图片加载异常，error:"), e && e(null)
            }
        }, image2DataUrl: function (t) {
            if (t) {
                var e = document.createElement("canvas");
                e.width = t.width, e.height = t.height;
                var n = e.getContext("2d");
                if (n) return n.drawImage(t, 0, 0, t.width, t.height), e.toDataURL()
            }
        }, filterRecord: function (t, e) {
            return Object.keys(t).filter((function (n) {
                return e(n, t[n])
            })).reduce((function (e, n) {
                return e[n] = t[n], e
            }), {})
        }, processResult: function (t, e, n) {
            e && e(t), n && n(t)
        }, buildURL: function (t, e) {
            var n = "string" == typeof e ? e : this.getParamString(e);
            return n ? "".concat(t, ":").concat(n) : t
        }, request: function (e, n) {
            "undefined" != typeof XMLHttpRequest ? this.requestXMLHttp(e, n) : "undefined" != typeof process && "[object process]" === Object.prototype.toString.call(process) ? this.requestNodeHttp(e, n) : n({
                statusCode: t.LPA_Result.NETWORK_UNSUPPORTED,
                resultInfo: "not supported http request environment!"
            })
        }, requestXMLHttp: function (e, n) {
            var r, i = new XMLHttpRequest, o = e.host || w.IP, a = e.port || w.PORT1,
                s = e.baseUrl || "http://".concat(o, ":").concat(a), c = e.headers;
            e.url && "/" === e.url[0] && (e.url = e.url.substring(1));
            var l = "".concat(s, "/").concat(e.url);
            try {
                i.open(e.method || w.METHOD_GET, l, !e.sync), e.timeout && !e.sync && (i.timeout = e.timeout);
                var h = function () {
                    i && (r = 200 === i.status ? JSON.parse(i.responseText) : {
                        statusCode: t.LPA_Result.NETWORK_FAILED,
                        resultInfo: i.responseText
                    }, n(r), i = null)
                };
                if ("onloadend" in i ? i.onloadend = h : i.onreadystatechange = function () {
                    i && 4 === i.readyState && (0 !== i.status || i.responseURL && 0 === i.responseURL.indexOf("file:")) && setTimeout(h)
                }, i.onabort = function () {
                    i && (n({statusCode: t.LPA_Result.NETWORK_ABORT, resultInfo: "Request aborted!"}), i = null)
                }, i.onerror = function () {
                    n({statusCode: t.LPA_Result.NETWORK_ERROR, resultInfo: "Network Error"}), i = null
                }, i.ontimeout = function () {
                    n({
                        statusCode: t.LPA_Result.NETWORK_TIMEOUT,
                        resultInfo: e.timeout ? "timeout of ".concat(e.timeout, "ms exceeded") : "timeout exceeded"
                    }), i = null
                }, c && "setRequestHeader" in i) for (var u in c) void 0 === e.data && "content-type" === u.toLowerCase() ? delete c[u] : i.setRequestHeader(u, c[u]);
                i.send(e.data)
            } catch (e) {
                n({statusCode: t.LPA_Result.NETWORK_EXCEPTION, resultInfo: e})
            }
        }, requestNodeHttp: function (e, n) {
            var r = require("http");
            e.url && "/" !== e.url[0] && (e.url = "/".concat(e.url));
            var i = {
                host: e.host || w.IP,
                port: e.port || w.PORT1,
                method: e.method || w.METHOD_GET,
                path: e.url,
                headers: e.headers
            }, o = "", a = r.request(i, (function (e) {
                e.on("data", (function (t) {
                    o += t
                })), e.on("end", (function () {
                    var e = {statusCode: t.LPA_Result.NETWORK_EXCEPTION, resultInfo: o};
                    try {
                        e = JSON.parse(o)
                    } catch (t) {
                        console.log(t)
                    }
                    n(e)
                })), e.on("error", (function (e) {
                    r.aborted || n({statusCode: t.LPA_Result.NETWORK_ERROR, resultInfo: e})
                }))
            }));
            if (a.on("error", (function (e) {
                n({statusCode: t.LPA_Result.NETWORK_FAILED, resultInfo: e})
            })), a.on("socket", (function (t) {
                t.setKeepAlive(!0, 6e4)
            })), e.timeout) {
                var s = e.timeout;
                a.setTimeout(s, (function () {
                    a.destroy(), n({
                        statusCode: t.LPA_Result.NETWORK_TIMEOUT,
                        resultInfo: e.timeout ? "timeout of ".concat(e.timeout, "ms exceeded") : "timeout exceeded"
                    })
                }))
            }
            a.end(e.data)
        }, unitConvert: function (t) {
            return 1 === this.scaleUnit && t ? 100 * t : t
        }, poundToMm: function (t) {
            return 25.4 * t / 72
        }, mmToPound: function (t) {
            return 72 * t / 25.4
        }, unitConvertOfDrawBase: function (t, e) {
            t = t || {};
            var n = e || [], r = (n[3] || 0) > 0 ? n[3] : 0, i = (n[0] || 0) > 0 ? n[0] : 0, o = t.x || 0, a = t.y || 0;
            return t.x = this.unitConvert(o + r), t.y = this.unitConvert(a + i), t.width = this.unitConvert(t.width), t.height = this.unitConvert(t.height), t.orientation && t.orientation > 3 && (t.orientation = t.orientation / 90), t
        }, unitConvertOfDrawRect: function (t, e) {
            return (t = this.unitConvertOfDrawBase(t, e)).width = t.width || this.unitConvert(w.RECT_WIDTH), t.height = t.height || t.width, t.cornerWidth = this.unitConvert(t.cornerWidth), t.cornerHeight = this.unitConvert(t.cornerHeight) || t.cornerWidth, t.lineWidth = this.unitConvert(t.lineWidth || w.LINE_WIDTH), t
        }, unitConvertOfLine: function (t, e) {
            var n, r;
            t = t || {};
            var i = e || [], o = (i[3] || 0) > 0 ? i[3] : 0, a = (i[0] || 0) > 0 ? i[0] : 0, s = t.x1 || 0,
                c = t.y1 || 0, l = t.x2 || 0, h = t.y2 || 0, u = w.LINE_WIDTH;
            if (t.lineWidth && t.lineWidth > 0 ? u = t.lineWidth : t.lineWidth = w.LINE_WIDTH, s === l && c === h && (t.width || t.height)) {
                var d = t.x || s, p = t.y || c, g = t.width && t.width > 0 ? t.width : u,
                    f = t.height && t.height > 0 ? t.height : u;
                u = g > f ? f : g, g > f ? (s = d, l = d + g, c = h = p + .5 * f) : (s = l = d + .5 * g, c = p, h = p + f)
            } else s = t.x1 || 0, c = t.y1 || 0, l = null !== (n = t.x2) && void 0 !== n ? n : s, h = null !== (r = t.y2) && void 0 !== r ? r : c;
            if (t.x1 = this.unitConvert(s + o), t.y1 = this.unitConvert(c + a), t.x2 = this.unitConvert(l + o), t.y2 = this.unitConvert(h + a), t.lineWidth = this.unitConvert(u || w.LINE_WIDTH), !t.dashLens && Gt.isArray(t.dashLen) ? (t.dashLens = t.dashLen, t.dashLen = void 0) : t.dashLen || "string" != typeof t.dashLens || (t.dashLen = t.dashLens, t.dashLens = void 0), "string" == typeof t.dashLen && (t.dashLens = t.dashLen.split(",")), t.dashLens && t.dashLens.length > 0) {
                1 === t.dashLens.length && t.dashLens.push(t.dashLens[0]);
                for (var _ = 0; _ < t.dashLens.length; _++) t.dashLens[_] = this.unitConvert(t.dashLens[_]);
                t.dashLen = t.dashLens.join(","), delete t.dashLens
            }
            return t.orientation && t.orientation > 3 && (t.orientation = t.orientation / 90), t
        }, checkTextOptions: function (t) {
            if (t.fontHeight = Gt.unitConvert(t.fontHeight), t.charSpace = Gt.unitConvert(t.charSpace), "number" == typeof t.lineSpace && (t.lineSpace = Gt.unitConvert(t.lineSpace)), t.leadingIndent || (t.leadingIndentChars ? (t.leadingIndent = 10 * t.leadingIndentChars, delete t.leadingIndentChars) : t.leadingIndentMM ? (t.leadingIndentMM >= .01 ? t.leadingIndent = 100 * t.leadingIndentMM + 1e3 : t.leadingIndentMM <= -.01 && (t.leadingIndent = 100 * t.leadingIndentMM - 1e3), delete t.leadingIndentMM) : t.leadingIndentColon && (t.leadingIndent = 1e3, delete t.leadingIndentColon)), 0 === t.leadingIndent && delete t.leadingIndent, Array.isArray(t.regionCorners)) {
                for (var e = 0; e < t.regionCorners.length; e++) t.regionCorners[e] = Gt.unitConvert(t.regionCorners[e]);
                t.regionCorners = t.regionCorners.join(",")
            }
            if (!t.regionCorners) {
                var n = [];
                if (t.regionLeftUpCorner && (n[0] = t.regionLeftUpCorner, delete t.regionLeftUpCorner), t.regionRightUpCorner && (n[1] = t.regionRightUpCorner, delete t.regionRightUpCorner), t.regionRightBottomCorner && (n[2] = t.regionRightBottomCorner, delete t.regionRightBottomCorner), t.regionLeftBottomCorner && (n[3] = t.regionLeftBottomCorner, delete t.regionLeftBottomCorner), n.length > 0) {
                    var r = [];
                    for (e = 0; e < 4; e++) {
                        var i = n[e];
                        if ("string" == typeof i && (i = i.split(",")), r[e] = "0,0", Array.isArray(i)) {
                            i.length > 2 && (i = i.slice(0, 2));
                            for (var o = 0; o < 2; o++) i[o] = Gt.unitConvert(i[o] || 0);
                            r[e] = i.join(",")
                        }
                    }
                    t.regionCorners = r.join(",")
                }
            }
            if (t.regionLeftBorders) {
                var a = t.regionLeftBorders;
                if ("string" == typeof t.regionLeftBorders && (a = t.regionLeftBorders.split(",")), Array.isArray(a) && a.length > 2) {
                    for (e = 0; e < a.length; e++) a[e] = Gt.unitConvert(a[e]);
                    t.regionLeftBorders = a.join(",")
                } else delete t.regionLeftBorders
            }
            if (t.regionRightBorders) if ("string" == typeof (a = t.regionRightBorders) && (a = a.split(",")), Array.isArray(a) && a.length > 2) {
                for (e = 0; e < a.length; e++) a[e] = Gt.unitConvert(a[e]);
                t.regionRightBorders = a.join(",")
            } else delete t.regionRightBorders;
            return void 0 !== t.text && null !== t.text || (Array.isArray(t.texts) ? t.text = t.texts.join("\n") : void 0 !== t.texts && null !== t.texts && (t.text = t.texts)), t
        }, getAgent: function () {
            return navigator.userAgent.toLowerCase() || ""
        }, isWin32: function () {
            var t = this.getAgent();
            return t.indexOf("win32") || t.indexOf("wow32")
        }, isWin64: function () {
            var t = this.getAgent();
            return t.indexOf("win64") || t.indexOf("wow64")
        }, isWindows: function () {
            var t = this.getAgent();
            return t.indexOf("win") >= 0 || t.indexOf("wow") >= 0
        }, isMac: function () {
            return /macintosh|mac os x/i.test(this.getAgent())
        }, formatDate: function (t, e) {
            var n, r = t || "HH:mm:ss.SSS", i = {
                "y+": (e = e || new Date).getFullYear(),
                "M+": e.getMonth() + 1,
                "d+": e.getDate(),
                "h+": e.getHours(),
                "H+": e.getHours(),
                "m+": e.getMinutes(),
                "s+": e.getSeconds(),
                "q+": Math.floor((e.getMonth() + 3) / 3),
                "S+": e.getMilliseconds()
            };
            for (var o in i) if (n = new RegExp("(".concat(o, ")")).exec(r)) {
                var a = "".concat(i[o]), s = "00".concat(a), c = n[1].length > s.length ? 0 : s.length - n[1].length;
                r = r.replace(n[1], 1 === n[1].length ? a : s.substring(c))
            }
            return r
        }, downloadDtpweb: function (t) {
            var e = document.createElement("a");
            return e.href = t, e.click(), !0
        }, parseXmlDocument: function (t) {
            try {
                return t ? (new DOMParser).parseFromString(t, "text/xml") : void 0
            } catch (t) {
                console.warn("xml parse error:"), console.warn(t)
            }
        }, getElementsByTagName: function (t, e, n) {
            if (!t || !e || t.childElementCount <= 0) return [];
            if (n) {
                for (var r = [], i = 0; i < t.childElementCount; i++) {
                    var o = t.children[i];
                    o.tagName.toLowerCase() === e.toLocaleLowerCase() && r.push(o)
                }
                return r
            }
            return t.getElementsByTagName(e)
        }, getElementByTagName: function (t, e, n) {
            return this.getElementsByTagName(t, e, n)[0]
        }, getElementValue: function (t) {
            try {
                return t.childNodes[0].nodeValue || ""
            } catch (t) {
                return ""
            }
        }, getElementValueByTagName: function (t, e) {
            if (!e) return "";
            for (var n = e.split(";"), r = 0; r < n.length; r++) {
                var i = n[r];
                if (i) {
                    var o = this.getElementsByTagName(t, i);
                    return o.length > 0 ? this.getElementValue(o[0]) : ""
                }
            }
        }, parseWdfxString: function (t) {
            var e = this.parseXmlDocument(t), n = e ? e.getElementsByTagName("LPAPI") : void 0;
            return n && n.length > 0 ? n[0] : void 0
        }, isInnerRect: function (t, e) {
            return t.x >= e.x && t.x + t.width <= e.x + e.width && t.y >= e.y && t.y + t.height <= e.y + e.height
        }, hasIntersection: function (t, e) {
            return t.x < e.x + e.width && e.x < t.x + t.width && t.y < e.y + e.height && e.y < t.y + t.height
        }, getUnionRect: function (t, e) {
            var n = Math.min(t.x, e.x), r = Math.min(t.y, e.y);
            return {
                x: n,
                y: r,
                width: Math.max(t.x + t.width, e.x + e.width) - n,
                height: Math.max(t.y + t.height, e.y + e.height) - r
            }
        }, getUnionRectOfRelateRect: function (t, e, n) {
            for (var r = 0, i = e; r < i.length; r++) {
                var o = i[r];
                o !== t ? Gt.hasIntersection(t, o) && (n && n.push(o), t = Gt.getUnionRect(t, o)) : n && n.push(o)
            }
            return t
        }, shrinkCellContent: function (t, e) {
            return {x: t.x + e, y: t.y + e, width: t.width - 2 * e, height: t.height - 2 * e}
        }
    }, Ht = function () {
        function t() {
        }

        return t.isPortrait = function (t) {
            return t < 0 && (t += 360), t > 360 && (t %= 360), t >= 90 && (t /= 90), 0 === t || 2 === t
        }, t.isLandscape = function (t) {
            return t < 0 && (t += 360), t > 360 && (t %= 360), t >= 90 && (t /= 90), 1 === t || 0 === t
        }, t.createCanvas = function (t, e) {
            var n = document.createElement("canvas");
            return n.style.width = "".concat(t, "px"), n.style.height = "".concat(e, "px"), n.width = t, n.height = e, n
        }, t.getDataUrl = function (t, e, n, r, i) {
            if (t = String(null == t ? "" : t)) {
                var o = r || 0, a = e || 0;
                a > 0 && (a = Math.round(a * (i || 203) / 25.4));
                try {
                    var s = h.DATA_MODE, c = t.split("").map((function (t) {
                        return t.charCodeAt(0)
                    }));
                    if ((null == c ? void 0 : c.length) > 0) for (var l = 0, u = c; l < u.length; l++) {
                        if (u[l] >= 128) {
                            s = h.UNICODE_MODE;
                            break
                        }
                    }
                    var d = _.create({text: t, inputMode: s});
                    if (!d || d.rows <= 0 || d.cols <= 0) return;
                    var p = d.rows, g = d.cols, f = n && n > 0 ? n : 3;
                    a > 0 ? f = (a - 2 * o) / p : a = f * p + 2 * o;
                    var y = this.createCanvas(a, a), b = y.getContext("2d");
                    if (!b) return;
                    for (var m = "#000", P = "#fff", A = 0, v = o * f; A < p; A++, v += f) for (var R = 0, w = o * f; R < g; R++, w += f) {
                        var I = Math.floor(w), L = Math.floor(w + f), E = Math.floor(v), O = Math.floor(v + f);
                        d.data[A * (d.cols || 0) + R] ? (b.strokeStyle = m, b.fillStyle = m) : (b.strokeStyle = P, b.fillStyle = P), b.fillRect(I, E, L - I, O - E)
                    }
                    return y.toDataURL("image/png")
                } catch (t) {
                    return
                }
            }
        }, t
    }(), qt = function () {
        function t() {
        }

        return t.isWdfxJob = function (t) {
            var e = t || {};
            return !(!e.layerClass || !e.templateID) && ("LPAPI" === e.layerClass.toUpperCase() && (e.Page || e.page || []).length > 0)
        }, t.getContentText = function (t, e, n) {
            var r = "number" == typeof e.contentType ? e.contentType : 0, i = e.content || e.text,
                o = e.dataColumnName || e.dataName;
            if (2 === r) return o && "function" == typeof n ? n("[".concat(o, "]")) : i || "";
            if (r > 0) return i;
            if ((t = t.toLowerCase()) === kt.Text) return i || "双击输入内容";
            if (t === kt.QRCode) return i || "http://detonger.com/wdbq";
            if (t === kt.Barcode) {
                var a = Gt.getNumber(e.barcodeType);
                return a === St.LPA_1DBT_EAN13 ? "690123456789" : a === St.LPA_1DBT_EAN8 ? "6901234" : a === St.LPA_1DBT_UPC_A ? "69012345678" : a === St.LPA_1DBT_UPC_E ? "0123456" : a === St.LPA_1DBT_ISBN ? "978012345678" : "12345678"
            }
        }, t.rotateRect = function (t, e) {
            (e = (e + 360) % 360) > 3 && (e = Math.floor(e / 90));
            var n = t.x || 0, r = t.y || 0, i = t.width || 0, o = t.height || 0, a = n + .5 * i, s = r + .5 * o;
            return 1 !== e && 3 !== e || (t.x = a - .5 * o, t.y = s - .5 * i, t.width = o, t.height = i), t
        }, t.parseEmbeddedImg = function (t) {
            if (!t) return t;
            var e = "*****", n = t.indexOf(e);
            if (n < 0) return t;
            var r = t.substring(0, n).trim();
            return t = t.substring(n + 5), r && r.toLowerCase().startsWith("svg") ? (console.warn("---- 底层打印助手不支持 SVG 图片的绘制！"), "") : "data:image/".concat(r, ";base64,").concat(t)
        }, t.getDateTime = function (t) {
            var e = t.dateFormat || "", n = t.timeFormat || "", r = t.dateOffset || t.dateDiff || 0,
                i = t.hourOffset || t.hourDiff || 0, o = t.minuteOffset || t.minuteDiff || 0,
                a = t.secondOffset || t.secondDiff || 0, s = new Date;
            if (r || i || o || a) {
                var c = s.getTime();
                r && (c += 864e5 * r), i && (c += 36e5 * i), o && (c += 6e4 * o), a && (c += 1e3 * a), s.setTime(c)
            }
            return e && n ? Gt.formatDate("".concat(e, " ").concat(n)) : e || n ? Gt.formatDate(e || n, s) : Gt.formatDate("yyyy年MM月dd日")
        }, t.parseWdxNode = function (t, e, n) {
            if (t.children && t.children.length > 0) {
                for (var r = {}, i = [], o = 0; o < t.children.length; o++) {
                    var a = t.children[o];
                    if (a && a.tagName) {
                        var s = "function" == typeof e && e(a, t), c = this.parseWdxNode(a, e, s);
                        n ? ("object" != typeof c || Array.isArray(c) || (c.layerClass = a.tagName), i.push(c)) : r[a.tagName] = c
                    }
                }
                return n ? i : r
            }
            return t.childNodes && t.childNodes.length > 0 ? t.childNodes[0].nodeValue : ""
        }, t.getAutoValue = function (t) {
            var e = t ? t.toLowerCase() : "";
            return "true" === e || "yes" === e || "false" !== e && "no" !== e && (Gt.isNumberString(e) ? Number(e) : t)
        }, t.parseWdfx = function (t) {
            var e = Gt.parseXmlDocument(t), n = e ? e.getElementsByTagName("LPAPI") : void 0,
                r = n && n.length > 0 ? n[0] : void 0;
            if (r) {
                var i = this.parseWdxNode(r, (function (t, e) {
                    var n = (t.tagName || "").toLowerCase(), i = (e.tagName || "").toLowerCase();
                    return e === r && "page" === n || "table" === i && "cells" === n
                }));
                return "string" == typeof i || Array.isArray(i) ? void 0 : (i.layerClass = r.tagName, i)
            }
        }, t
    }(), Ft = function () {
        function r() {
            this._deviceWidth = 0, this._deviceDPI = 0, this._currPosY = 0, this._lineHeight = 0, this._margins = [], this._localIPs = new Set, this._version = ""
        }

        return r.checkServer = function (e) {
            var n, r = "function" == typeof e ? {callback: e} : e || {}, i = this.getInstance(r);
            return i.checkPlugin({
                clientType: r.clientType, recheck: r.recheck, callback: function (e) {
                    n = e.statusCode === t.LPA_Result.OK ? i : void 0, r.callback && r.callback(n, e)
                }
            }), n
        }, r.getInstance = function (t) {
            var e = r.instance || (r.instance = new r);
            return e.init(t), e
        }, r.isBase64Str = function (t, e) {
            if (!t) return !1;
            var n = t.lastIndexOf(",");
            if (n <= 0) return !1;
            var r = t.substring(0, n), i = /^\s*data:(.+)\/(.+);base64\s*$/i.exec(r);
            return !!i && (e && e(i[1], i[2], t.substring(n)), !0)
        }, r.encodeWithBase64 = function (t, e) {
            var n = btoa(new Uint8Array(t).reduce((function (t, e) {
                return t + String.fromCharCode(e)
            }), "")), r = /^\s*data:(.+)\/(.+);base64,?\s*$/i.exec(e || "");
            return r ? "data:".concat(r[1], "/").concat(r[2], ";base64,").concat(n) : n
        }, r.decodeBase64 = function (t) {
            if (t) {
                var e = t.lastIndexOf(","), n = e >= 0 ? t.substring(e) : t;
                if (n && n.length % 4 == 0) {
                    for (var r = atob(n), i = r.length, o = new Uint8Array(i); i--;) o[i] = r.charCodeAt(i);
                    return o
                }
            }
        }, r.encodeWithHex16 = function (t, e, n) {
            var r = e || "";
            return Array.from(t).map((function (t) {
                return Gt.toHexByteString(t, n)
            })).join(r)
        }, r.decodeHex16 = function (t) {
            for (var e = [], n = "", r = 0; r < t.length; r += 2) n = t.substring(r, r + 2), e.push(parseInt(n, 16));
            return Uint8Array.from(e)
        }, r.readAsDataURL = function (t, e) {
            try {
                if (t instanceof Blob) {
                    var n = new FileReader;
                    return n.onload = function () {
                        e && e(n.result)
                    }, n.onerror = function (t) {
                        console.warn(t), e && e("")
                    }, n.readAsDataURL(t), !0
                }
                if (t instanceof ArrayBuffer) {
                    var i = r.encodeWithBase64(t);
                    return e(i)
                }
                return e(i = "string" == typeof t ? t : "")
            } catch (t) {
                return console.warn(t), e("")
            }
        }, r.isTransPrevJob = function (t) {
            return !!t && t.toUpperCase().startsWith("#!#trans")
        }, r.isWhitePrevJob = function (t) {
            return !!t && t.toLowerCase().startsWith("#!#prev")
        }, r.isPreviewJob = function (t) {
            return !!t && ((t = t.toLowerCase()).startsWith("#!#trans") || t.startsWith("#!#prev"))
        }, Object.defineProperty(r.prototype, "LastResponse", {
            get: function () {
                return this._Response
            }, enumerable: !1, configurable: !0
        }), Object.defineProperty(r.prototype, "IsJsonMode", {
            get: function () {
                return this.jobStartInfo && "boolean" == typeof this._jsonJob ? this._jsonJob : this._jsonMode || !1
            }, enumerable: !1, configurable: !0
        }), Object.defineProperty(r.prototype, "jobWidth", {
            get: function () {
                return this.jobStartInfo ? this.jobStartInfo.jobInfo.jobWidth : 0
            }, enumerable: !1, configurable: !0
        }), Object.defineProperty(r.prototype, "jobHeight", {
            get: function () {
                return this.jobStartInfo ? this.jobStartInfo.jobInfo.jobHeight : 0
            }, enumerable: !1, configurable: !0
        }), Object.defineProperty(r.prototype, "marginLeft", {
            get: function () {
                return this._margins.length > 3 ? this._margins[3] : 0
            }, enumerable: !1, configurable: !0
        }), Object.defineProperty(r.prototype, "marginRight", {
            get: function () {
                return this._margins.length > 1 ? this._margins[1] : 0
            }, enumerable: !1, configurable: !0
        }), Object.defineProperty(r.prototype, "marginTop", {
            get: function () {
                return this._margins.length > 0 ? this._margins[0] : 0
            }, enumerable: !1, configurable: !0
        }), Object.defineProperty(r.prototype, "marginBottom", {
            get: function () {
                return this._margins.length > 2 ? this._margins[2] : 0
            }, enumerable: !1, configurable: !0
        }), r.prototype.getIpAddress = function (t) {
            return t || this._ip || this._initIp
        }, r.prototype.getPort = function (t) {
            return t || this._port || this._initPort
        }, r.prototype.getTimeout = function (t, e) {
            return t && t > 0 ? t : this._timeout && this._timeout > 0 ? this._timeout : this.isLocalPrinter(e) ? w.TIME_OUT : w.OUTER_TIME_OUT
        }, r.prototype.getDeviceType = function (t) {
            return t || this._deviceType
        }, r.prototype.getFontName = function (t) {
            return t || this._fontName || w.FONT_NAME
        }, r.prototype.getFontHeight = function (t) {
            return t || this._fontHeight || w.FONT_HEIGHT
        }, r.prototype.getLineWidth = function (t) {
            return t || this._lineWidth || w.LINE_WIDTH
        }, r.prototype.getRadius = function (t) {
            return t || this._radius || w.RADIUS
        }, r.prototype.getCornerWidth = function (t) {
            return t || this._cornerWidth || w.CORNER_RADIUS
        }, r.prototype.parseMarginAndOffset = function (t) {
            this._margins.splice(0);
            for (var e = Gt.parseMargin(t), n = 0; n < 4; n++) this._margins[n] = 1 * (e[n] || 0);
            return this._margins
        }, r.prototype.setFontName = function (t) {
            this._fontName = t
        }, r.prototype.init = function (t) {
            var e = t || {};
            e.ip && (this._initIp = e.ip), e.port && (this._initPort = e.port), e.timeout && (this._timeout = e.timeout), this._downloadUrl = e.downloadUrl, e.fontName && (this._fontName = e.fontName), e.fontHeight && (this._fontHeight = e.fontHeight), e.lineWidth && (this._lineWidth = e.lineWidth), e.radius && (this._radius = e.radius), this._showAlert = "boolean" != typeof e.showAlert || e.showAlert, this._jsonMode = "boolean" != typeof e.jsonMode || e.jsonMode, this._showLog = "boolean" != typeof e.showLog || e.showLog, this._onlyDriverPrinter = !e.onlyDriverPrinter || e.onlyDriverPrinter
        }, r.prototype.logMsg = function (t) {
            for (var e = [], n = 1; n < arguments.length; n++) e[n - 1] = arguments[n];
            if (this._showLog) {
                var r = Gt.formatDate();
                console.log("[".concat(r, "]: ").concat(t)), console.log.apply(console, e)
            }
        }, r.prototype.logObj = function (t) {
            this._showLog && console.log(t)
        }, r.prototype.setServerInfo = function (t) {
            var e;
            if (t) {
                if ((null === (e = t.selfIps) || void 0 === e ? void 0 : e.length) > 0) for (var n = 0, r = t.selfIps; n < r.length; n++) {
                    var i = r[n];
                    this._localIPs.add(i)
                }
                var o = (t.version || "").split("/");
                o.length > 1 && (this._version = o[1])
            }
        }, r.prototype.isLocalPrinter = function (t) {
            var e = "number" == typeof t ? t : (null == t ? void 0 : t.type) || 0;
            return this._version && this._version >= "2.3.2023.621" ? e < 10 : e <= 1
        }, r.prototype.checkPlugin = function (e) {
            var n = this, i = "function" == typeof e ? {callback: e} : e || {};
            if (this._pluginCheckResp && 0 === this._pluginCheckResp.statusCode && !i.recheck) return i.callback && i.callback(this._pluginCheckResp), this._pluginCheckResp;
            var o = function (e) {
                if (e.statusCode === t.LPA_Result.OK) console.log("★★★ 打印助手运行正常 ★★★"); else if ((null == e ? void 0 : e.statusCode) === t.LPA_Result.NETWORK_ERROR && "http:" === window.location.protocol) console.log("★★★ 不安全网络[http]环境下需要禁用对本地服务的拦截操作 ★★★"), n._showAlert && window.prompt("检测到不安全的网络环境，如果需要在 http 环境下继续使用打印助手，请打开浏览器，然后在浏览器的地址栏输入下列链接，然后将浏览器的 [Block insecure private network requests] 标志切换到【disable】:", r.URL_BLOCK_PRIVATE_NETWORK); else {
                    console.log("★★★ 未检测到打印助手 ★★★");
                    var o = n._downloadUrl || r.URL_DTPWEB_DOWNLOAD;
                    n._showAlert && window.confirm("未检测到打印助手，是否要下载最新版本的打印助手？") && window.open("".concat(o, "?protocol=").concat(window.location.protocol), "")
                }
                i.callback && i.callback(e)
            }, a = {clientType: i.clientType};
            this.checkPort({
                port: w.PORT1, params: a, callback: function (e) {
                    e.statusCode !== t.LPA_Result.OK ? e.statusCode === t.LPA_Result.NETWORK_ERROR && "http:" === window.location.protocol ? o(e) : n.checkPort({
                        port: w.PORT2,
                        params: a,
                        callback: o
                    }) : o(e)
                }
            })
        }, r.prototype.checkPort = function (e) {
            var n = this;
            this.logMsg("$$$$ DTPWEB request: checkPort(".concat(e.port, ") $$$$"));
            var i = this._initIp || w.IP, o = Gt.getParamString(e.params || {}), a = o ? "?".concat(o) : "";
            r.instance || (r.instance = this), Gt.request({
                host: i,
                port: e.port || this._port,
                url: "".concat(L, "/").concat(yt).concat(a),
                sync: !1,
                timeout: "127.0.0.1" === i || "localhost" === i ? 500 : 2e3
            }, (function (r) {
                if (n.logMsg("#### onResponse: checkPort(".concat(e.port, ") ####"), r), r.statusCode < t.LPA_Result.NETWORK_FAILED) {
                    var o = r.resultInfo;
                    n._initIp || (n._initIp = i), e.port && (n._initPort = e.port), n.setServerInfo(o)
                }
                n._pluginCheckResp = r, e.callback && e.callback(r)
            }))
        }, r.prototype.requestApi = function (e, n) {
            var r = this, i = "string" == typeof e ? {action: e} : e;
            this.logMsg("$$$$ DTPWEB request: ".concat(i.action, " $$$$"), i), n && this.logObj(n), n = n || {};
            var o = i.data || n.data;
            n.data && (n.data = void 0);
            var a = Gt.getParamString(i.params || n), s = a ? "?".concat(a) : "", c = i.control || I,
                l = this.getDeviceType(i.deviceType);
            this._Response = void 0, i.contentType === Nt.Json ? o = JSON.stringify(o || n) : i.contentType || (o = a);
            var h = mt;
            i.contentType === Nt.Json ? h = Pt : i.contentType === Nt.Base64 ? h = At : i.contentType === Nt.Blob ? h = Rt : i.contentType === Nt.Hex16 ? h = vt : i.contentType === Nt.Lz77 ? h = wt : i.contentType === Nt.Binary && (h = It);
            var u = this.isLocalPrinter(l) ? void 0 : i.ip,
                d = {statusCode: t.LPA_Result.WAIT_FOR_ASYNC, resultInfo: void 0};
            return Gt.request({
                method: "POST",
                host: this.getIpAddress(u),
                port: this.getPort(i.port),
                url: "".concat(c, "/").concat(i.action).concat(s),
                params: n,
                headers: {"Content-type": h},
                data: o,
                sync: !i.async,
                timeout: this.getTimeout(i.timeout, l)
            }, (function (t) {
                r.logMsg("#### onResponse: ".concat(i.action, " ####"), t), r._Response = t, i.callback && i.callback(t), d = t
            })), d
        }, r.prototype.getVersion = function (e) {
            var n = "number" == typeof e ? {clientType: e} : {}, r = this.requestApi(E, n);
            return r.statusCode === t.LPA_Result.OK ? r.resultInfo : void 0
        }, r.prototype.getServerInfo = function (e) {
            var n = "number" == typeof e ? {clientType: e} : {}, r = this.requestApi({action: yt, control: L}, n);
            return r.statusCode === t.LPA_Result.OK ? r.resultInfo : void 0
        }, r.prototype.getFontNames = function () {
            var e = this.requestApi({action: bt, control: L});
            return e.statusCode === t.LPA_Result.OK ? (e.resultInfo.fontNames || "").split(",") : []
        }, r.prototype.setSupportedPrinters = function (e) {
            if (Gt.isWindows()) return this.requestApi(O, {supportedPrinters: e}).statusCode === t.LPA_Result.OK
        }, r.prototype.getDefaultPrinter = function () {
            if (Gt.isWindows()) {
                var e = this.requestApi(M);
                return e.statusCode === t.LPA_Result.OK ? e.resultInfo : void 0
            }
        }, r.prototype.setDefaultPrinter = function (t) {
            Gt.isWindows() && this.requestApi(T, {printerName: t})
        }, r.prototype.discoveryPrinters = function (e) {
            return this.requestApi(D, {mode: null != e ? e : 1}).statusCode === t.LPA_Result.OK
        }, r.prototype.getPrinters = function (e, n) {
            var r, i = this, o = "function" == typeof e ? {callback: e} : e || {};
            o.onlyOnline = "boolean" != typeof o.onlyOnline || o.onlyOnline, o.onlySupported = "boolean" != typeof o.onlySupported || o.onlySupported;
            var a = "boolean" == typeof o.withHid ? o.withHid : !this._onlyDriverPrinter,
                s = "boolean" == typeof o.withBluetooth ? o.withBluetooth : !this._onlyDriverPrinter,
                c = Gt.isWindows(), l = function (t) {
                    return t.filter((function (t) {
                        return 7 === t.type ? a : 5 !== t.type || s
                    }))
                }, h = this.requestApi({
                    action: C, async: o.async, timeout: o.timeout || n || 5e3, callback: function (e) {
                        var n = e.statusCode === t.LPA_Result.OK && e.resultInfo.printers || [];
                        i._deviceList = a && s || !c ? n : l(n), "function" == typeof o.callback && o.callback(i._deviceList)
                    }
                }, o), u = (null === (r = h.resultInfo) || void 0 === r ? void 0 : r.printers) || [];
            return a && s || !c ? u : l(u)
        }, r.prototype.getDeviceInfo = function (e) {
            var n = this.requestApi("GetDeviceInfo", {printerName: e});
            return n.statusCode === t.LPA_Result.OK ? n.resultInfo : {}
        }, r.prototype.openPrinter = function (e, n) {
            var r, i = this;
            "function" == typeof (r = "string" == typeof e ? {name: e} : "function" == typeof e ? {callback: e} : e || {}).callback && (n = r.callback);
            var o = this.requestApi({
                action: j,
                ip: r.ip || this._initIp,
                port: r.port || this._initPort,
                deviceType: r.type,
                async: "boolean" == typeof r.async && r.async,
                timeout: r.timeout || (r.async ? 1e4 : 5e3),
                callback: function (e) {
                    if (e.statusCode === t.LPA_Result.OK) {
                        i.isLocalPrinter(r.type) ? (i._ip = void 0, i._port = void 0) : (i._ip = r.ip, i._port = r.port);
                        var o = r.name || r.deviceName || r.printerName;
                        r.type && (i._deviceType = r.type), o && (i._deviceName = o), i._deviceWidth = r.deviceWidth || 0, i._deviceDPI = r.deviceDPI || 0;
                        var a = "object" == typeof e.resultInfo ? e.resultInfo : void 0;
                        !a && i._deviceList && i._deviceList.length > 0 && (a = i._deviceList.filter((function (t) {
                            return t.name === o || t.deviceName === o
                        }))[0]), a && (i._deviceInfo = a, a.deviceWidth && (i._deviceWidth = a.deviceWidth), a.deviceDPI && (i._deviceDPI = a.deviceDPI))
                    }
                    n && n(e.statusCode === t.LPA_Result.OK)
                }
            }, r);
            return o.statusCode === t.LPA_Result.OK || o.statusCode === t.LPA_Result.WAIT_FOR_ASYNC
        }, r.prototype.getPrinterName = function () {
            return this.requestApi(B).resultInfo
        }, r.prototype.getPrinterWidthMM = function () {
            var t, e,
                n = (null === (t = this._deviceInfo) || void 0 === t ? void 0 : t.deviceWidth) || this._deviceWidth,
                r = (null === (e = this._deviceInfo) || void 0 === e ? void 0 : e.deviceDPI) || this._deviceDPI;
            return n > 0 && r > 0 ? n / r * 25.4 : 48
        }, r.prototype.isPrinterOpened = function () {
            return this.requestApi(N).statusCode === t.LPA_Result.OK
        }, r.prototype.isPrinterOnline = function () {
            var e;
            return !!Gt.isWindows() && (null === (e = this.requestApi(S)) || void 0 === e ? void 0 : e.statusCode) === t.LPA_Result.OK
        }, r.prototype.closePrinter = function () {
            return this.requestApi(x).statusCode === t.LPA_Result.OK
        }, r.prototype.showProperty = function (e) {
            return !!Gt.isWindows() && (e.showDocument = "boolean" != typeof e.showDocument || e.showDocument, this.requestApi(W, e).statusCode === t.LPA_Result.OK)
        }, r.prototype.getParam = function (e) {
            var n = Gt.getRequestData(["id"], [e]), r = this.requestApi(q, n);
            return r.statusCode === t.LPA_Result.OK ? r.resultInfo : -1
        }, r.prototype.setParam = function (e) {
            for (var r = [], i = 1; i < arguments.length; i++) r[i - 1] = arguments[i];
            return e = Gt.getRequestData(["id", "value"], n([e], r, !0)), this.requestApi(F, e).statusCode === t.LPA_Result.OK
        }, r.prototype.getGapType = function () {
            return this.getParam(t.LPA_ParamID.GapType)
        }, r.prototype.setGapType = function (e) {
            return this.setParam({id: t.LPA_ParamID.GapType, value: e})
        }, r.prototype.getPrintDarkness = function () {
            return this.getParam(t.LPA_ParamID.PrintDarkness)
        }, r.prototype.setPrintDarkness = function (e) {
            return this.setParam({id: t.LPA_ParamID.PrintDarkness, value: e})
        }, r.prototype.getPrintSpeed = function () {
            return this.getParam(t.LPA_ParamID.PrintSpeed)
        }, r.prototype.setPrintSpeed = function (e) {
            return this.setParam({id: t.LPA_ParamID.PrintSpeed, value: e})
        }, r.prototype.getPrinterDPI = function () {
            var e = this.requestApi(K);
            return e.statusCode === t.LPA_Result.OK ? e.resultInfo : void 0
        }, r.prototype.getImageAlignment = function () {
            return this.getParam(t.LPA_ParamID.ImageAlignment)
        }, r.prototype.setImageAlignment = function (e) {
            return this.setParam({id: t.LPA_ParamID.ImageAlignment, value: e})
        }, r.prototype.startJob = function (e) {
            for (var r = this, i = [], o = 1; o < arguments.length; o++) i[o - 1] = arguments[o];
            e = Gt.getRequestData(["width", "height", "orientation", "jobName"], n([e], i, !0)), this.parseMarginAndOffset(e), e.width = e.width || 0, e.height = e.height || 0, this._pageStartedFunc = e.pageStarted, this._pageEndedFunc = e.pageEnded, e.height <= 0 && "boolean" != typeof e.jsonMode ? this._jsonMode = !0 : this._jsonJob = e.jsonMode, this._currPosY = 0, Gt.scaleUnit = this.IsJsonMode ? 0 : 1, e.scaleUnit = 1, e.width = e.width > 0 ? Gt.unitConvert(e.width) : 0, e.height = e.height > 0 ? Gt.unitConvert(e.height) : 0, e.jobName = e.jobName || Bt.Print;
            var a = e.printerName || this._deviceName;
            if (!a && this._deviceList && this._deviceList.length > 0) for (var s = 0, c = this._deviceList; s < c.length; s++) {
                var l = c[s];
                if (this.isLocalPrinter(l)) {
                    a = l.name;
                    break
                }
            }
            if (this.jobPrintResult = void 0, this.jobPage = void 0, this.jobStartInfo = {
                action: Gt.getJobAction(e.jobName, e.action),
                jobPages: [],
                jobInfo: {jobWidth: e.width, jobHeight: e.height, orientation: e.orientation, jobName: e.jobName},
                printerInfo: {printerName: a, printerDPI: e.printerDPI, printerWidth: e.printerWidth}
            }, this.IsJsonMode) return this.startPage();
            e.width <= 0 && (e.width = w.LABEL_WIDTH), e.height <= 0 && (e.height = w.LABEL_HEIGHT);
            var h = this.requestApi({
                action: $, callback: function (e) {
                    e.statusCode === t.LPA_Result.OK && (r.jobPage = [], r._pageStartedFunc && r._pageStartedFunc(r))
                }
            }, e);
            return h.statusCode === t.LPA_Result.OK || h.statusCode === t.LPA_Result.WAIT_FOR_ASYNC
        }, r.prototype.startPrintJob = function (t, n) {
            var i = this, o = t.jobName, a = "string" == typeof t.printer ? t.printer : t.printerName,
                s = "object" == typeof t.printer ? t.printer : {name: a};
            if (t.printerName || (t.printerName = s.name || this._deviceName), "function" == typeof t.callback && (n = t.callback), r.isPreviewJob(o) || this.IsJsonMode) {
                var c = this.startJob(t);
                return n && n(c), c
            }
            var l = this.openPrinter(e(e({}, s), {
                async: t.async, timeout: t.timeout, callback: function (e) {
                    t.async && (e && i.startJob(t) ? n && n(!0) : n && n(!1))
                }
            }));
            return !!t.async || (l && this.startJob(t) ? (n && n(!0), !0) : (n && n(!1), !1))
        }, r.prototype.abortJob = function () {
            this.IsJsonMode ? (this.jobPage = void 0, this.jobStartInfo = void 0) : this.requestApi(X)
        }, r.prototype.commitJob = function (n) {
            var i = this, o = "function" == typeof n ? {callback: n} : n || {};
            if (!this.jobStartInfo) return console.warn("===== 调用错误，未创建打印任务！====="), void (o.callback && o.callback(void 0));
            o.jobArguments && (this.jobStartInfo.jobArguments = o.jobArguments, o.jobArguments = void 0), Object.assign(this.jobStartInfo.jobInfo, Gt.filterRecord(o, (function (t, e) {
                return "function" != typeof e
            })));
            var a = this.jobStartInfo.jobInfo, s = r.isPreviewJob(a.jobName);
            if ("number" == typeof o.darkness && (a.printDarkness = o.darkness), "number" == typeof o.speed && (a.printSpeed = o.speed), s || ("number" == typeof a.gapType && this.setGapType(a.gapType), "number" == typeof a.printDarkness && this.setPrintDarkness(a.printDarkness), "number" == typeof a.printSpeed && this.setPrintSpeed(a.printSpeed)), this.IsJsonMode) return this.endPage(), this.print(e(e({}, this.jobStartInfo), {
                async: o.async,
                callback: function (t) {
                    i.jobPrintResult = t, o.callback && o.callback(t)
                }
            }));
            var c = {}, l = this.requestApi({
                action: V,
                async: o.async,
                timeout: o.timeout || w.TIMEOUT_PRINT,
                callback: function (e) {
                    if (i.jobPage && (i.jobPage = void 0, i._pageEndedFunc && i._pageEndedFunc(i)), e.statusCode !== t.LPA_Result.OK) o.callback && o.callback(void 0); else {
                        if (s) {
                            var n = i.getPageInfo();
                            if (n) {
                                c.width = n.width, c.height = n.height, c.previewData = [];
                                for (var r = 0; r < n.pages; r++) {
                                    var a = i.getPageImage({page: r});
                                    c.previewData.push(a.data)
                                }
                            }
                        }
                        i.jobPrintResult = c, o.callback && o.callback(c)
                    }
                }
            }, o);
            return l.statusCode === t.LPA_Result.OK || l.statusCode === t.LPA_Result.WAIT_FOR_ASYNC ? c : void 0
        }, r.prototype.setItemHorizontalAlignment = function (t) {
            return this.requestApi(Y, {alignment: t})
        }, r.prototype.setItemVerticalAlignment = function (t) {
            return this.requestApi(z, {alignment: t})
        }, r.prototype.setItemOrientation = function (t) {
            return this.requestApi(J, {orientation: t})
        }, r.prototype.nextLine = function (t) {
            return "number" == typeof t && (this._lineHeight = t), this._lineHeight && (this._currPosY += this._lineHeight), this._currPosY
        }, r.prototype.getJobID = function () {
            return Gt.isWindows() ? this.requestApi(Q).resultInfo : 0
        }, r.prototype.getJobInfo = function (e) {
            if (Gt.isWindows()) {
                var n = this.requestApi(Z, e);
                return n.statusCode === t.LPA_Result.OK ? n.resultInfo : void 0
            }
        }, r.prototype.getPageInfo = function () {
            return this.jobPrintResult && this.jobPrintResult.previewData ? {
                width: this.jobPrintResult.width || 0,
                height: this.jobPrintResult.height || 0,
                pages: this.jobPrintResult.previewData.length || 0
            } : this.IsJsonMode ? {width: 0, height: 0, pages: 0} : this.requestApi(tt).resultInfo
        }, r.prototype.getPageImage = function (t) {
            for (var e = [], r = 1; r < arguments.length; r++) e[r - 1] = arguments[r];
            var i = (t = Gt.getRequestData(["page", "format"], n([t], e, !0))).page || 0, o = this.jobPrintResult || {};
            return o.previewData && o.previewData[i] ? {page: i, data: o.previewData[i]} : this.IsJsonMode ? {
                page: i,
                data: ""
            } : this.requestApi(et, t).resultInfo
        }, r.prototype.startPage = function () {
            if (!this.jobStartInfo) return !1;
            if (this.jobPage && this.jobPage.length <= 0) return !0;
            if (this.jobPage && this.jobPage.length > 0 && this.endPage(), this.jobPage = [], this.IsJsonMode) return this._pageStartedFunc && this._pageStartedFunc(this), !0;
            var e = this.requestApi(nt);
            return this._pageStartedFunc && this._pageStartedFunc(this), e.statusCode === t.LPA_Result.OK
        }, r.prototype.endPage = function () {
            if (!this.jobStartInfo || !this.jobPage) return !1;
            if (this.jobPage.length > 0 && (this.jobStartInfo.jobPages || (this.jobStartInfo.jobPages = []), this.jobStartInfo.jobPages.push(this.jobPage)), this.jobPage = void 0, this.IsJsonMode) return this._pageEndedFunc && this._pageEndedFunc(this), !0;
            var e = this.requestApi(rt);
            return this._pageEndedFunc && this._pageEndedFunc(this), e.statusCode === t.LPA_Result.OK
        }, r.prototype.returnDrawResult = function (e) {
            var n, r = Gt.getRequestData(["returnDrawResult"], [e]);
            return r.returnDrawResult = null === (n = r.returnDrawResult) || void 0 === n || n, this.requestApi(it, r).statusCode === t.LPA_Result.OK
        }, r.prototype.imageSrc2DataUrl = function (t, e) {
            Gt.loadImage(t, (function (t) {
                var n = t ? Gt.image2DataUrl(t) : void 0;
                e && e(n || "")
            }))
        }, r.prototype.mm2Pound = function (t) {
            return Gt.mmToPound(t)
        }, r.prototype.pound2Mm = function (t) {
            return Gt.poundToMm(t)
        }, r.prototype.pix2Mm = function (t, e) {
            return t / (e || 203) * 25.4
        }, r.prototype.mm2Pix = function (t, e) {
            return t / 25.4 * (e || 203)
        }, r.prototype.drawText = function (e) {
            if (e = Gt.getRequestData(["text", "x", "y", "width", "height", "fontHeight", "fontStyle"], arguments), !this.jobPage || !e.text) return !1;
            if (!e.fontHeight && e.fontSize && ("number" == typeof e.fontSize && e.fontSize > 0 ? e.fontHeight = this.pound2Mm(e.fontSize) : e.fontHeight = this.getFontHeight(e.fontHeight || e.height)), void 0 === e.y && (e.y = this._currPosY), void 0 === e.width && "number" == typeof e.autoReturn && e.autoReturn > 0) {
                var n = this.jobWidth || 0, r = this.marginRight, i = e.x || 0;
                n > 0 && i < n - r && (e.width = n - r - i)
            }
            return e.moveToEnd && "number" == typeof e.height && e.height > 0 && (this._currPosY = e.y + e.height), e.fontName = this.getFontName(e.fontName), void 0 !== (e = Gt.unitConvertOfDrawBase(e, this._margins)).text && void 0 !== e.content && (e.text = e.content), "string" != typeof e.text && (e.text = "".concat(e.text)), Gt.checkTextOptions(e), this.jobPage.push(Object.assign(e, {type: kt.Text})), !!this.IsJsonMode || this.requestApi(ot, e).statusCode === t.LPA_Result.OK
        }, r.prototype.measureText = function (n) {
            var r = "object" == typeof n ? e({}, n) : {};
            if (r.text) {
                var i;
                if (void 0 !== r.text && null !== r.text && "number" != typeof r.text && (r.text = "".concat(r.text)), r.fontHeight || ("number" == typeof r.fontSize && r.fontSize > 0 ? r.fontHeight = this.pound2Mm(r.fontSize) : r.fontHeight = this.getFontHeight(r.fontHeight || r.height)), r.fontName = this.getFontName(r.fontName), r.width = Gt.unitConvert(r.width), r.height = Gt.unitConvert(r.height), Gt.checkTextOptions(r), r.onlyMeasureText = !0, !this.IsJsonMode) return (i = this.requestApi(ot, r)).statusCode === t.LPA_Result.OK ? i.resultInfo : void 0;
                if (r.x && (r.x *= 100), r.y && (r.y *= 100), r.width && (r.width *= 100), r.height && (r.height *= 100), r.fontHeight && (r.fontHeight *= 100), r.charSpace && (r.charSpace *= 100), "number" == typeof r.lineSpace && (r.lineSpace *= 100), this.requestApi($, {
                    width: 4e3,
                    height: 3e3,
                    jobName: Bt.Preview,
                    scaleUnit: 1
                }), i = this.requestApi(ot, r), this.requestApi(X), i.statusCode === t.LPA_Result.OK) {
                    var o = i.resultInfo;
                    return e(e({}, o), {shownWidth: o.shownWidth / 203 * 25.4, shownHeight: o.shownHeight / 203 * 25.4})
                }
            }
        }, r.prototype.draw1DBarcode = function (e) {
            return e = Gt.getRequestData(["text", "x", "y", "width", "height", "textHeight"], arguments), !(!this.jobPage || !e.text) && (void 0 === e.y && (e.y = this._currPosY), (e = Gt.unitConvertOfDrawBase(e, this._margins)).textHeight = Gt.unitConvert(e.textHeight), e.textBarSpace = Gt.unitConvert(e.textBarSpace), e.fontName = this.getFontName(e.fontName), this.jobPage.push(Object.assign(e, {type: kt.Barcode})), !!this.IsJsonMode || this.requestApi(at, e).statusCode === t.LPA_Result.OK)
        }, r.prototype.draw2DQRCode = function (e) {
            return e = Gt.getRequestData(["text", "x", "y", "width", "height", "eccLevel"], arguments), !(!this.jobPage || !e.text) && (void 0 === e.y && (e.y = this._currPosY), (e = Gt.unitConvertOfDrawBase(e, this._margins)).height || (e.height = e.width), this.jobPage.push(Object.assign(e, {type: kt.QRCode})), !!this.IsJsonMode || this.requestApi(st, e).statusCode === t.LPA_Result.OK)
        }, r.prototype.draw2DPdf417 = function (e) {
            return e = Gt.getRequestData(["text", "x", "y", "width", "height"], arguments), !(!this.jobPage || !e.text) && (void 0 === e.y && (e.y = this._currPosY), e = Gt.unitConvertOfDrawBase(e, this._margins), this.jobPage.push(Object.assign(e, {type: kt.Pdf417})), !!this.IsJsonMode || this.requestApi(ct, e).statusCode === t.LPA_Result.OK)
        }, r.prototype.draw2DDataMatrix = function (e) {
            return e = Gt.getRequestData(["text", "x", "y", "width", "height"], arguments), !(!this.jobPage || !e.text) && (void 0 === e.y && (e.y = this._currPosY), e = Gt.unitConvertOfDrawBase(e, this._margins), this.jobPage.push(Object.assign(e, {type: kt.DataMatrix})), !!this.IsJsonMode || this.requestApi(lt, e).statusCode === t.LPA_Result.OK)
        }, r.prototype.draw2DGridMatrix = function (t) {
            if (t = Gt.getRequestData(["text", "x", "y", "width", "height"], arguments), !this.jobPage || !t.text) return !1;
            void 0 === t.y && (t.y = this._currPosY);
            var n = Ht.getDataUrl(t.text, t.width || t.height, t.pixels, t.quietZone, this._deviceDPI);
            return !!n && this.drawImageD(e(e({}, t), {data: n}))
        }, r.prototype.drawGridMatrix = function (t) {
            return this.draw2DGridMatrix(t)
        }, r.prototype.drawRectangle = function (e) {
            return !!this.jobPage && ((e = Gt.getRequestData(["x", "y", "width", "height", "lineWidth"], arguments)).cornerWidth || e.cornerHeight ? this.drawRoundRectangle(e) : (void 0 === e.y && (e.y = this._currPosY), e.lineWidth = this.getLineWidth(e.lineWidth), e = Gt.unitConvertOfDrawRect(e, this._margins), this.jobPage.push(Object.assign(e, {type: kt.Rect})), !!this.IsJsonMode || this.requestApi(ht, e).statusCode === t.LPA_Result.OK))
        }, r.prototype.drawRoundRectangle = function (e) {
            return !!this.jobPage && ((e = Gt.getRequestData(["x", "y", "width", "height", "cornerWidth", "lineWidth"], arguments)).cornerWidth = this.getCornerWidth(e.cornerWidth || e.cornerHeight), e.lineWidth = this.getLineWidth(e.lineWidth), void 0 === e.y && (e.y = this._currPosY), e = Gt.unitConvertOfDrawRect(e, this._margins), this.jobPage.push(Object.assign(e, {type: kt.RoundRect})), !!this.IsJsonMode || this.requestApi(ut, e).statusCode === t.LPA_Result.OK)
        }, r.prototype.drawEllipse = function (e) {
            return !!this.jobPage && ((e = Gt.getRequestData(["x", "y", "width", "height", "lineWidth"], arguments)).lineWidth = this.getLineWidth(e.lineWidth), void 0 === e.y && (e.y = this._currPosY), e = Gt.unitConvertOfDrawRect(e, this._margins), this.jobPage.push(Object.assign(e, {type: kt.Ellipse})), !!this.IsJsonMode || this.requestApi(dt, e).statusCode === t.LPA_Result.OK)
        }, r.prototype.drawCircle = function (t) {
            var e = t = Gt.getRequestData(["x", "y", "radius", "lineWidth"], arguments);
            void 0 === t.y && (t.y = this._currPosY);
            var n = t.radius || 0, r = t.x || 0, i = t.y || 0, o = t.width || 0, a = t.height || 0;
            return n <= 0 && (o > 0 || a > 0) ? (a <= 0 ? a = o : o <= 0 && (o = a), n = .5 * Math.min(o, a), t.x = r + .5 * o - n, t.y = i + .5 * a - n, t.width = t.height = 2 * n) : (n = this.getRadius(n), void 0 !== t.radius && delete t.radius, o = 2 * n, e.x = r - n, e.y = i - n, e.width = e.height = o), this.drawEllipse(e)
        }, r.prototype.drawLine = function (e) {
            if (!this.jobPage) return !1;
            if (((e = Gt.getRequestData(["x1", "y1", "x2", "y2", "lineWidth"], arguments)).dashLens || e.dashLen || []).length > 0) return this.drawDashLine(e);
            var n = this.jobWidth;
            return "number" == typeof e.x1 || "number" == typeof e.y1 || "number" == typeof e.x2 || "number" == typeof e.y2 ? ("number" != typeof e.y1 && "number" != typeof e.y2 && (e.y1 = e.y2 = this._currPosY), "number" != typeof e.x1 && "number" != typeof e.x2 && n > 0 && (e.x1 = 0, e.x2 = n)) : "number" == typeof e.width || "number" == typeof e.height ? (void 0 === e.y && (e.y = this._currPosY), n > 0 && "number" != typeof e.width && ("number" != typeof e.x && (e.x = 0), "number" != typeof e.width && (e.width = n - e.x))) : (e.y1 = e.y2 = this._currPosY, e.x1 = 0, e.x2 = n > 0 ? n : 0), e.lineWidth = this.getLineWidth(e.lineWidth), e = Gt.unitConvertOfLine(e, this._margins), this.jobPage.push(Object.assign(e, {type: kt.Line})), !!this.IsJsonMode || this.requestApi(pt, e).statusCode === t.LPA_Result.OK
        }, r.prototype.drawDashLine = function (e) {
            if (!this.jobPage) return !1;
            ((e = Gt.getRequestData(["x1", "y1", "x2", "y2", "dashLen", "lineWidth"], arguments)).dashLen || e.dashLens || []).length < 1 && (e.dashLens = w.DASH_LEN);
            var n = this.jobWidth;
            return "number" == typeof e.x1 || "number" == typeof e.y1 || "number" == typeof e.x2 || "number" == typeof e.y2 ? ("number" != typeof e.y1 && "number" != typeof e.y2 && (e.y1 = e.y2 = this._currPosY), "number" != typeof e.x1 && "number" != typeof e.x2 && n > 0 && (e.x1 = 0, e.x2 = n)) : "number" == typeof e.width || "number" == typeof e.height ? (void 0 === e.y && (e.y = this._currPosY), n > 0 && ("number" != typeof e.x && (e.x = 0), "number" != typeof e.width && (e.width = n - e.x))) : (e.y1 = e.y2 = this._currPosY, e.x1 = 0, e.x2 = n > 0 ? n : 0), void 0 === e.y1 && void 0 === e.y2 && (e.y1 = e.y2 = this._currPosY), e.lineWidth = this.getLineWidth(e.lineWidth), e = Gt.unitConvertOfLine(e, this._margins), this.jobPage.push(Object.assign(e, {type: kt.DashLine})), !!this.IsJsonMode || this.requestApi(gt, e).statusCode === t.LPA_Result.OK
        }, r.prototype.drawImage = function (n) {
            return !!this.jobPage && (void 0 === (n = Gt.getRequestData(["imageFile", "x", "y", "width", "height"], arguments)).y && (n.y = this._currPosY), !!(n = Gt.unitConvertOfDrawBase(n, this._margins)).imageFile && ("number" != typeof n.imageAlignment && ("number" == typeof n.horizontalAlignment && 1 !== n.horizontalAlignment ? n.imageAlignment = n.horizontalAlignment : "number" == typeof n.verticalAlignment && 1 !== n.verticalAlignment && (n.imageAlignment = n.verticalAlignment)), this.IsJsonMode ? this._version && this._version < "2.6.20240730" && n.imageFile.length > 1048576 ? (console.warn("dtpweb 版本过低，图片URL字符串太长！"), !1) : (this.jobPage.push(e(e({}, n), {type: kt.Image})), !0) : !(!n.imageFile || n.imageFile.length > 4096) && (this.jobPage.push(n), this.requestApi(ft, n).statusCode === t.LPA_Result.OK)))
        }, r.prototype.drawImageD = function (n) {
            var i, o = this, a = this.jobStartInfo ? this.jobStartInfo.jobInfo : void 0;
            return !(!this.jobPage || !a) && ((n = Gt.getRequestData(["data", "x", "y", "drawWidth", "drawWidth"], arguments)).threshold = null !== (i = n.threshold) && void 0 !== i ? i : w.THRESHOLD, n.width || (n.width = n.drawWidth), n.height || (n.height = n.drawHeight), n.drawWidth || (n.drawWidth = n.width), n.drawHeight || (n.drawHeight = n.height), void 0 === n.y && (n.y = this._currPosY), (n = Gt.unitConvertOfDrawBase(n, this._margins)).drawWidth = Gt.unitConvert(n.drawWidth || a.jobWidth), n.drawHeight = Gt.unitConvert(n.drawHeight || a.jobHeight), "number" != typeof n.imageAlignment && ("number" == typeof n.horizontalAlignment && 1 !== n.horizontalAlignment ? n.imageAlignment = n.horizontalAlignment : "number" == typeof n.verticalAlignment && 1 !== n.verticalAlignment && (n.imageAlignment = n.verticalAlignment)), r.readAsDataURL(n.data, (function (r) {
                return n.data = r, !(!r || !o.jobPage) && (o.IsJsonMode ? o._version && o._version < "2.6.20240730" && r.length > 1048576 ? (console.warn("dtpweb 版本过低，BASE64字符串太大！"), !1) : (delete n.data, o.jobPage.push(e(e({}, n), {
                    imageFile: r,
                    type: kt.Image
                })), !0) : (o.jobPage.push(n), o.requestApi({
                    action: _t,
                    contentType: Nt.Base64,
                    data: r
                }, n).statusCode === t.LPA_Result.OK))
            })))
        },r.prototype.drawItem = function (t) {
            switch (t.type ? t.type = t.type.toLowerCase() : t.type = kt.Text, t.type) {
                case kt.Text:
                    return this.drawText(t);
                case kt.Barcode:
                    return this.draw1DBarcode(t);
                case kt.QRCode:
                    return this.draw2DQRCode(t);
                case kt.Pdf417:
                    return this.draw2DPdf417(t);
                case kt.DataMatrix:
                case"datamatrix":
                    return this.draw2DDataMatrix(t);
                case kt.Image:
                    return this.drawImage(t);
                case kt.Rect:
                    return this.drawRectangle(t);
                case kt.RoundRect:
                case"roundrectangle":
                    return this.drawRoundRectangle(t);
                case kt.Ellipse:
                    return this.drawEllipse(t);
                case kt.Line:
                    return this.drawLine(t);
                case kt.DashLine:
                case"dashline":
                    return this.drawDashLine(t);
                case kt.Table:
                    return this.drawTable(t);
                default:
                    return !1
            }
        },r.prototype.drawTable = function (t) {
            var e = t || {}, n = e, r = e.columnCount || 0;
            if (void 0 === t.y && (t.y = this._currPosY), "number" != typeof e.lineWidth && (e.lineWidth = w.LINE_WIDTH), "number" == typeof n.columns && n.columns > 0 ? r = n.columns : "number" == typeof n.cols && n.cols > 0 && (r = n.cols), !e.tableRows || e.tableRows.length <= 0) {
                var i = e.cells || n.Cells;
                if (Array.isArray(n.rows)) e.tableRows = n.rows; else if (Array.isArray(i) && r > 0) {
                    t.tableRows = [];
                    for (var o = 0; o < i.length; o += r) t.tableRows.push(i.slice(o, o + r))
                }
            }
            var a = this.jobStartInfo;
            if (!a) return !1;
            var s = "number" == typeof e.width ? e.width : a.jobInfo.jobWidth,
                c = "number" == typeof e.height ? e.height : a.jobInfo.jobHeight, l = e.tableRows || [];
            if (s <= 0 || c <= 0 || l.length <= 0) return !1;
            var h = e.lineWidth > 0 ? e.lineWidth : 0, u = e.cellPadding || 0, d = .5 * h,
                p = "number" == typeof e.horizontalAlignment ? e.horizontalAlignment : 1,
                g = "number" == typeof e.verticalAlignment ? e.verticalAlignment : 1, f = e.x || 0, _ = e.y || 0,
                y = "number" == typeof e.rowCount && e.rowCount > 0 ? e.rowCount : 0, b = r > 0 ? r : 0;
            y <= 0 && (y = "number" == typeof n.rows && n.rows > 0 ? n.rows : l.length), b <= 0 && (b = l.reduce((function (t, e) {
                return e && e.length > t ? e.length : t
            }), 0));
            var m = n.colWidth || n.colWidths, P = n.rowHeight || e.rowHeights;
            e.columnWidths || "string" != typeof m || (e.columnWidths = m.split(",").filter((function (t) {
                return t.length > 0
            })).map((function (t) {
                return Gt.getNumber(t)
            }))), e.rowHeights || "string" != typeof P || (e.rowHeights = P.split(",").filter((function (t) {
                return t.length > 0
            })).map((function (t) {
                return Gt.getNumber(t)
            })));
            var A = e.columnWidths && e.columnWidths.length > 1 ? e.columnWidths : Array(b).fill(.5);
            A.length > b ? A = A.slice(0, b) : A.length < b && (A = A.concat(Array(b - A.length).fill(A[A.length - 1])));
            var v = (A = A.map((function (t) {
                return t > 0 ? t : .5
            }))).filter((function (t) {
                return t > 1
            })).reduce((function (t, e) {
                return t + e
            }), 0), R = A.filter((function (t) {
                return t <= 1
            })).reduce((function (t, e) {
                return t + e
            }), 0);
            R > 0 ? A = A.map((function (t) {
                return t > 1 ? t : (s - v) / R * t
            })) : v !== s && (A = A.map((function (t) {
                return t / v * s
            })));
            var I = e.rowHeights && e.rowHeights.length > 1 ? e.rowHeights : Array(y).fill(.5);
            I.length > y ? I = I.slice(0, y) : I.length < y && (I = I.concat(Array(y - I.length).fill(I[I.length - 1])));
            var L = (I = I.map((function (t) {
                return t > 0 ? t : .5
            }))).filter((function (t) {
                return t > 1
            })).reduce((function (t, e) {
                return t + e
            }), 0), E = I.filter((function (t) {
                return t <= 1
            })).reduce((function (t, e) {
                return t + e
            }), 0);
            E > 0 ? I = I.map((function (t) {
                return t > 1 ? t : (c - L) / E * t
            })) : L !== c && (I = I.map((function (t) {
                return t / L * c
            })));
            var O = n.group || n.groups;
            "string" != typeof O || Array.isArray(e.groups) || (e.groups = O.split(";").filter((function (t) {
                return t.trim().length > 0
            })).map((function (t) {
                var e = t.split(",").filter((function (t) {
                    return t.trim().length > 0
                })).map((function (t) {
                    return Gt.getNumber(t)
                }));
                return {
                    x: e.length > 1 ? e[1] - 1 : 0,
                    y: e.length > 0 ? e[0] - 1 : 0,
                    width: e.length > 3 ? e[3] - e[1] + 1 : 0,
                    height: e.length > 2 ? e[2] - e[0] + 1 : 0
                }
            })));
            var M = e.groups ? e.groups.filter((function (t) {
                return t.width > 0 || t.height > 0
            })) : [];
            if (l.forEach((function (t, e) {
                for (var n = 0; n < b; n++) {
                    var r = t[n];
                    if ("object" == typeof r) {
                        var i = r.rowSpan || 0, o = r.columnSpan || r.colSpan || 0;
                        (i > 1 || o > 1) && M.push({x: n, y: e, width: o > 1 ? o : 1, height: i > 1 ? i : 1})
                    }
                }
            })), M.length > 1) {
                var T = M.slice(0);
                M.splice(0);
                for (var D = [], C = 0, j = T; C < j.length; C++) {
                    var x = j[C];
                    if (!(D.indexOf(x) >= 0)) {
                        var N = Gt.getUnionRectOfRelateRect(x, T, D);
                        M.push(N)
                    }
                }
            }
            h > 0 && this.drawRectangle({x: e.x, y: e.y, width: e.width, height: e.height, lineWidth: h});
            for (var S = 0, B = 0; S < y; B += I[S], S++) for (var W = l[S] || [], U = function (t, n) {
                var r = {x: t, y: S, width: 1, height: 1}, i = M.filter((function (t) {
                    return Gt.isInnerRect(r, t)
                })).shift();
                if (i) {
                    if (r.x !== i.x || r.y !== i.y) return "continue";
                    r.width = i.width, r.height = i.height
                }
                var o = function (t, e) {
                    return (t || 0) + e
                }, a = {
                    x: f + n,
                    y: _ + B,
                    width: r.width > 0 ? A.slice(r.x, r.x + r.width).reduce(o, 0) : A[r.x],
                    height: r.height > 0 ? I.slice(r.y, r.y + r.height).reduce(o, 0) : I[r.y]
                };
                r.x > 0 && h > 0 && k.drawLine({
                    x1: a.x,
                    x2: a.x,
                    y1: a.y + (r.y <= 0 ? d : 0),
                    y2: a.y + a.height - (r.y + r.height >= y ? d : 0),
                    lineWidth: h
                }), r.y > 0 && h > 0 && k.drawLine({
                    x1: a.x + (r.x < 1 ? d : 0),
                    x2: a.x + a.width - (r.x + r.width >= b ? d : 0),
                    y1: a.y,
                    y2: a.y,
                    lineWidth: h
                });
                var s = W[t];
                if (void 0 !== s) {
                    var c = s, l = c;
                    if ("object" != typeof s) c = {text: s}; else for (var m = "", P = 0, v = Object.keys(s); P < v.length; P++) {
                        var R = v[P];
                        if (m = l[R], "content" === R) l.text = m, delete l[R]; else {
                            if ("lineSpace" === R) continue;
                            "string" == typeof m && (l[R] = m = qt.getAutoValue(m))
                        }
                    }
                    if (l.layerClass) {
                        var w = l.layerClass.toLowerCase();
                        l.type && (w !== kt.Barcode && w !== kt.QRCode || (l.barcodeType = l.type), l.type = w)
                    }
                    c.type = c.type ? c.type.toLowerCase() : kt.Text, "number" == typeof l.horAlignment && "number" != typeof l.horizontalAlignment && (l.horizontalAlignment = l.horAlignment), "number" == typeof l.verAlignment && "number" != typeof l.verticalAlignment && (l.verticalAlignment = l.verAlignment), "number" != typeof l.horizontalAlignment && (l.horizontalAlignment = p), "number" != typeof l.verticalAlignment && (l.verticalAlignment = g);
                    var L = d + u;
                    if ("number" == typeof l.margin && (L += l.margin), c.type === kt.Text) {
                        var E = c;
                        E.fontHeight || (E.fontHeight = e.fontHeight || .3 * a.height), !E.fontName && e.fontName && (E.fontName = e.fontName), "number" != typeof E.fontStyle && "number" == typeof e.fontStyle && (E.fontStyle = e.fontStyle), "number" != typeof E.autoReturn && "number" == typeof e.autoReturn && (E.autoReturn = e.autoReturn)
                    }
                    k.drawItem(Object.assign(c, Gt.shrinkCellContent(a, L)))
                }
            }, k = this, G = 0, H = 0; G < b; H += A[G], G++) U(G, H);
            return !0
        },r.prototype.printImage = function (e) {
            var n = this;
            return (e = Gt.getRequestData(["data", "printerName"], arguments)).data ? r.readAsDataURL(e.data, (function (r) {
                var i;
                if (r) {
                    var o = "number" == typeof e.scaleUnit ? e.scaleUnit : 2;
                    (o > 2 || o < 0) && (o = 2), 2 === o && (o = 1, e.printWidth && (e.printWidth *= 100), e.printHeight && (e.printHeight *= 100)), e.data = r, e.scaleUnit = o, e.threshold = null !== (i = e.threshold) && void 0 !== i ? i : w.THRESHOLD, e.jobName = e.jobName || Bt.Print;
                    var a = n.requestApi({
                        action: U,
                        contentType: Nt.Base64,
                        data: r,
                        async: e.async,
                        timeout: e.timeout || w.TIMEOUT_PRINT,
                        callback: function (n) {
                            e.callback && e.callback(n.statusCode === t.LPA_Result.OK)
                        }
                    }, e);
                    return a.statusCode === t.LPA_Result.OK || a.statusCode === t.LPA_Result.WAIT_FOR_ASYNC
                }
                return e.callback && e.callback(!1), !1
            })) : (e.callback && e.callback(!1), !1)
        },r.prototype.printRawData = function (n) {
            if (!(n = Gt.getRequestData(["data"], arguments)).data) return n.callback && n.callback(!1), !1;
            var i = Nt.Blob;
            "string" == typeof n.data && (i = r.isBase64Str(n.data) ? Nt.Base64 : Nt.Hex16);
            var o = this.requestApi({
                action: k,
                contentType: i,
                data: n.data,
                async: n.async,
                timeout: n.timeout || w.TIMEOUT_PRINT,
                callback: function (e) {
                    n.callback && n.callback(e.statusCode === t.LPA_Result.OK)
                }
            }, e(e({}, n), {data: void 0}));
            return o.statusCode === t.LPA_Result.OK || o.statusCode === t.LPA_Result.WAIT_FOR_ASYNC
        },r.prototype.printPackage = function (n) {
            if (!(n = Gt.getRequestData(["data"], arguments)).data) return n.callback && n.callback(!1), !1;
            var i = Nt.Blob;
            "string" == typeof n.data && (i = r.isBase64Str(n.data) ? Nt.Base64 : Nt.Hex16);
            var o = this.requestApi({
                action: G,
                contentType: i,
                data: n.data,
                async: n.async,
                timeout: n.timeout || w.TIMEOUT_PRINT,
                callback: function (e) {
                    n.callback && n.callback(e.statusCode === t.LPA_Result.OK)
                }
            }, e(e({}, n), {data: void 0}));
            return o.statusCode === t.LPA_Result.OK || o.statusCode === t.LPA_Result.WAIT_FOR_ASYNC
        },r.prototype.print = function (r) {
            var i, o;
            (r = "string" == typeof r ? {content: r} : r || {}).jobPages && r.jobPages.length > 0 ? Array.isArray(r.jobPages[0]) || (r.jobPages = [r.jobPages]) : r.jobPage && r.jobPage.length > 0 && Array.isArray(r.jobPage[0]) && (r.jobPages = r.jobPage, delete r.jobPage);
            var a = void 0;
            if (r.content) try {
                var s = JSON.parse(r.content);
                qt.isWdfxJob(s) ? r.wdfData = s : a = s, delete r.content
            } catch (t) {
                console.warn(t)
            }
            if (r.wdfData && (a = this.updateWDJOptions(r.wdfData), delete r.wdfData), a && ("object" == typeof a.jobInfo && (r.jobInfo = e(e({}, a.jobInfo), r.jobInfo || {})), a.jobPages && a.jobPages.length > 0 ? Array.isArray(a.jobPages[0]) || (a.jobPages = [a.jobPages]) : a.jobPage && a.jobPage.length > 0 && Array.isArray(a.jobPage[0]) && (a.jobPages = a.jobPage, delete a.jobPage), a.jobPages && a.jobPages.length > 0 ? r.jobPages && r.jobPages.length > 0 ? r.jobPages = n(n([], a.jobPages, !0), r.jobPages, !0) : r.jobPage && r.jobPage.length > 0 ? (r.jobPages = n(n([], a.jobPages, !0), [r.jobPage], !1), delete r.jobPage) : r.jobPages = n([], a.jobPages, !0) : a.jobPage && a.jobPage.length > 0 && (r.jobPages && r.jobPages.length > 0 ? r.jobPages = n([a.jobPage], r.jobPages, !0) : r.jobPage && r.jobPage.length > 0 ? (r.jobPages = [n(n([], a.jobPage, !0), r.jobPage, !0)], delete r.jobPage) : r.jobPages = [a.jobPage]), !r.jobArguments && a.jobArguments && (r.jobArguments = a.jobArguments)), r.jobPage && r.jobPage.length > 0 && (!r.jobPages || r.jobPages.length <= 0) && (r.jobPages = [r.jobPage], delete r.jobPage), r.jobArguments && r.jobArguments.length > 0) for (var c = function (t) {
                var e = r.jobArguments[t];
                if (!Array.isArray(e) && "object" == typeof e) {
                    var n = [];
                    Object.keys(e).forEach((function (t) {
                        n.push({k: t, v: e[t]})
                    })), r.jobArguments[t] = n
                }
            }, l = 0; l < r.jobArguments.length; l++) c(l);
            var h = r.action || w.PRINT_ACTION, u = r.jobInfo || {};
            if (134 & h && (u.orientation && delete u.orientation, u.background && delete u.background), u.copies && u.copies > 1 && r.jobPages) {
                var d = r.jobPages.slice(0);
                if (!u.autoPage && d.length > 1) {
                    r.jobPages.splice(0);
                    for (var p = 0, g = d; p < g.length; p++) {
                        var f = g[p];
                        (i = r.jobPages).push.apply(i, Array(u.copies).fill(f))
                    }
                } else for (l = 1; l < u.copies; l++) (o = r.jobPages).push.apply(o, d)
            }
            var _ = (r.jobPages || [])[0];
            if ((!u.jobWidth || u.jobWidth <= 0) && (u.jobWidth = _.reduce((function (t, e) {
                var n = (e.x || 0) + (e.width || 0);
                return n > t ? n : t
            }), 0), u.jobWidth > 0 ? u.jobWidth += 2 : u.jobWidth = w.LABEL_WIDTH), !u.jobHeight || u.jobHeight <= 0) {
                var y = this.marginBottom > 0 ? this.marginBottom : 2;
                u.jobHeight = _.reduce((function (t, e) {
                    var n = (e.y || 0) + (e.height || e.fontHeight || 0);
                    return n > t ? n : t
                }), 0), u.jobHeight > 0 ? u.jobHeight += y : u.jobHeight = w.LABEL_HEIGHT
            }
            var b = this.requestApi({
                action: H,
                contentType: Nt.Json,
                params: {action: h},
                data: r,
                async: r.async,
                timeout: r.timeout || w.TIMEOUT_PRINT,
                callback: function (e) {
                    var n = (null == e ? void 0 : e.statusCode) === t.LPA_Result.OK ? e.resultInfo : void 0;
                    r.callback && r.callback(n)
                }
            });
            return b.statusCode === t.LPA_Result.OK ? b.resultInfo : void 0
        },r.prototype.printWdfx = function (t) {
            if (!t.content || "string" != typeof t.content) return console.warn("---- 未检测到 wdfx 字符串！"), console.warn(t.content), void (t.callback && t.callback(void 0));
            var n = qt.parseWdfx(t.content);
            return n ? this.print(e(e({}, t), {
                wdfData: n,
                content: void 0
            })) : (console.warn("---- wdfx内容解析错误："), console.warn(t.content), void (t.callback && t.callback(void 0)))
        },r.prototype.updateWDJOptions = function (t) {
            for (var n = t, r = t, i = "", o = 0, a = Object.keys(r); o < a.length; o++) {
                "string" == typeof (i = r[_ = a[o]]) && (r[_] = i = qt.getAutoValue(i)), "labelName" === _ ? (n.jobName = i, delete r.labelName) : "printOrientation" === _ ? (n.orientation = i, delete r.printOrientation) : "labelWidth" === _ ? (n.jobWidth = i, delete r.labelWidth) : "labelHeight" === _ && (n.jobHeight = i, delete r.labelHeight)
            }
            n.jobWidth || (n.jobWidth = 40), n.jobHeight || (n.jobHeight = 30), n.background && (n.background = qt.parseEmbeddedImg(n.background));
            var s = [];
            t.Page ? (s = t.Page, delete t.Page) : t.page && (s = t.page, delete t.page), this.startJob({
                width: n.jobWidth,
                height: n.jobHeight,
                jsonMode: !0
            }), n.border && (n.border = qt.parseEmbeddedImg(n.border), this.drawImage({
                imageFile: n.border,
                x: 0,
                y: 0,
                width: n.jobWidth,
                height: n.jobHeight
            }), delete n.border);
            var c = [];
            if (s && s.length > 0) for (var l = 0, h = s; l < h.length; l++) {
                for (var u = h[l], d = u, p = d.layerClass ? d.layerClass.toLowerCase() : "", g = 0, f = Object.keys(d); g < f.length; g++) {
                    var _;
                    "content" !== (_ = f[g]) && "lineSpace" !== _ && ("string" == typeof (i = d[_]) && (d[_] = i = qt.getAutoValue(i)))
                }
                if (p === kt.Line) {
                    var y = d.x1 || 0, b = d.y1 || 0, m = d.x2 || 0, P = d.y2 || 0;
                    "number" == typeof d.x1 && delete d.x1, "number" == typeof d.y1 && delete d.y1, "number" == typeof d.x2 && delete d.x2, "number" == typeof d.y2 && delete d.y2, d.x = Math.min(y, m), d.y = Math.min(b, P), d.width = Math.abs(y - m), d.height = Math.abs(b - P)
                }
                if ("number" == typeof d.horAlignment && "number" != typeof d.horizontalAlignment && (d.horizontalAlignment = d.horAlignment), "number" == typeof d.verAlignment && "number" != typeof d.verticalAlignment && (d.verticalAlignment = d.verAlignment), d.width && d.height && d.orientation && (p === kt.Line || p === kt.Rectangle ? delete d.orientation : qt.rotateRect(d, -d.orientation)), p === kt.Text) d.text = qt.getContentText(kt.Text, d), this.drawText(d); else if ("time" === p || "date" === p) d.text = qt.getDateTime(d), this.drawText(d); else if ("arctext" === p) d.text || (d.text = qt.getContentText(kt.Text, d)), this.drawText(d); else if (p === kt.Barcode) {
                    d.text = qt.getContentText(kt.Barcode, d), "number" != typeof d.horizontalAlignment && (d.horizontalAlignment = 1);
                    var A = "number" == typeof d.flags ? d.flags : 2,
                        v = "number" == typeof d.fontHeight && d.fontHeight > 0 ? d.fontHeight : 0,
                        R = "number" == typeof d.textHeight ? d.textHeight : v;
                    this.draw1DBarcode(e(e({}, u), {
                        textHeight: 0 === A ? 0 : R,
                        barcodeFlags: 1 === A ? 2 : 2 === A ? 1 : A,
                        barcodeType: "number" == typeof d.type ? d.type : d.barcodeType,
                        horizontalAlignment: "number" == typeof d.horizontalAlignment ? d.horizontalAlignment : 1,
                        verticalAlignment: "number" == typeof d.verticalAlignment ? d.verticalAlignment : 0
                    }))
                } else if (p === kt.QRCode) d.text = qt.getContentText(kt.QRCode, d), "number" != typeof d.horizontalAlignment && (d.horizontalAlignment = 1), "number" != typeof d.verticalAlignment && (d.verticalAlignment = 1), 1 === d.type ? this.draw2DPdf417(d) : 2 === d.type ? this.draw2DDataMatrix(d) : 3 === d.type ? this.drawGridMatrix(d) : this.draw2DQRCode(d); else if ("image" === p || "logo" === p) d.imageFile = qt.parseEmbeddedImg(d.content || d.text), d.content && delete d.content, d.text && delete d.text, void 0 !== d.horizontalAlignment && delete d.horizontalAlignment, void 0 !== d.verticalAlignment && delete d.verticalAlignment, d.alignment = "boolean" == typeof d.tile && d.tile ? 3 : 1, this.drawImage(d); else if (p === kt.Rectangle || p === kt.Rect) if ("boolean" == typeof d.filled && d.filled && (d.fill = !0, delete d.filled), ("number" != typeof d.lineWidth || d.lineWidth <= 0) && (d.lineWidth = .5), 1 === d.type) {
                    var w = "number" == typeof d.cornerWidth && d.cornerWidth > 0 ? d.cornerWidth : 1;
                    this.drawRoundRectangle(e(e({}, d), {cornerWidth: w}))
                } else 2 === d.type ? this.drawEllipse(d) : 3 === d.type ? this.drawCircle(d) : (d.cornerWidth && delete d.cornerWidth, this.drawRectangle(d)); else if (p === kt.Line) {
                    var I = "number" == typeof d.type ? d.type : 0,
                        L = "number" == typeof d.dashGap && d.dashGap > 0 ? d.dashGap : 1;
                    1 === I && (d.dashLen = [L / 5]), d.dashGap && delete d.dashGap, this.drawLine(d)
                } else p === kt.Table ? this.drawTable(e({
                    horizontalAlignment: 0,
                    verticalAlignment: 0
                }, u)) : c.push(e(e({}, d), {type: p}))
            }
            return this.jobPage && this.jobPage.length > 0 && c.push.apply(c, this.jobPage), this.abortJob(), {
                jobInfo: t,
                jobPages: [c]
            }
        },r.URL_DTPWEB_DOWNLOAD = "https://weida.dothantech.com/assets/dtpweb/index.html",r.URL_BLOCK_PRIVATE_NETWORK = "chrome://flags/#block-insecure-private-network-requests",r
    }();
    return t.DTPWeb = Ft, t.LPA_DrawType = kt, t.LPA_JobNames = Bt, t.LPA_PrintActions = Wt, t.checkServer = function (t) {
        return Ft.checkServer(t)
    }, t.getInstance = function (t) {
        return Ft.getInstance(t)
    }, Object.defineProperty(t, "__esModule", {value: !0}), t
}({});
